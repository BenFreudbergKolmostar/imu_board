
GP_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc4c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800ce24  0800ce24  0001ce24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf64  0800cf64  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf64  0800cf64  0001cf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf6c  0800cf6c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf6c  0800cf6c  0001cf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf70  0800cf70  0001cf70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800cf74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001774  200001f0  0800d164  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001964  0800d164  00021964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cced  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000054ee  00000000  00000000  0004cf0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae8  00000000  00000000  00052400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001858  00000000  00000000  00053ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024331  00000000  00000000  00055740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d45f  00000000  00000000  00079a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce8e3  00000000  00000000  00096ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  001657b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f8c  00000000  00000000  001658a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001f0 	.word	0x200001f0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ce0c 	.word	0x0800ce0c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001f4 	.word	0x200001f4
 8000214:	0800ce0c 	.word	0x0800ce0c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b972 	b.w	8000d50 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4615      	mov	r5, r2
 8000a96:	d967      	bls.n	8000b68 <__udivmoddi4+0xe4>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0720 	rsb	r7, r2, #32
 8000aa2:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aaa:	4095      	lsls	r5, r2
 8000aac:	ea47 0803 	orr.w	r8, r7, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ab6:	0c23      	lsrs	r3, r4, #16
 8000ab8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000abc:	fa1f fc85 	uxth.w	ip, r5
 8000ac0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ac4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac8:	fb07 f10c 	mul.w	r1, r7, ip
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d909      	bls.n	8000ae4 <__udivmoddi4+0x60>
 8000ad0:	18eb      	adds	r3, r5, r3
 8000ad2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ad6:	f080 811b 	bcs.w	8000d10 <__udivmoddi4+0x28c>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 8118 	bls.w	8000d10 <__udivmoddi4+0x28c>
 8000ae0:	3f02      	subs	r7, #2
 8000ae2:	442b      	add	r3, r5
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af8:	45a4      	cmp	ip, r4
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x8c>
 8000afc:	192c      	adds	r4, r5, r4
 8000afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b02:	f080 8107 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	f240 8104 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	442c      	add	r4, r5
 8000b10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	2700      	movs	r7, #0
 8000b1a:	b11e      	cbz	r6, 8000b24 <__udivmoddi4+0xa0>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c6 4300 	strd	r4, r3, [r6]
 8000b24:	4639      	mov	r1, r7
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0xbe>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80eb 	beq.w	8000d0a <__udivmoddi4+0x286>
 8000b34:	2700      	movs	r7, #0
 8000b36:	e9c6 0100 	strd	r0, r1, [r6]
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f783 	clz	r7, r3
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d147      	bne.n	8000bda <__udivmoddi4+0x156>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xd0>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80fa 	bhi.w	8000d48 <__udivmoddi4+0x2c4>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e0      	beq.n	8000b24 <__udivmoddi4+0xa0>
 8000b62:	e9c6 4800 	strd	r4, r8, [r6]
 8000b66:	e7dd      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xe8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	f040 808f 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b76:	1b49      	subs	r1, r1, r5
 8000b78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7c:	fa1f f885 	uxth.w	r8, r5
 8000b80:	2701      	movs	r7, #1
 8000b82:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb08 f10c 	mul.w	r1, r8, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2bc>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x14c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x14a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80b6 	bhi.w	8000d3a <__udivmoddi4+0x2b6>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e79f      	b.n	8000b1a <__udivmoddi4+0x96>
 8000bda:	f1c7 0c20 	rsb	ip, r7, #32
 8000bde:	40bb      	lsls	r3, r7
 8000be0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000be4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bec:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bf4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf8:	4325      	orrs	r5, r4
 8000bfa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bfe:	0c2c      	lsrs	r4, r5, #16
 8000c00:	fb08 3319 	mls	r3, r8, r9, r3
 8000c04:	fa1f fa8e 	uxth.w	sl, lr
 8000c08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c0c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c10:	429c      	cmp	r4, r3
 8000c12:	fa02 f207 	lsl.w	r2, r2, r7
 8000c16:	fa00 f107 	lsl.w	r1, r0, r7
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	f080 8087 	bcs.w	8000d36 <__udivmoddi4+0x2b2>
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	f240 8084 	bls.w	8000d36 <__udivmoddi4+0x2b2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4473      	add	r3, lr
 8000c34:	1b1b      	subs	r3, r3, r4
 8000c36:	b2ad      	uxth	r5, r5
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c44:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c48:	45a2      	cmp	sl, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	d26b      	bcs.n	8000d2e <__udivmoddi4+0x2aa>
 8000c56:	45a2      	cmp	sl, r4
 8000c58:	d969      	bls.n	8000d2e <__udivmoddi4+0x2aa>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4474      	add	r4, lr
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	eba4 040a 	sub.w	r4, r4, sl
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c2      	mov	sl, r8
 8000c6e:	464b      	mov	r3, r9
 8000c70:	d354      	bcc.n	8000d1c <__udivmoddi4+0x298>
 8000c72:	d051      	beq.n	8000d18 <__udivmoddi4+0x294>
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d069      	beq.n	8000d4c <__udivmoddi4+0x2c8>
 8000c78:	ebb1 050a 	subs.w	r5, r1, sl
 8000c7c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c80:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c84:	40fd      	lsrs	r5, r7
 8000c86:	40fc      	lsrs	r4, r7
 8000c88:	ea4c 0505 	orr.w	r5, ip, r5
 8000c8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c90:	2700      	movs	r7, #0
 8000c92:	e747      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000c94:	f1c2 0320 	rsb	r3, r2, #32
 8000c98:	fa20 f703 	lsr.w	r7, r0, r3
 8000c9c:	4095      	lsls	r5, r2
 8000c9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	4338      	orrs	r0, r7
 8000cac:	0c01      	lsrs	r1, r0, #16
 8000cae:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cb2:	fa1f f885 	uxth.w	r8, r5
 8000cb6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbe:	fb07 f308 	mul.w	r3, r7, r8
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x256>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd0:	d22f      	bcs.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d92d      	bls.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd6:	3f02      	subs	r7, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1acb      	subs	r3, r1, r3
 8000cdc:	b281      	uxth	r1, r0
 8000cde:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cea:	fb00 f308 	mul.w	r3, r0, r8
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x27e>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf8:	d217      	bcs.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d915      	bls.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1ac9      	subs	r1, r1, r3
 8000d04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d08:	e73b      	b.n	8000b82 <__udivmoddi4+0xfe>
 8000d0a:	4637      	mov	r7, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e709      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000d10:	4607      	mov	r7, r0
 8000d12:	e6e7      	b.n	8000ae4 <__udivmoddi4+0x60>
 8000d14:	4618      	mov	r0, r3
 8000d16:	e6fb      	b.n	8000b10 <__udivmoddi4+0x8c>
 8000d18:	4541      	cmp	r1, r8
 8000d1a:	d2ab      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d1c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d20:	eb69 020e 	sbc.w	r2, r9, lr
 8000d24:	3801      	subs	r0, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	e7a4      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	e7e9      	b.n	8000d02 <__udivmoddi4+0x27e>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	e795      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d32:	4667      	mov	r7, ip
 8000d34:	e7d1      	b.n	8000cda <__udivmoddi4+0x256>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e77c      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	442c      	add	r4, r5
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0x14c>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	442b      	add	r3, r5
 8000d46:	e72f      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d48:	4638      	mov	r0, r7
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xda>
 8000d4c:	4637      	mov	r7, r6
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0xa0>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_DMA_Init+0x60>)
 8000d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5e:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <MX_DMA_Init+0x60>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	6493      	str	r3, [r2, #72]	; 0x48
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_DMA_Init+0x60>)
 8000d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_DMA_Init+0x60>)
 8000d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <MX_DMA_Init+0x60>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <MX_DMA_Init+0x60>)
 8000d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	200b      	movs	r0, #11
 8000d90:	f000 ffe5 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d94:	200b      	movs	r0, #11
 8000d96:	f000 fffc 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	200c      	movs	r0, #12
 8000da0:	f000 ffdd 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000da4:	200c      	movs	r0, #12
 8000da6:	f000 fff4 	bl	8001d92 <HAL_NVIC_EnableIRQ>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dce:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a48      	ldr	r2, [pc, #288]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0320 	and.w	r3, r3, #32
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de6:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a42      	ldr	r2, [pc, #264]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a3c      	ldr	r2, [pc, #240]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a36      	ldr	r2, [pc, #216]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <MX_GPIO_Init+0x13c>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_ICM0_Pin|CS_MMC0_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2181      	movs	r1, #129	; 0x81
 8000e32:	4831      	ldr	r0, [pc, #196]	; (8000ef8 <MX_GPIO_Init+0x140>)
 8000e34:	f001 fc24 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_FRAM0_GPIO_Port, CS_FRAM0_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f001 fc1d 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4828      	ldr	r0, [pc, #160]	; (8000efc <MX_GPIO_Init+0x144>)
 8000e5c:	f001 fa8e 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SWTCH0_Pin|BTN1_Pin|BTN2_Pin|BTN0_Pin;
 8000e60:	2317      	movs	r3, #23
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f001 fa81 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_ICM0_Pin|CS_MMC0_Pin;
 8000e7a:	2381      	movs	r3, #129	; 0x81
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <MX_GPIO_Init+0x140>)
 8000e92:	f001 fa73 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_FRAM0_Pin;
 8000e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_FRAM0_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f001 fa63 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f001 fa55 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_GPIO_Init+0x140>)
 8000ee8:	f001 fa48 	bl	800237c <HAL_GPIO_Init>

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	48001800 	.word	0x48001800

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fdbd 	bl	8001a82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f817 	bl	8000f3a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f7ff ff54 	bl	8000db8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f10:	f7ff ff20 	bl	8000d54 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f14:	f000 f882 	bl	800101c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f18:	f000 fc60 	bl	80017dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f1c:	f000 fcaa 	bl	8001874 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8000f20:	f00a fd4c 	bl	800b9bc <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000f24:	f000 f9fa 	bl	800131c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f28:	f000 fa62 	bl	80013f0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000f2c:	f000 fada 	bl	80014e4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8000f30:	f00b fa12 	bl	800c358 <Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    primary_loop();
 8000f34:	f00b fb34 	bl	800c5a0 <primary_loop>
 8000f38:	e7fc      	b.n	8000f34 <main+0x34>

08000f3a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b0a4      	sub	sp, #144	; 0x90
 8000f3e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f44:	2238      	movs	r2, #56	; 0x38
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f00b ff01 	bl	800cd50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2244      	movs	r2, #68	; 0x44
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00b fef3 	bl	800cd50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6e:	f002 ff07 	bl	8003d80 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f72:	2301      	movs	r3, #1
 8000f74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f80:	2303      	movs	r3, #3
 8000f82:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000f88:	2324      	movs	r3, #36	; 0x24
 8000f8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000f94:	2306      	movs	r3, #6
 8000f96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 ff9f 	bl	8003ee8 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fb0:	f000 f82c 	bl	800100c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 faa2 	bl	8004518 <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000fda:	f000 f817 	bl	800100c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000fde:	f242 0303 	movw	r3, #8195	; 0x2003
 8000fe2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000fec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fcab 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001000:	f000 f804 	bl	800100c <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3790      	adds	r7, #144	; 0x90
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_SPI1_Init+0x74>)
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <MX_SPI1_Init+0x78>)
 8001024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_SPI1_Init+0x74>)
 8001028:	f44f 7282 	mov.w	r2, #260	; 0x104
 800102c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_SPI1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_SPI1_Init+0x74>)
 8001036:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800103a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_SPI1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_SPI1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_SPI1_Init+0x74>)
 800104a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_SPI1_Init+0x74>)
 8001052:	2218      	movs	r2, #24
 8001054:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_SPI1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_SPI1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_SPI1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_SPI1_Init+0x74>)
 800106a:	2207      	movs	r2, #7
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_SPI1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_SPI1_Init+0x74>)
 8001076:	2208      	movs	r2, #8
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_SPI1_Init+0x74>)
 800107c:	f003 fe58 	bl	8004d30 <HAL_SPI_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001086:	f7ff ffc1 	bl	800100c <Error_Handler>
  }

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000434 	.word	0x20000434
 8001094:	40013000 	.word	0x40013000

08001098 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a46      	ldr	r2, [pc, #280]	; (80011d0 <HAL_SPI_MspInit+0x138>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	f040 8085 	bne.w	80011c6 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010bc:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <HAL_SPI_MspInit+0x13c>)
 80010be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c0:	4a44      	ldr	r2, [pc, #272]	; (80011d4 <HAL_SPI_MspInit+0x13c>)
 80010c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010c6:	6613      	str	r3, [r2, #96]	; 0x60
 80010c8:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <HAL_SPI_MspInit+0x13c>)
 80010ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <HAL_SPI_MspInit+0x13c>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a3e      	ldr	r2, [pc, #248]	; (80011d4 <HAL_SPI_MspInit+0x13c>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <HAL_SPI_MspInit+0x13c>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010ec:	23e0      	movs	r3, #224	; 0xe0
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010fc:	2305      	movs	r3, #5
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f001 f937 	bl	800237c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 8001110:	4a32      	ldr	r2, [pc, #200]	; (80011dc <HAL_SPI_MspInit+0x144>)
 8001112:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 8001116:	220a      	movs	r2, #10
 8001118:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 8001140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001144:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001146:	4824      	ldr	r0, [pc, #144]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 8001148:	f000 fe3e 	bl	8001dc8 <HAL_DMA_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8001152:	f7ff ff5b 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 800115a:	659a      	str	r2, [r3, #88]	; 0x58
 800115c:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <HAL_SPI_MspInit+0x140>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 8001164:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <HAL_SPI_MspInit+0x14c>)
 8001166:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 800116a:	220b      	movs	r2, #11
 800116c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 8001170:	2210      	movs	r2, #16
 8001172:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 8001194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001198:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800119a:	4811      	ldr	r0, [pc, #68]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 800119c:	f000 fe14 	bl	8001dc8 <HAL_DMA_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80011a6:	f7ff ff31 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 80011ae:	655a      	str	r2, [r3, #84]	; 0x54
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_SPI_MspInit+0x148>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2101      	movs	r1, #1
 80011ba:	2023      	movs	r0, #35	; 0x23
 80011bc:	f000 fdcf 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011c0:	2023      	movs	r0, #35	; 0x23
 80011c2:	f000 fde6 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40013000 	.word	0x40013000
 80011d4:	40021000 	.word	0x40021000
 80011d8:	20000498 	.word	0x20000498
 80011dc:	40020008 	.word	0x40020008
 80011e0:	200004f8 	.word	0x200004f8
 80011e4:	4002001c 	.word	0x4002001c

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_MspInit+0x44>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_MspInit+0x44>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6613      	str	r3, [r2, #96]	; 0x60
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_MspInit+0x44>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_MspInit+0x44>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_MspInit+0x44>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	6593      	str	r3, [r2, #88]	; 0x58
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_MspInit+0x44>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800121e:	f002 fe53 	bl	8003ec8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 fc50 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <DMA1_Channel1_IRQHandler+0x10>)
 8001292:	f000 ff23 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000498 	.word	0x20000498

080012a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <DMA1_Channel2_IRQHandler+0x10>)
 80012a6:	f000 ff19 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200004f8 	.word	0x200004f8

080012b4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <USB_LP_IRQHandler+0x10>)
 80012ba:	f001 fb00 	bl	80028be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200013f8 	.word	0x200013f8

080012c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80012ce:	f004 ff67 	bl	80061a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200005f0 	.word	0x200005f0

080012dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <SPI1_IRQHandler+0x10>)
 80012e2:	f004 f96f 	bl	80055c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000434 	.word	0x20000434

080012f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <SystemInit+0x28>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <SystemInit+0x28>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SystemInit+0x28>)
 8001306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130a:	609a      	str	r2, [r3, #8]
#endif
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	; 0x50
 8001320:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2234      	movs	r2, #52	; 0x34
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f00b fd04 	bl	800cd50 <memset>

  htim1.Instance = TIM1;
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <MX_TIM1_Init+0xcc>)
 800134a:	4a28      	ldr	r2, [pc, #160]	; (80013ec <MX_TIM1_Init+0xd0>)
 800134c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 143;
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <MX_TIM1_Init+0xcc>)
 8001350:	228f      	movs	r2, #143	; 0x8f
 8001352:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <MX_TIM1_Init+0xcc>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <MX_TIM1_Init+0xcc>)
 800135c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <MX_TIM1_Init+0xcc>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_TIM1_Init+0xcc>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_TIM1_Init+0xcc>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001374:	481c      	ldr	r0, [pc, #112]	; (80013e8 <MX_TIM1_Init+0xcc>)
 8001376:	f004 fcef 	bl	8005d58 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001380:	f7ff fe44 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800138e:	4619      	mov	r1, r3
 8001390:	4815      	ldr	r0, [pc, #84]	; (80013e8 <MX_TIM1_Init+0xcc>)
 8001392:	f005 f995 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800139c:	f7ff fe36 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_TIM1_Init+0xcc>)
 80013b4:	f005 ff7a 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013be:	f7ff fe25 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_TIM1_Init+0xcc>)
 80013d0:	f005 ffee 	bl	80073b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80013da:	f7ff fe17 	bl	800100c <Error_Handler>
  }

}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	; 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200005f0 	.word	0x200005f0
 80013ec:	40012c00 	.word	0x40012c00

080013f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	; 0x38
 80013f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001410:	463b      	mov	r3, r7
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <MX_TIM4_Init+0xec>)
 8001424:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <MX_TIM4_Init+0xf0>)
 8001426:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14399;
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <MX_TIM4_Init+0xec>)
 800142a:	f643 023f 	movw	r2, #14399	; 0x383f
 800142e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <MX_TIM4_Init+0xec>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <MX_TIM4_Init+0xec>)
 8001438:	f242 720f 	movw	r2, #9999	; 0x270f
 800143c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <MX_TIM4_Init+0xec>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <MX_TIM4_Init+0xec>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800144a:	4824      	ldr	r0, [pc, #144]	; (80014dc <MX_TIM4_Init+0xec>)
 800144c:	f004 fc84 	bl	8005d58 <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001456:	f7ff fdd9 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001464:	4619      	mov	r1, r3
 8001466:	481d      	ldr	r0, [pc, #116]	; (80014dc <MX_TIM4_Init+0xec>)
 8001468:	f005 f92a 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8001472:	f7ff fdcb 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001476:	4819      	ldr	r0, [pc, #100]	; (80014dc <MX_TIM4_Init+0xec>)
 8001478:	f004 fd30 	bl	8005edc <HAL_TIM_PWM_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001482:	f7ff fdc3 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	4811      	ldr	r0, [pc, #68]	; (80014dc <MX_TIM4_Init+0xec>)
 8001496:	f005 ff09 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80014a0:	f7ff fdb4 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a4:	2360      	movs	r3, #96	; 0x60
 80014a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4999;
 80014a8:	f241 3387 	movw	r3, #4999	; 0x1387
 80014ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <MX_TIM4_Init+0xec>)
 80014be:	f004 ffef 	bl	80064a0 <HAL_TIM_PWM_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80014c8:	f7ff fda0 	bl	800100c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <MX_TIM4_Init+0xec>)
 80014ce:	f000 f919 	bl	8001704 <HAL_TIM_MspPostInit>

}
 80014d2:	bf00      	nop
 80014d4:	3738      	adds	r7, #56	; 0x38
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200005a4 	.word	0x200005a4
 80014e0:	40000800 	.word	0x40000800

080014e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b09c      	sub	sp, #112	; 0x70
 80014e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001504:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2234      	movs	r2, #52	; 0x34
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f00b fc16 	bl	800cd50 <memset>

  htim8.Instance = TIM8;
 8001524:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <MX_TIM8_Init+0x17c>)
 8001526:	4a4f      	ldr	r2, [pc, #316]	; (8001664 <MX_TIM8_Init+0x180>)
 8001528:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 14399;
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <MX_TIM8_Init+0x17c>)
 800152c:	f643 023f 	movw	r2, #14399	; 0x383f
 8001530:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <MX_TIM8_Init+0x17c>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8001538:	4b49      	ldr	r3, [pc, #292]	; (8001660 <MX_TIM8_Init+0x17c>)
 800153a:	f241 3287 	movw	r2, #4999	; 0x1387
 800153e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b47      	ldr	r3, [pc, #284]	; (8001660 <MX_TIM8_Init+0x17c>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001546:	4b46      	ldr	r3, [pc, #280]	; (8001660 <MX_TIM8_Init+0x17c>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b44      	ldr	r3, [pc, #272]	; (8001660 <MX_TIM8_Init+0x17c>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001552:	4843      	ldr	r0, [pc, #268]	; (8001660 <MX_TIM8_Init+0x17c>)
 8001554:	f004 fc00 	bl	8005d58 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800155e:	f7ff fd55 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800156c:	4619      	mov	r1, r3
 800156e:	483c      	ldr	r0, [pc, #240]	; (8001660 <MX_TIM8_Init+0x17c>)
 8001570:	f005 f8a6 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800157a:	f7ff fd47 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800157e:	4838      	ldr	r0, [pc, #224]	; (8001660 <MX_TIM8_Init+0x17c>)
 8001580:	f004 fcac 	bl	8005edc <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800158a:	f7ff fd3f 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800159a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800159e:	4619      	mov	r1, r3
 80015a0:	482f      	ldr	r0, [pc, #188]	; (8001660 <MX_TIM8_Init+0x17c>)
 80015a2:	f005 fe83 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80015ac:	f7ff fd2e 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b0:	2360      	movs	r3, #96	; 0x60
 80015b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 999;
 80015b4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ba:	2300      	movs	r3, #0
 80015bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015be:	2300      	movs	r3, #0
 80015c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015d2:	2204      	movs	r2, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4822      	ldr	r0, [pc, #136]	; (8001660 <MX_TIM8_Init+0x17c>)
 80015d8:	f004 ff62 	bl	80064a0 <HAL_TIM_PWM_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 80015e2:	f7ff fd13 	bl	800100c <Error_Handler>
  }
  sConfigOC.Pulse = 1999;
 80015e6:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80015ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015f0:	2208      	movs	r2, #8
 80015f2:	4619      	mov	r1, r3
 80015f4:	481a      	ldr	r0, [pc, #104]	; (8001660 <MX_TIM8_Init+0x17c>)
 80015f6:	f004 ff53 	bl	80064a0 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8001600:	f7ff fd04 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800162a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_TIM8_Init+0x17c>)
 8001642:	f005 feb5 	bl	80073b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM8_Init+0x16c>
  {
    Error_Handler();
 800164c:	f7ff fcde 	bl	800100c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <MX_TIM8_Init+0x17c>)
 8001652:	f000 f857 	bl	8001704 <HAL_TIM_MspPostInit>

}
 8001656:	bf00      	nop
 8001658:	3770      	adds	r7, #112	; 0x70
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000558 	.word	0x20000558
 8001664:	40013400 	.word	0x40013400

08001668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <HAL_TIM_Base_MspInit+0x8c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d114      	bne.n	80016a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	4a1e      	ldr	r2, [pc, #120]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 8001680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001684:	6613      	str	r3, [r2, #96]	; 0x60
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2105      	movs	r1, #5
 8001696:	2019      	movs	r0, #25
 8001698:	f000 fb61 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800169c:	2019      	movs	r0, #25
 800169e:	f000 fb78 	bl	8001d92 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80016a2:	e022      	b.n	80016ea <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <HAL_TIM_Base_MspInit+0x94>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10c      	bne.n	80016c8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
}
 80016c6:	e010      	b.n	80016ea <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM8)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0c      	ldr	r2, [pc, #48]	; (8001700 <HAL_TIM_Base_MspInit+0x98>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10b      	bne.n	80016ea <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016dc:	6613      	str	r3, [r2, #96]	; 0x60
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_TIM_Base_MspInit+0x90>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40012c00 	.word	0x40012c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40000800 	.word	0x40000800
 8001700:	40013400 	.word	0x40013400

08001704 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a2a      	ldr	r2, [pc, #168]	; (80017cc <HAL_TIM_MspPostInit+0xc8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d11c      	bne.n	8001760 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <HAL_TIM_MspPostInit+0xcc>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <HAL_TIM_MspPostInit+0xcc>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <HAL_TIM_MspPostInit+0xcc>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = T4_1_LED2_Pin;
 800173e:	2340      	movs	r3, #64	; 0x40
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800174e:	2302      	movs	r3, #2
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(T4_1_LED2_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	481e      	ldr	r0, [pc, #120]	; (80017d4 <HAL_TIM_MspPostInit+0xd0>)
 800175a:	f000 fe0f 	bl	800237c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800175e:	e030      	b.n	80017c2 <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM8)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <HAL_TIM_MspPostInit+0xd4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d12b      	bne.n	80017c2 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_TIM_MspPostInit+0xcc>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <HAL_TIM_MspPostInit+0xcc>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_TIM_MspPostInit+0xcc>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T8_2N_LED0_Pin;
 8001782:	2310      	movs	r3, #16
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001792:	2304      	movs	r3, #4
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(T8_2N_LED0_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <HAL_TIM_MspPostInit+0xd0>)
 800179e:	f000 fded 	bl	800237c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = T8_3N_LED1_Pin;
 80017a2:	2320      	movs	r3, #32
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017b2:	2303      	movs	r3, #3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(T8_3N_LED1_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <HAL_TIM_MspPostInit+0xd0>)
 80017be:	f000 fddd 	bl	800237c <HAL_GPIO_Init>
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40000800 	.word	0x40000800
 80017d0:	40021000 	.word	0x40021000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	40013400 	.word	0x40013400

080017dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <MX_USART1_UART_Init+0x90>)
 80017e2:	4a23      	ldr	r2, [pc, #140]	; (8001870 <MX_USART1_UART_Init+0x94>)
 80017e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_USART1_UART_Init+0x90>)
 80017e8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80017ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_USART1_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <MX_USART1_UART_Init+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_USART1_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_USART1_UART_Init+0x90>)
 8001802:	220c      	movs	r2, #12
 8001804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <MX_USART1_UART_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_USART1_UART_Init+0x90>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <MX_USART1_UART_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_USART1_UART_Init+0x90>)
 800181a:	2200      	movs	r2, #0
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <MX_USART1_UART_Init+0x90>)
 8001820:	2200      	movs	r2, #0
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <MX_USART1_UART_Init+0x90>)
 8001826:	f005 fece 	bl	80075c6 <HAL_UART_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001830:	f7ff fbec 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001834:	2100      	movs	r1, #0
 8001836:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_USART1_UART_Init+0x90>)
 8001838:	f006 fb61 	bl	8007efe <HAL_UARTEx_SetTxFifoThreshold>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001842:	f7ff fbe3 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001846:	2100      	movs	r1, #0
 8001848:	4808      	ldr	r0, [pc, #32]	; (800186c <MX_USART1_UART_Init+0x90>)
 800184a:	f006 fb96 	bl	8007f7a <HAL_UARTEx_SetRxFifoThreshold>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001854:	f7ff fbda 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	; (800186c <MX_USART1_UART_Init+0x90>)
 800185a:	f006 fb17 	bl	8007e8c <HAL_UARTEx_DisableFifoMode>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001864:	f7ff fbd2 	bl	800100c <Error_Handler>
  }

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000063c 	.word	0x2000063c
 8001870:	40013800 	.word	0x40013800

08001874 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <MX_USART2_UART_Init+0x90>)
 800187a:	4a23      	ldr	r2, [pc, #140]	; (8001908 <MX_USART2_UART_Init+0x94>)
 800187c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <MX_USART2_UART_Init+0x90>)
 8001880:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <MX_USART2_UART_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <MX_USART2_UART_Init+0x90>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <MX_USART2_UART_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_USART2_UART_Init+0x90>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <MX_USART2_UART_Init+0x90>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_USART2_UART_Init+0x90>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_USART2_UART_Init+0x90>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_USART2_UART_Init+0x90>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_USART2_UART_Init+0x90>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <MX_USART2_UART_Init+0x90>)
 80018be:	f005 fe82 	bl	80075c6 <HAL_UART_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018c8:	f7ff fba0 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018cc:	2100      	movs	r1, #0
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <MX_USART2_UART_Init+0x90>)
 80018d0:	f006 fb15 	bl	8007efe <HAL_UARTEx_SetTxFifoThreshold>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018da:	f7ff fb97 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018de:	2100      	movs	r1, #0
 80018e0:	4808      	ldr	r0, [pc, #32]	; (8001904 <MX_USART2_UART_Init+0x90>)
 80018e2:	f006 fb4a 	bl	8007f7a <HAL_UARTEx_SetRxFifoThreshold>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018ec:	f7ff fb8e 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_USART2_UART_Init+0x90>)
 80018f2:	f006 facb 	bl	8007e8c <HAL_UARTEx_DisableFifoMode>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018fc:	f7ff fb86 	bl	800100c <Error_Handler>
  }

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200006c8 	.word	0x200006c8
 8001908:	40004400 	.word	0x40004400

0800190c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	; 0x30
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a3d      	ldr	r2, [pc, #244]	; (8001a20 <HAL_UART_MspInit+0x114>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d12a      	bne.n	8001984 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <HAL_UART_MspInit+0x118>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	4a3c      	ldr	r2, [pc, #240]	; (8001a24 <HAL_UART_MspInit+0x118>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	6613      	str	r3, [r2, #96]	; 0x60
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_UART_MspInit+0x118>)
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_UART_MspInit+0x118>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <HAL_UART_MspInit+0x118>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_UART_MspInit+0x118>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800195e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001970:	2307      	movs	r3, #7
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f000 fcfd 	bl	800237c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001982:	e049      	b.n	8001a18 <HAL_UART_MspInit+0x10c>
  else if(uartHandle->Instance==USART2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <HAL_UART_MspInit+0x11c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d144      	bne.n	8001a18 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_UART_MspInit+0x118>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <HAL_UART_MspInit+0x118>)
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_UART_MspInit+0x118>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <HAL_UART_MspInit+0x118>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_UART_MspInit+0x118>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_UART_MspInit+0x118>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_UART_MspInit+0x118>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <HAL_UART_MspInit+0x118>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_UART_MspInit+0x118>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019d6:	2308      	movs	r3, #8
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e6:	2307      	movs	r3, #7
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f4:	f000 fcc2 	bl	800237c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019f8:	2308      	movs	r3, #8
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <HAL_UART_MspInit+0x120>)
 8001a14:	f000 fcb2 	bl	800237c <HAL_GPIO_Init>
}
 8001a18:	bf00      	nop
 8001a1a:	3730      	adds	r7, #48	; 0x30
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40013800 	.word	0x40013800
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40004400 	.word	0x40004400
 8001a2c:	48000400 	.word	0x48000400

08001a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a30:	480d      	ldr	r0, [pc, #52]	; (8001a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a34:	480d      	ldr	r0, [pc, #52]	; (8001a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a36:	490e      	ldr	r1, [pc, #56]	; (8001a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <LoopForever+0xe>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a4c:	4c0b      	ldr	r4, [pc, #44]	; (8001a7c <LoopForever+0x16>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a5a:	f7ff fc49 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f00b f953 	bl	800cd08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a62:	f7ff fa4d 	bl	8000f00 <main>

08001a66 <LoopForever>:

LoopForever:
    b LoopForever
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
  ldr   r0, =_estack
 8001a68:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001a74:	0800cf74 	.word	0x0800cf74
  ldr r2, =_sbss
 8001a78:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001a7c:	20001964 	.word	0x20001964

08001a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>

08001a82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f95b 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f80e 	bl	8001ab4 <HAL_InitTick>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	71fb      	strb	r3, [r7, #7]
 8001aa2:	e001      	b.n	8001aa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aa4:	f7ff fba0 	bl	80011e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aa8:	79fb      	ldrb	r3, [r7, #7]

}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_InitTick+0x68>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d022      	beq.n	8001b0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_InitTick+0x6c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_InitTick+0x68>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f966 	bl	8001dae <HAL_SYSTICK_Config>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10f      	bne.n	8001b08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b0f      	cmp	r3, #15
 8001aec:	d809      	bhi.n	8001b02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aee:	2200      	movs	r2, #0
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	f04f 30ff 	mov.w	r0, #4294967295
 8001af6:	f000 f932 	bl	8001d5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_InitTick+0x70>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e007      	b.n	8001b12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	e004      	b.n	8001b12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e001      	b.n	8001b12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_IncTick+0x1c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_IncTick+0x20>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_IncTick+0x1c>)
 8001b38:	6013      	str	r3, [r2, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000754 	.word	0x20000754
 8001b48:	20000008 	.word	0x20000008

08001b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_GetTick+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000754 	.word	0x20000754

08001b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff ffee 	bl	8001b4c <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d004      	beq.n	8001b88 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_Delay+0x40>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4413      	add	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b88:	bf00      	nop
 8001b8a:	f7ff ffdf 	bl	8001b4c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d8f7      	bhi.n	8001b8a <HAL_Delay+0x26>
  {
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db0b      	blt.n	8001c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <__NVIC_EnableIRQ+0x38>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff8e 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff29 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff40 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff33 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa4 	bl	8001d04 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e08d      	b.n	8001ef6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_DMA_Init+0x138>)
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d80f      	bhi.n	8001e06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b45      	ldr	r3, [pc, #276]	; (8001f04 <HAL_DMA_Init+0x13c>)
 8001dee:	4413      	add	r3, r2
 8001df0:	4a45      	ldr	r2, [pc, #276]	; (8001f08 <HAL_DMA_Init+0x140>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	009a      	lsls	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a42      	ldr	r2, [pc, #264]	; (8001f0c <HAL_DMA_Init+0x144>)
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40
 8001e04:	e00e      	b.n	8001e24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_DMA_Init+0x148>)
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a3d      	ldr	r2, [pc, #244]	; (8001f08 <HAL_DMA_Init+0x140>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	009a      	lsls	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a3c      	ldr	r2, [pc, #240]	; (8001f14 <HAL_DMA_Init+0x14c>)
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fa1e 	bl	80022b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e84:	d102      	bne.n	8001e8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ea0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d010      	beq.n	8001ecc <HAL_DMA_Init+0x104>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d80c      	bhi.n	8001ecc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fa3e 	bl	8002334 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	e008      	b.n	8001ede <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40020407 	.word	0x40020407
 8001f04:	bffdfff8 	.word	0xbffdfff8
 8001f08:	cccccccd 	.word	0xcccccccd
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	bffdfbf8 	.word	0xbffdfbf8
 8001f14:	40020400 	.word	0x40020400

08001f18 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_DMA_Start_IT+0x20>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e066      	b.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d155      	bne.n	8001ff8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f962 	bl	800223a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 020e 	orr.w	r2, r2, #14
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e00f      	b.n	8001fb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0204 	bic.w	r2, r2, #4
 8001f9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 020a 	orr.w	r2, r2, #10
 8001fae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fcc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e005      	b.n	8002004 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002000:	2302      	movs	r3, #2
 8002002:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002004:	7dfb      	ldrb	r3, [r7, #23]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d00d      	beq.n	8002042 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2204      	movs	r2, #4
 800202a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e047      	b.n	80020d2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 020e 	bic.w	r2, r2, #14
 8002050:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002070:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f003 021f 	and.w	r2, r3, #31
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2101      	movs	r1, #1
 8002080:	fa01 f202 	lsl.w	r2, r1, r2
 8002084:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800208e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00c      	beq.n	80020b2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
    }
  }
  return status;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	2204      	movs	r2, #4
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d026      	beq.n	8002156 <HAL_DMA_IRQHandler+0x7a>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	d021      	beq.n	8002156 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d107      	bne.n	8002130 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0204 	bic.w	r2, r2, #4
 800212e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	2104      	movs	r1, #4
 800213e:	fa01 f202 	lsl.w	r2, r1, r2
 8002142:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	2b00      	cmp	r3, #0
 800214a:	d071      	beq.n	8002230 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002154:	e06c      	b.n	8002230 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2202      	movs	r2, #2
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d02e      	beq.n	80021c8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d029      	beq.n	80021c8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10b      	bne.n	800219a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 020a 	bic.w	r2, r2, #10
 8002190:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 021f 	and.w	r2, r3, #31
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2102      	movs	r1, #2
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d038      	beq.n	8002230 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80021c6:	e033      	b.n	8002230 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2208      	movs	r2, #8
 80021d2:	409a      	lsls	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02a      	beq.n	8002232 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d025      	beq.n	8002232 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 020e 	bic.w	r2, r2, #14
 80021f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f003 021f 	and.w	r2, r3, #31
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002230:	bf00      	nop
 8002232:	bf00      	nop
}
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002250:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002262:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	2101      	movs	r1, #1
 8002272:	fa01 f202 	lsl.w	r2, r1, r2
 8002276:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b10      	cmp	r3, #16
 8002286:	d108      	bne.n	800229a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002298:	e007      	b.n	80022aa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	60da      	str	r2, [r3, #12]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d802      	bhi.n	80022d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e001      	b.n	80022d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80022d4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3b08      	subs	r3, #8
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	009a      	lsls	r2, r3, #2
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002302:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2201      	movs	r2, #1
 800230c:	409a      	lsls	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40020407 	.word	0x40020407
 8002324:	40020800 	.word	0x40020800
 8002328:	40020820 	.word	0x40020820
 800232c:	cccccccd 	.word	0xcccccccd
 8002330:	40020880 	.word	0x40020880

08002334 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	461a      	mov	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a08      	ldr	r2, [pc, #32]	; (8002378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002356:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3b01      	subs	r3, #1
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2201      	movs	r2, #1
 8002362:	409a      	lsls	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	1000823f 	.word	0x1000823f
 8002378:	40020940 	.word	0x40020940

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800238a:	e15a      	b.n	8002642 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 814c 	beq.w	800263c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d00b      	beq.n	80023c4 <HAL_GPIO_Init+0x48>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b8:	2b11      	cmp	r3, #17
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b12      	cmp	r3, #18
 80023c2:	d130      	bne.n	8002426 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023fa:	2201      	movs	r2, #1
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	f003 0201 	and.w	r2, r3, #1
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0xea>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b12      	cmp	r3, #18
 8002464:	d123      	bne.n	80024ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	220f      	movs	r2, #15
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0203 	and.w	r2, r3, #3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80a6 	beq.w	800263c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f0:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <HAL_GPIO_Init+0x2e4>)
 80024f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f4:	4a5a      	ldr	r2, [pc, #360]	; (8002660 <HAL_GPIO_Init+0x2e4>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6613      	str	r3, [r2, #96]	; 0x60
 80024fc:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_GPIO_Init+0x2e4>)
 80024fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002508:	4a56      	ldr	r2, [pc, #344]	; (8002664 <HAL_GPIO_Init+0x2e8>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002532:	d01f      	beq.n	8002574 <HAL_GPIO_Init+0x1f8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a4c      	ldr	r2, [pc, #304]	; (8002668 <HAL_GPIO_Init+0x2ec>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d019      	beq.n	8002570 <HAL_GPIO_Init+0x1f4>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a4b      	ldr	r2, [pc, #300]	; (800266c <HAL_GPIO_Init+0x2f0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_GPIO_Init+0x1f0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <HAL_GPIO_Init+0x2f4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00d      	beq.n	8002568 <HAL_GPIO_Init+0x1ec>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a49      	ldr	r2, [pc, #292]	; (8002674 <HAL_GPIO_Init+0x2f8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <HAL_GPIO_Init+0x1e8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a48      	ldr	r2, [pc, #288]	; (8002678 <HAL_GPIO_Init+0x2fc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_GPIO_Init+0x1e4>
 800255c:	2305      	movs	r3, #5
 800255e:	e00a      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002560:	2306      	movs	r3, #6
 8002562:	e008      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002564:	2304      	movs	r3, #4
 8002566:	e006      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002568:	2303      	movs	r3, #3
 800256a:	e004      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 800256c:	2302      	movs	r3, #2
 800256e:	e002      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002574:	2300      	movs	r3, #0
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	f002 0203 	and.w	r2, r2, #3
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	4093      	lsls	r3, r2
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002586:	4937      	ldr	r1, [pc, #220]	; (8002664 <HAL_GPIO_Init+0x2e8>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002594:	4b39      	ldr	r3, [pc, #228]	; (800267c <HAL_GPIO_Init+0x300>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025b8:	4a30      	ldr	r2, [pc, #192]	; (800267c <HAL_GPIO_Init+0x300>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80025be:	4b2f      	ldr	r3, [pc, #188]	; (800267c <HAL_GPIO_Init+0x300>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025e2:	4a26      	ldr	r2, [pc, #152]	; (800267c <HAL_GPIO_Init+0x300>)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025e8:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_GPIO_Init+0x300>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800260c:	4a1b      	ldr	r2, [pc, #108]	; (800267c <HAL_GPIO_Init+0x300>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_GPIO_Init+0x300>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002636:	4a11      	ldr	r2, [pc, #68]	; (800267c <HAL_GPIO_Init+0x300>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f ae9d 	bne.w	800238c <HAL_GPIO_Init+0x10>
  }
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000
 8002668:	48000400 	.word	0x48000400
 800266c:	48000800 	.word	0x48000800
 8002670:	48000c00 	.word	0x48000c00
 8002674:	48001000 	.word	0x48001000
 8002678:	48001400 	.word	0x48001400
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	b08b      	sub	sp, #44	; 0x2c
 80026b4:	af06      	add	r7, sp, #24
 80026b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0d7      	b.n	8002872 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f009 fb4e 	bl	800bd78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2203      	movs	r2, #3
 80026e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f005 fd04 	bl	80080f6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	e04c      	b.n	800278e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	3301      	adds	r3, #1
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	b298      	uxth	r0, r3
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	3336      	adds	r3, #54	; 0x36
 8002732:	4602      	mov	r2, r0
 8002734:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	3303      	adds	r3, #3
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	3338      	adds	r3, #56	; 0x38
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	333c      	adds	r3, #60	; 0x3c
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	3340      	adds	r3, #64	; 0x40
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	3301      	adds	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	d3ad      	bcc.n	80026f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e044      	b.n	8002828 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	440b      	add	r3, r1
 80027ac:	f203 1369 	addw	r3, r3, #361	; 0x169
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	3301      	adds	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	d3b5      	bcc.n	800279e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	687e      	ldr	r6, [r7, #4]
 800283a:	466d      	mov	r5, sp
 800283c:	f106 0410 	add.w	r4, r6, #16
 8002840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	602b      	str	r3, [r5, #0]
 8002848:	1d33      	adds	r3, r6, #4
 800284a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800284c:	6838      	ldr	r0, [r7, #0]
 800284e:	f005 fc6d 	bl	800812c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d102      	bne.n	8002870 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f001 fa5e 	bl	8003d2c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800287a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_PCD_Start+0x16>
 800288c:	2302      	movs	r3, #2
 800288e:	e012      	b.n	80028b6 <HAL_PCD_Start+0x3c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f005 fc13 	bl	80080c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f007 fbff 	bl	800a0aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f007 fc04 	bl	800a0d8 <USB_ReadInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028da:	d102      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fb5b 	bl	8002f98 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f007 fbf6 	bl	800a0d8 <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d112      	bne.n	800291e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002900:	b29a      	uxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290a:	b292      	uxth	r2, r2
 800290c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f009 faac 	bl	800be6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002916:	2100      	movs	r1, #0
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f91e 	bl	8002b5a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f007 fbd8 	bl	800a0d8 <USB_ReadInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002932:	d10b      	bne.n	800294c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002946:	b292      	uxth	r2, r2
 8002948:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f007 fbc1 	bl	800a0d8 <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002960:	d10b      	bne.n	800297a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800296a:	b29a      	uxth	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002974:	b292      	uxth	r2, r2
 8002976:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f007 fbaa 	bl	800a0d8 <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298e:	d133      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0204 	bic.w	r2, r2, #4
 80029a2:	b292      	uxth	r2, r2
 80029a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0208 	bic.w	r2, r2, #8
 80029ba:	b292      	uxth	r2, r2
 80029bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029d2:	2100      	movs	r1, #0
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f009 fc3f 	bl	800c258 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f009 fa80 	bl	800bee0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029f2:	b292      	uxth	r2, r2
 80029f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f007 fb6b 	bl	800a0d8 <USB_ReadInterrupts>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0c:	d126      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0208 	orr.w	r2, r2, #8
 8002a20:	b292      	uxth	r2, r2
 8002a22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a38:	b292      	uxth	r2, r2
 8002a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0204 	orr.w	r2, r2, #4
 8002a50:	b292      	uxth	r2, r2
 8002a52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f009 fa28 	bl	800beac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f007 fb39 	bl	800a0d8 <USB_ReadInterrupts>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d13f      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a82:	b292      	uxth	r2, r2
 8002a84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d12b      	bne.n	8002aea <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0204 	orr.w	r2, r2, #4
 8002aa4:	b292      	uxth	r2, r2
 8002aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0208 	orr.w	r2, r2, #8
 8002abc:	b292      	uxth	r2, r2
 8002abe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f009 fbb8 	bl	800c258 <HAL_PCDEx_LPM_Callback>
 8002ae8:	e002      	b.n	8002af0 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f009 f9de 	bl	800beac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f007 faef 	bl	800a0d8 <USB_ReadInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b04:	d10e      	bne.n	8002b24 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b18:	b292      	uxth	r2, r2
 8002b1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f009 f997 	bl	800be52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f007 fad5 	bl	800a0d8 <USB_ReadInterrupts>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b38:	d10b      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b4c:	b292      	uxth	r2, r2
 8002b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_SetAddress+0x1a>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e013      	b.n	8002b9c <HAL_PCD_SetAddress+0x42>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f007 fa78 	bl	800a082 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	4608      	mov	r0, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	70fb      	strb	r3, [r7, #3]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	803b      	strh	r3, [r7, #0]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	da0e      	bge.n	8002be8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	705a      	strb	r2, [r3, #1]
 8002be6:	e00e      	b.n	8002c06 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 0207 	and.w	r2, r3, #7
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c12:	883a      	ldrh	r2, [r7, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	78ba      	ldrb	r2, [r7, #2]
 8002c1c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d004      	beq.n	8002c30 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c30:	78bb      	ldrb	r3, [r7, #2]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d102      	bne.n	8002c3c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_PCD_EP_Open+0xa6>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e00e      	b.n	8002c68 <HAL_PCD_EP_Open+0xc4>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f005 fa89 	bl	8008170 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002c66:	7afb      	ldrb	r3, [r7, #11]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	da0e      	bge.n	8002ca2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	705a      	strb	r2, [r3, #1]
 8002ca0:	e00e      	b.n	8002cc0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 0207 	and.w	r2, r3, #7
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_PCD_EP_Close+0x6a>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e00e      	b.n	8002cf8 <HAL_PCD_EP_Close+0x88>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f005 fdaf 	bl	800884c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d10:	7afb      	ldrb	r3, [r7, #11]
 8002d12:	f003 0207 	and.w	r2, r3, #7
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4413      	add	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d4c:	7afb      	ldrb	r3, [r7, #11]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6979      	ldr	r1, [r7, #20]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f005 ff62 	bl	8008c26 <USB_EPStartXfer>
 8002d62:	e005      	b.n	8002d70 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6979      	ldr	r1, [r7, #20]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f005 ff5b 	bl	8008c26 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	f003 0207 	and.w	r2, r3, #7
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002d9c:	681b      	ldr	r3, [r3, #0]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	460b      	mov	r3, r1
 8002db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2201      	movs	r2, #1
 8002df4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e02:	7afb      	ldrb	r3, [r7, #11]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6979      	ldr	r1, [r7, #20]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f005 ff07 	bl	8008c26 <USB_EPStartXfer>
 8002e18:	e005      	b.n	8002e26 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f005 ff00 	bl	8008c26 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 0207 	and.w	r2, r3, #7
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d901      	bls.n	8002e4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e04c      	b.n	8002ee8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da0e      	bge.n	8002e74 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	705a      	strb	r2, [r3, #1]
 8002e72:	e00c      	b.n	8002e8e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_PCD_EP_SetStall+0x7e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e01c      	b.n	8002ee8 <HAL_PCD_EP_SetStall+0xb8>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68f9      	ldr	r1, [r7, #12]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f006 ffe1 	bl	8009e84 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d108      	bne.n	8002ede <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f007 f90d 	bl	800a0f8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	f003 020f 	and.w	r2, r3, #15
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d901      	bls.n	8002f0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e040      	b.n	8002f90 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0e      	bge.n	8002f34 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
 8002f32:	e00e      	b.n	8002f52 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 0207 	and.w	r2, r3, #7
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_PCD_EP_ClrStall+0x82>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e00e      	b.n	8002f90 <HAL_PCD_EP_ClrStall+0xa0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68f9      	ldr	r1, [r7, #12]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f006 ffd0 	bl	8009f26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08e      	sub	sp, #56	; 0x38
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002fa0:	e2d1      	b.n	8003546 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002faa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002fac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002fb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f040 8152 	bne.w	8003266 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002fc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d150      	bne.n	800306e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fdc:	81fb      	strh	r3, [r7, #14]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	89fb      	ldrh	r3, [r7, #14]
 8002fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3328      	adds	r3, #40	; 0x28
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	4413      	add	r3, r2
 8003010:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	441a      	add	r2, r3
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800302c:	2100      	movs	r1, #0
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f008 fef5 	bl	800be1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8282 	beq.w	8003546 <PCD_EP_ISR_Handler+0x5ae>
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f040 827d 	bne.w	8003546 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003058:	b2da      	uxtb	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b292      	uxth	r2, r2
 8003060:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800306c:	e26b      	b.n	8003546 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800307e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003084:	2b00      	cmp	r3, #0
 8003086:	d032      	beq.n	80030ee <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003090:	b29b      	uxth	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f007 f865 	bl	800a192 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030d4:	4013      	ands	r3, r2
 80030d6:	823b      	strh	r3, [r7, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	8a3a      	ldrh	r2, [r7, #16]
 80030de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030e2:	b292      	uxth	r2, r2
 80030e4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f008 fe6c 	bl	800bdc4 <HAL_PCD_SetupStageCallback>
 80030ec:	e22b      	b.n	8003546 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f280 8227 	bge.w	8003546 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003104:	4013      	ands	r3, r2
 8003106:	83bb      	strh	r3, [r7, #28]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	8bba      	ldrh	r2, [r7, #28]
 800310e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003112:	b292      	uxth	r2, r2
 8003114:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	4413      	add	r3, r2
 8003130:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d019      	beq.n	800317a <PCD_EP_ISR_Handler+0x1e2>
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d015      	beq.n	800317a <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	6959      	ldr	r1, [r3, #20]
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800315e:	b29b      	uxth	r3, r3
 8003160:	f007 f817 	bl	800a192 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	441a      	add	r2, r3
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003172:	2100      	movs	r1, #0
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f008 fe37 	bl	800bde8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003188:	b29b      	uxth	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	4413      	add	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d112      	bne.n	80031c8 <PCD_EP_ISR_Handler+0x230>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	801a      	strh	r2, [r3, #0]
 80031c6:	e02f      	b.n	8003228 <PCD_EP_ISR_Handler+0x290>
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b3e      	cmp	r3, #62	; 0x3e
 80031ce:	d813      	bhi.n	80031f8 <PCD_EP_ISR_Handler+0x260>
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <PCD_EP_ISR_Handler+0x252>
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	3301      	adds	r3, #1
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	029b      	lsls	r3, r3, #10
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	801a      	strh	r2, [r3, #0]
 80031f6:	e017      	b.n	8003228 <PCD_EP_ISR_Handler+0x290>
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <PCD_EP_ISR_Handler+0x27a>
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	3b01      	subs	r3, #1
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	b29b      	uxth	r3, r3
 8003216:	029b      	lsls	r3, r3, #10
 8003218:	b29b      	uxth	r3, r3
 800321a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003222:	b29a      	uxth	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003238:	827b      	strh	r3, [r7, #18]
 800323a:	8a7b      	ldrh	r3, [r7, #18]
 800323c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003240:	827b      	strh	r3, [r7, #18]
 8003242:	8a7b      	ldrh	r3, [r7, #18]
 8003244:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003248:	827b      	strh	r3, [r7, #18]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	8a7b      	ldrh	r3, [r7, #18]
 8003250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003260:	b29b      	uxth	r3, r3
 8003262:	8013      	strh	r3, [r2, #0]
 8003264:	e16f      	b.n	8003546 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003278:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800327c:	2b00      	cmp	r3, #0
 800327e:	f280 80e4 	bge.w	800344a <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29a      	uxth	r2, r3
 8003294:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003298:	4013      	ands	r3, r2
 800329a:	853b      	strh	r3, [r7, #40]	; 0x28
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80032ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032b0:	b292      	uxth	r2, r2
 80032b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032b4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	7b1b      	ldrb	r3, [r3, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d120      	bne.n	8003314 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032da:	b29b      	uxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	4413      	add	r3, r2
 80032ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80032f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8083 	beq.w	8003406 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	6959      	ldr	r1, [r3, #20]
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	88da      	ldrh	r2, [r3, #6]
 800330c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800330e:	f006 ff40 	bl	800a192 <USB_ReadPMA>
 8003312:	e078      	b.n	8003406 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	78db      	ldrb	r3, [r3, #3]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d108      	bne.n	800332e <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800331c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800331e:	461a      	mov	r2, r3
 8003320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f91d 	bl	8003562 <HAL_PCD_EP_DB_Receive>
 8003328:	4603      	mov	r3, r0
 800332a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800332c:	e06b      	b.n	8003406 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003348:	847b      	strh	r3, [r7, #34]	; 0x22
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	441a      	add	r2, r3
 8003358:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800335a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800335e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003366:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800336a:	b29b      	uxth	r3, r3
 800336c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01f      	beq.n	80033c8 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003390:	b29b      	uxth	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80033ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d028      	beq.n	8003406 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	6959      	ldr	r1, [r3, #20]
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	891a      	ldrh	r2, [r3, #8]
 80033c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033c2:	f006 fee6 	bl	800a192 <USB_ReadPMA>
 80033c6:	e01e      	b.n	8003406 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	4413      	add	r3, r2
 80033e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80033ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	6959      	ldr	r1, [r3, #20]
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	895a      	ldrh	r2, [r3, #10]
 8003400:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003402:	f006 fec6 	bl	800a192 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800340c:	441a      	add	r2, r3
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003418:	441a      	add	r2, r3
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <PCD_EP_ISR_Handler+0x498>
 8003426:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	429a      	cmp	r2, r3
 800342e:	d206      	bcs.n	800343e <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f008 fcd6 	bl	800bde8 <HAL_PCD_DataOutStageCallback>
 800343c:	e005      	b.n	800344a <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003444:	4618      	mov	r0, r3
 8003446:	f005 fbee 	bl	8008c26 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800344a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	2b00      	cmp	r3, #0
 8003452:	d078      	beq.n	8003546 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8003454:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	843b      	strh	r3, [r7, #32]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	8c3b      	ldrh	r3, [r7, #32]
 8003494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800349c:	b29b      	uxth	r3, r3
 800349e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	78db      	ldrb	r3, [r3, #3]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d108      	bne.n	80034ba <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d144      	bne.n	800353a <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80034b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d13f      	bne.n	800353a <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034de:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	8bfb      	ldrh	r3, [r7, #30]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d906      	bls.n	80034f8 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	8bfb      	ldrh	r3, [r7, #30]
 80034f0:	1ad2      	subs	r2, r2, r3
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	619a      	str	r2, [r3, #24]
 80034f6:	e002      	b.n	80034fe <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	2200      	movs	r2, #0
 80034fc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f008 fc86 	bl	800be1e <HAL_PCD_DataInStageCallback>
 8003512:	e018      	b.n	8003546 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	8bfb      	ldrh	r3, [r7, #30]
 800351a:	441a      	add	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	8bfb      	ldrh	r3, [r7, #30]
 8003526:	441a      	add	r2, r3
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003532:	4618      	mov	r0, r3
 8003534:	f005 fb77 	bl	8008c26 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003538:	e005      	b.n	8003546 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800353a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800353c:	461a      	mov	r2, r3
 800353e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f917 	bl	8003774 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800354e:	b29b      	uxth	r3, r3
 8003550:	b21b      	sxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	f6ff ad25 	blt.w	8002fa2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3738      	adds	r7, #56	; 0x38
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b088      	sub	sp, #32
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	4613      	mov	r3, r2
 800356e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d07c      	beq.n	8003674 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	4413      	add	r3, r2
 8003594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800359e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	8b7b      	ldrh	r3, [r7, #26]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d306      	bcc.n	80035b8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	8b7b      	ldrh	r3, [r7, #26]
 80035b0:	1ad2      	subs	r2, r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	619a      	str	r2, [r3, #24]
 80035b6:	e002      	b.n	80035be <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2200      	movs	r2, #0
 80035bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d123      	bne.n	800360e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e0:	833b      	strh	r3, [r7, #24]
 80035e2:	8b3b      	ldrh	r3, [r7, #24]
 80035e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035e8:	833b      	strh	r3, [r7, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	441a      	add	r2, r3
 80035f8:	8b3b      	ldrh	r3, [r7, #24]
 80035fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360a:	b29b      	uxth	r3, r3
 800360c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01f      	beq.n	8003658 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	82fb      	strh	r3, [r7, #22]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800364c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003650:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003654:	b29b      	uxth	r3, r3
 8003656:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003658:	8b7b      	ldrh	r3, [r7, #26]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8085 	beq.w	800376a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	6959      	ldr	r1, [r3, #20]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	891a      	ldrh	r2, [r3, #8]
 800366c:	8b7b      	ldrh	r3, [r7, #26]
 800366e:	f006 fd90 	bl	800a192 <USB_ReadPMA>
 8003672:	e07a      	b.n	800376a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367c:	b29b      	uxth	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	4413      	add	r3, r2
 800368e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003698:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	8b7b      	ldrh	r3, [r7, #26]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d306      	bcc.n	80036b2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	8b7b      	ldrh	r3, [r7, #26]
 80036aa:	1ad2      	subs	r2, r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	619a      	str	r2, [r3, #24]
 80036b0:	e002      	b.n	80036b8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d123      	bne.n	8003708 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	83fb      	strh	r3, [r7, #30]
 80036dc:	8bfb      	ldrh	r3, [r7, #30]
 80036de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036e2:	83fb      	strh	r3, [r7, #30]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	441a      	add	r2, r3
 80036f2:	8bfb      	ldrh	r3, [r7, #30]
 80036f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003704:	b29b      	uxth	r3, r3
 8003706:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11f      	bne.n	8003752 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372c:	83bb      	strh	r3, [r7, #28]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	441a      	add	r2, r3
 800373c:	8bbb      	ldrh	r3, [r7, #28]
 800373e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800374e:	b29b      	uxth	r3, r3
 8003750:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003752:	8b7b      	ldrh	r3, [r7, #26]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6959      	ldr	r1, [r3, #20]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	895a      	ldrh	r2, [r3, #10]
 8003764:	8b7b      	ldrh	r3, [r7, #26]
 8003766:	f006 fd14 	bl	800a192 <USB_ReadPMA>
    }
  }

  return count;
 800376a:	8b7b      	ldrh	r3, [r7, #26]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b092      	sub	sp, #72	; 0x48
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	4613      	mov	r3, r2
 8003780:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8130 	beq.w	80039ee <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	4413      	add	r3, r2
 80037a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	699a      	ldr	r2, [r3, #24]
 80037b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d906      	bls.n	80037cc <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037c4:	1ad2      	subs	r2, r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	619a      	str	r2, [r3, #24]
 80037ca:	e002      	b.n	80037d2 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2200      	movs	r2, #0
 80037d0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d12c      	bne.n	8003834 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	4619      	mov	r1, r3
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f008 fb1c 	bl	800be1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 822d 	beq.w	8003c4c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380c:	827b      	strh	r3, [r7, #18]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	441a      	add	r2, r3
 800381c:	8a7b      	ldrh	r3, [r7, #18]
 800381e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800382a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382e:	b29b      	uxth	r3, r3
 8003830:	8013      	strh	r3, [r2, #0]
 8003832:	e20b      	b.n	8003c4c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01f      	beq.n	800387e <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003858:	84bb      	strh	r3, [r7, #36]	; 0x24
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	441a      	add	r2, r3
 8003868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800386a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800386e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387a:	b29b      	uxth	r3, r3
 800387c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003884:	2b01      	cmp	r3, #1
 8003886:	f040 81e1 	bne.w	8003c4c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003890:	441a      	add	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800389c:	441a      	add	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6a1a      	ldr	r2, [r3, #32]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d309      	bcc.n	80038c2 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	6a1a      	ldr	r2, [r3, #32]
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	1ad2      	subs	r2, r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	621a      	str	r2, [r3, #32]
 80038c0:	e014      	b.n	80038ec <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80038ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038cc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80038d6:	e009      	b.n	80038ec <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2200      	movs	r2, #0
 80038ea:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	785b      	ldrb	r3, [r3, #1]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d155      	bne.n	80039a0 <HAL_PCD_EP_DB_Transmit+0x22c>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003902:	b29b      	uxth	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	4413      	add	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	00da      	lsls	r2, r3, #3
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	4413      	add	r3, r2
 8003916:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391e:	2b00      	cmp	r3, #0
 8003920:	d112      	bne.n	8003948 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800392c:	b29a      	uxth	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	801a      	strh	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800393c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003940:	b29a      	uxth	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	e047      	b.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x264>
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	2b3e      	cmp	r3, #62	; 0x3e
 800394c:	d811      	bhi.n	8003972 <HAL_PCD_EP_DB_Transmit+0x1fe>
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_PCD_EP_DB_Transmit+0x1f0>
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	3301      	adds	r3, #1
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	b29b      	uxth	r3, r3
 8003968:	029b      	lsls	r3, r3, #10
 800396a:	b29a      	uxth	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	801a      	strh	r2, [r3, #0]
 8003970:	e032      	b.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x264>
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
 8003978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <HAL_PCD_EP_DB_Transmit+0x214>
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	3b01      	subs	r3, #1
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	b29b      	uxth	r3, r3
 800398c:	029b      	lsls	r3, r3, #10
 800398e:	b29b      	uxth	r3, r3
 8003990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003998:	b29a      	uxth	r2, r3
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	e01b      	b.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x264>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	785b      	ldrb	r3, [r3, #1]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d117      	bne.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x264>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	4413      	add	r3, r2
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	00da      	lsls	r2, r3, #3
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	4413      	add	r3, r2
 80039ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	6959      	ldr	r1, [r3, #20]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	891a      	ldrh	r2, [r3, #8]
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f006 fb92 	bl	800a110 <USB_WritePMA>
 80039ec:	e12e      	b.n	8003c4c <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	4413      	add	r3, r2
 8003a08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a12:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	699a      	ldr	r2, [r3, #24]
 8003a18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d306      	bcc.n	8003a2c <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a24:	1ad2      	subs	r2, r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	619a      	str	r2, [r3, #24]
 8003a2a:	e002      	b.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d12c      	bne.n	8003a94 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f008 f9ec 	bl	800be1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 80fd 	bne.w	8003c4c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	441a      	add	r2, r3
 8003a7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	8013      	strh	r3, [r2, #0]
 8003a92:	e0db      	b.n	8003c4c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11f      	bne.n	8003ade <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	f040 80b1 	bne.w	8003c4c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003af0:	441a      	add	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003afc:	441a      	add	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6a1a      	ldr	r2, [r3, #32]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d309      	bcc.n	8003b22 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	1ad2      	subs	r2, r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	621a      	str	r2, [r3, #32]
 8003b20:	e014      	b.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003b2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b36:	e009      	b.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2200      	movs	r2, #0
 8003b42:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	637b      	str	r3, [r7, #52]	; 0x34
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d155      	bne.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x492>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6e:	4413      	add	r3, r2
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	00da      	lsls	r2, r3, #3
 8003b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b80:	643b      	str	r3, [r7, #64]	; 0x40
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d112      	bne.n	8003bae <HAL_PCD_EP_DB_Transmit+0x43a>
 8003b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b96:	801a      	strh	r2, [r3, #0]
 8003b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003baa:	801a      	strh	r2, [r3, #0]
 8003bac:	e044      	b.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8003bb2:	d811      	bhi.n	8003bd8 <HAL_PCD_EP_DB_Transmit+0x464>
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_PCD_EP_DB_Transmit+0x456>
 8003bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	029b      	lsls	r3, r3, #10
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd4:	801a      	strh	r2, [r3, #0]
 8003bd6:	e02f      	b.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <HAL_PCD_EP_DB_Transmit+0x47a>
 8003be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bea:	3b01      	subs	r3, #1
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	029b      	lsls	r3, r3, #10
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	e018      	b.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	785b      	ldrb	r3, [r3, #1]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d114      	bne.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1c:	4413      	add	r3, r2
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	00da      	lsls	r2, r3, #3
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	4413      	add	r3, r2
 8003c2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6959      	ldr	r1, [r3, #20]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	895a      	ldrh	r2, [r3, #10]
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f006 fa62 	bl	800a110 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c66:	823b      	strh	r3, [r7, #16]
 8003c68:	8a3b      	ldrh	r3, [r7, #16]
 8003c6a:	f083 0310 	eor.w	r3, r3, #16
 8003c6e:	823b      	strh	r3, [r7, #16]
 8003c70:	8a3b      	ldrh	r3, [r7, #16]
 8003c72:	f083 0320 	eor.w	r3, r3, #32
 8003c76:	823b      	strh	r3, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	8a3b      	ldrh	r3, [r7, #16]
 8003c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3748      	adds	r7, #72	; 0x48
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b087      	sub	sp, #28
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	817b      	strh	r3, [r7, #10]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cb8:	897b      	ldrh	r3, [r7, #10]
 8003cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc4:	897b      	ldrh	r3, [r7, #10]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e009      	b.n	8003cf0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cdc:	897a      	ldrh	r2, [r7, #10]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003cf0:	893b      	ldrh	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	80da      	strh	r2, [r3, #6]
 8003d04:	e00b      	b.n	8003d1e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	0c1b      	lsrs	r3, r3, #16
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f043 0302 	orr.w	r3, r3, #2
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d141      	bne.n	8003e12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d8e:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d131      	bne.n	8003e00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d9c:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da2:	4a46      	ldr	r2, [pc, #280]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dac:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db4:	4a41      	ldr	r2, [pc, #260]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dbc:	4b40      	ldr	r3, [pc, #256]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2232      	movs	r2, #50	; 0x32
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	4a3f      	ldr	r2, [pc, #252]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	0c9b      	lsrs	r3, r3, #18
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd2:	e002      	b.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de6:	d102      	bne.n	8003dee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f2      	bne.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dee:	4b33      	ldr	r3, [pc, #204]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfa:	d158      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e057      	b.n	8003eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e00:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e06:	4a2d      	ldr	r2, [pc, #180]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e10:	e04d      	b.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d141      	bne.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e1a:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d131      	bne.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e2e:	4a23      	ldr	r2, [pc, #140]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e38:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2232      	movs	r2, #50	; 0x32
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	0c9b      	lsrs	r3, r3, #18
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e5e:	e002      	b.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e72:	d102      	bne.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f2      	bne.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e86:	d112      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e011      	b.n	8003eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e92:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e9c:	e007      	b.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	431bde83 	.word	0x431bde83

08003ec8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed6:	6093      	str	r3, [r2, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40007000 	.word	0x40007000

08003ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e308      	b.n	800450c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d075      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f06:	4ba3      	ldr	r3, [pc, #652]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f10:	4ba0      	ldr	r3, [pc, #640]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b0c      	cmp	r3, #12
 8003f1e:	d102      	bne.n	8003f26 <HAL_RCC_OscConfig+0x3e>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d002      	beq.n	8003f2c <HAL_RCC_OscConfig+0x44>
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d10b      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2c:	4b99      	ldr	r3, [pc, #612]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d05b      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x108>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d157      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e2e3      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d106      	bne.n	8003f5c <HAL_RCC_OscConfig+0x74>
 8003f4e:	4b91      	ldr	r3, [pc, #580]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a90      	ldr	r2, [pc, #576]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e01d      	b.n	8003f98 <HAL_RCC_OscConfig+0xb0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x98>
 8003f66:	4b8b      	ldr	r3, [pc, #556]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a8a      	ldr	r2, [pc, #552]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b88      	ldr	r3, [pc, #544]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a87      	ldr	r2, [pc, #540]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCC_OscConfig+0xb0>
 8003f80:	4b84      	ldr	r3, [pc, #528]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a83      	ldr	r2, [pc, #524]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b81      	ldr	r3, [pc, #516]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a80      	ldr	r2, [pc, #512]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d013      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fdd4 	bl	8001b4c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7fd fdd0 	bl	8001b4c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e2a8      	b.n	800450c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fba:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xc0>
 8003fc6:	e014      	b.n	8003ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fdc0 	bl	8001b4c <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7fd fdbc 	bl	8001b4c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e294      	b.n	800450c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fe2:	4b6c      	ldr	r3, [pc, #432]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0xe8>
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d075      	beq.n	80040ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffe:	4b65      	ldr	r3, [pc, #404]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004008:	4b62      	ldr	r3, [pc, #392]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b0c      	cmp	r3, #12
 8004016:	d102      	bne.n	800401e <HAL_RCC_OscConfig+0x136>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d002      	beq.n	8004024 <HAL_RCC_OscConfig+0x13c>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d11f      	bne.n	8004064 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004024:	4b5b      	ldr	r3, [pc, #364]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCC_OscConfig+0x154>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e267      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403c:	4b55      	ldr	r3, [pc, #340]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	4952      	ldr	r1, [pc, #328]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004050:	4b51      	ldr	r3, [pc, #324]	; (8004198 <HAL_RCC_OscConfig+0x2b0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fd fd2d 	bl	8001ab4 <HAL_InitTick>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d043      	beq.n	80040e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e253      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d023      	beq.n	80040b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b49      	ldr	r3, [pc, #292]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a48      	ldr	r2, [pc, #288]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd fd68 	bl	8001b4c <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004080:	f7fd fd64 	bl	8001b4c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e23c      	b.n	800450c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004092:	4b40      	ldr	r3, [pc, #256]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	4939      	ldr	r1, [pc, #228]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
 80040b2:	e01a      	b.n	80040ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b4:	4b37      	ldr	r3, [pc, #220]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a36      	ldr	r2, [pc, #216]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd fd44 	bl	8001b4c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c8:	f7fd fd40 	bl	8001b4c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e218      	b.n	800450c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040da:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x1e0>
 80040e6:	e000      	b.n	80040ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d03c      	beq.n	8004170 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01c      	beq.n	8004138 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fe:	4b25      	ldr	r3, [pc, #148]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004104:	4a23      	ldr	r2, [pc, #140]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410e:	f7fd fd1d 	bl	8001b4c <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004116:	f7fd fd19 	bl	8001b4c <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e1f1      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0ef      	beq.n	8004116 <HAL_RCC_OscConfig+0x22e>
 8004136:	e01b      	b.n	8004170 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800413a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fd fd00 	bl	8001b4c <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004150:	f7fd fcfc 	bl	8001b4c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e1d4      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ef      	bne.n	8004150 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80ab 	beq.w	80042d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004182:	4b04      	ldr	r3, [pc, #16]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_RCC_OscConfig+0x2b4>
 800418e:	2301      	movs	r3, #1
 8004190:	e005      	b.n	800419e <HAL_RCC_OscConfig+0x2b6>
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	20000004 	.word	0x20000004
 800419c:	2300      	movs	r3, #0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	4baf      	ldr	r3, [pc, #700]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	4aae      	ldr	r2, [pc, #696]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6593      	str	r3, [r2, #88]	; 0x58
 80041ae:	4bac      	ldr	r3, [pc, #688]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041ba:	2301      	movs	r3, #1
 80041bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041be:	4ba9      	ldr	r3, [pc, #676]	; (8004464 <HAL_RCC_OscConfig+0x57c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d118      	bne.n	80041fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ca:	4ba6      	ldr	r3, [pc, #664]	; (8004464 <HAL_RCC_OscConfig+0x57c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4aa5      	ldr	r2, [pc, #660]	; (8004464 <HAL_RCC_OscConfig+0x57c>)
 80041d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d6:	f7fd fcb9 	bl	8001b4c <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041de:	f7fd fcb5 	bl	8001b4c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e18d      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f0:	4b9c      	ldr	r3, [pc, #624]	; (8004464 <HAL_RCC_OscConfig+0x57c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d108      	bne.n	8004216 <HAL_RCC_OscConfig+0x32e>
 8004204:	4b96      	ldr	r3, [pc, #600]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	4a95      	ldr	r2, [pc, #596]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004214:	e024      	b.n	8004260 <HAL_RCC_OscConfig+0x378>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b05      	cmp	r3, #5
 800421c:	d110      	bne.n	8004240 <HAL_RCC_OscConfig+0x358>
 800421e:	4b90      	ldr	r3, [pc, #576]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	4a8e      	ldr	r2, [pc, #568]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004226:	f043 0304 	orr.w	r3, r3, #4
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422e:	4b8c      	ldr	r3, [pc, #560]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	4a8a      	ldr	r2, [pc, #552]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800423e:	e00f      	b.n	8004260 <HAL_RCC_OscConfig+0x378>
 8004240:	4b87      	ldr	r3, [pc, #540]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	4a86      	ldr	r2, [pc, #536]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004250:	4b83      	ldr	r3, [pc, #524]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	4a82      	ldr	r2, [pc, #520]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d016      	beq.n	8004296 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7fd fc70 	bl	8001b4c <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426e:	e00a      	b.n	8004286 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004270:	f7fd fc6c 	bl	8001b4c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e142      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004286:	4b76      	ldr	r3, [pc, #472]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ed      	beq.n	8004270 <HAL_RCC_OscConfig+0x388>
 8004294:	e015      	b.n	80042c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004296:	f7fd fc59 	bl	8001b4c <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800429c:	e00a      	b.n	80042b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fd fc55 	bl	8001b4c <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e12b      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b4:	4b6a      	ldr	r3, [pc, #424]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ed      	bne.n	800429e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042c2:	7ffb      	ldrb	r3, [r7, #31]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c8:	4b65      	ldr	r3, [pc, #404]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042cc:	4a64      	ldr	r2, [pc, #400]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80042ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d03c      	beq.n	800435a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01c      	beq.n	8004322 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042e8:	4b5d      	ldr	r3, [pc, #372]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80042ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ee:	4a5c      	ldr	r2, [pc, #368]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fd fc28 	bl	8001b4c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004300:	f7fd fc24 	bl	8001b4c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e0fc      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004312:	4b53      	ldr	r3, [pc, #332]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ef      	beq.n	8004300 <HAL_RCC_OscConfig+0x418>
 8004320:	e01b      	b.n	800435a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004322:	4b4f      	ldr	r3, [pc, #316]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004328:	4a4d      	ldr	r2, [pc, #308]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7fd fc0b 	bl	8001b4c <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800433a:	f7fd fc07 	bl	8001b4c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e0df      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800434c:	4b44      	ldr	r3, [pc, #272]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 800434e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1ef      	bne.n	800433a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80d3 	beq.w	800450a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004364:	4b3e      	ldr	r3, [pc, #248]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b0c      	cmp	r3, #12
 800436e:	f000 808d 	beq.w	800448c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d15a      	bne.n	8004430 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437a:	4b39      	ldr	r3, [pc, #228]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a38      	ldr	r2, [pc, #224]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004386:	f7fd fbe1 	bl	8001b4c <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438e:	f7fd fbdd 	bl	8001b4c <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e0b5      	b.n	800450c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a0:	4b2f      	ldr	r3, [pc, #188]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ac:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <HAL_RCC_OscConfig+0x580>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6a11      	ldr	r1, [r2, #32]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043bc:	3a01      	subs	r2, #1
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	4311      	orrs	r1, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80043c6:	0212      	lsls	r2, r2, #8
 80043c8:	4311      	orrs	r1, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043ce:	0852      	lsrs	r2, r2, #1
 80043d0:	3a01      	subs	r2, #1
 80043d2:	0552      	lsls	r2, r2, #21
 80043d4:	4311      	orrs	r1, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043da:	0852      	lsrs	r2, r2, #1
 80043dc:	3a01      	subs	r2, #1
 80043de:	0652      	lsls	r2, r2, #25
 80043e0:	4311      	orrs	r1, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043e6:	06d2      	lsls	r2, r2, #27
 80043e8:	430a      	orrs	r2, r1
 80043ea:	491d      	ldr	r1, [pc, #116]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043fc:	4b18      	ldr	r3, [pc, #96]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a17      	ldr	r2, [pc, #92]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004406:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd fba0 	bl	8001b4c <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd fb9c 	bl	8001b4c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e074      	b.n	800450c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x528>
 800442e:	e06c      	b.n	800450a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4a07      	ldr	r2, [pc, #28]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 8004442:	f023 0303 	bic.w	r3, r3, #3
 8004446:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <HAL_RCC_OscConfig+0x578>)
 800444e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004456:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd fb78 	bl	8001b4c <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800445e:	e00e      	b.n	800447e <HAL_RCC_OscConfig+0x596>
 8004460:	40021000 	.word	0x40021000
 8004464:	40007000 	.word	0x40007000
 8004468:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446c:	f7fd fb6e 	bl	8001b4c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e046      	b.n	800450c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800447e:	4b25      	ldr	r3, [pc, #148]	; (8004514 <HAL_RCC_OscConfig+0x62c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x584>
 800448a:	e03e      	b.n	800450a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e039      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <HAL_RCC_OscConfig+0x62c>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f003 0203 	and.w	r2, r3, #3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d12c      	bne.n	8004506 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	3b01      	subs	r3, #1
 80044b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d123      	bne.n	8004506 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d11b      	bne.n	8004506 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d113      	bne.n	8004506 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	3b01      	subs	r3, #1
 80044ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d109      	bne.n	8004506 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	3b01      	subs	r3, #1
 8004500:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000

08004518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e11e      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b91      	ldr	r3, [pc, #580]	; (8004778 <HAL_RCC_ClockConfig+0x260>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d910      	bls.n	8004560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b8e      	ldr	r3, [pc, #568]	; (8004778 <HAL_RCC_ClockConfig+0x260>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 020f 	bic.w	r2, r3, #15
 8004546:	498c      	ldr	r1, [pc, #560]	; (8004778 <HAL_RCC_ClockConfig+0x260>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b8a      	ldr	r3, [pc, #552]	; (8004778 <HAL_RCC_ClockConfig+0x260>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e106      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d073      	beq.n	8004654 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b03      	cmp	r3, #3
 8004572:	d129      	bne.n	80045c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004574:	4b81      	ldr	r3, [pc, #516]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0f4      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004584:	f000 f99e 	bl	80048c4 <RCC_GetSysClockFreqFromPLLSource>
 8004588:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4a7c      	ldr	r2, [pc, #496]	; (8004780 <HAL_RCC_ClockConfig+0x268>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d93f      	bls.n	8004612 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004592:	4b7a      	ldr	r3, [pc, #488]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d033      	beq.n	8004612 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d12f      	bne.n	8004612 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045b2:	4b72      	ldr	r3, [pc, #456]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ba:	4a70      	ldr	r2, [pc, #448]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 80045bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e024      	b.n	8004612 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d107      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d0:	4b6a      	ldr	r3, [pc, #424]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d109      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0c6      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e0:	4b66      	ldr	r3, [pc, #408]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0be      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045f0:	f000 f8ce 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4a61      	ldr	r2, [pc, #388]	; (8004780 <HAL_RCC_ClockConfig+0x268>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d909      	bls.n	8004612 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045fe:	4b5f      	ldr	r3, [pc, #380]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004606:	4a5d      	ldr	r2, [pc, #372]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004612:	4b5a      	ldr	r3, [pc, #360]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f023 0203 	bic.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4957      	ldr	r1, [pc, #348]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004620:	4313      	orrs	r3, r2
 8004622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004624:	f7fd fa92 	bl	8001b4c <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	e00a      	b.n	8004642 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462c:	f7fd fa8e 	bl	8001b4c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f241 3288 	movw	r2, #5000	; 0x1388
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e095      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004642:	4b4e      	ldr	r3, [pc, #312]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 020c 	and.w	r2, r3, #12
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	429a      	cmp	r2, r3
 8004652:	d1eb      	bne.n	800462c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d023      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800466c:	4b43      	ldr	r3, [pc, #268]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4a42      	ldr	r2, [pc, #264]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004676:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004684:	4b3d      	ldr	r3, [pc, #244]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800468c:	4a3b      	ldr	r2, [pc, #236]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 800468e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004692:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004694:	4b39      	ldr	r3, [pc, #228]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4936      	ldr	r1, [pc, #216]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
 80046a6:	e008      	b.n	80046ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b80      	cmp	r3, #128	; 0x80
 80046ac:	d105      	bne.n	80046ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046ae:	4b33      	ldr	r3, [pc, #204]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4a32      	ldr	r2, [pc, #200]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 80046b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ba:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <HAL_RCC_ClockConfig+0x260>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d21d      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c8:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RCC_ClockConfig+0x260>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 020f 	bic.w	r2, r3, #15
 80046d0:	4929      	ldr	r1, [pc, #164]	; (8004778 <HAL_RCC_ClockConfig+0x260>)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046d8:	f7fd fa38 	bl	8001b4c <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e0:	f7fd fa34 	bl	8001b4c <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e03b      	b.n	800476e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RCC_ClockConfig+0x260>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d1ed      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b1a      	ldr	r3, [pc, #104]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4917      	ldr	r1, [pc, #92]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	490f      	ldr	r1, [pc, #60]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004742:	f000 f825 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8004746:	4601      	mov	r1, r0
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <HAL_RCC_ClockConfig+0x264>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	4a0c      	ldr	r2, [pc, #48]	; (8004784 <HAL_RCC_ClockConfig+0x26c>)
 8004754:	5cd3      	ldrb	r3, [r2, r3]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	fa21 f303 	lsr.w	r3, r1, r3
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <HAL_RCC_ClockConfig+0x270>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004762:	4b0a      	ldr	r3, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x274>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd f9a4 	bl	8001ab4 <HAL_InitTick>
 800476c:	4603      	mov	r3, r0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40022000 	.word	0x40022000
 800477c:	40021000 	.word	0x40021000
 8004780:	04c4b400 	.word	0x04c4b400
 8004784:	0800cf2c 	.word	0x0800cf2c
 8004788:	20000000 	.word	0x20000000
 800478c:	20000004 	.word	0x20000004

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004796:	4b2c      	ldr	r3, [pc, #176]	; (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d102      	bne.n	80047a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <HAL_RCC_GetSysClockFreq+0xbc>)
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e047      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030c 	and.w	r3, r3, #12
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d102      	bne.n	80047ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047b4:	4b26      	ldr	r3, [pc, #152]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	e03e      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047ba:	4b23      	ldr	r3, [pc, #140]	; (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d136      	bne.n	8004834 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047c6:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047d0:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	3301      	adds	r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d10c      	bne.n	80047fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	4a16      	ldr	r2, [pc, #88]	; (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ee:	68d2      	ldr	r2, [r2, #12]
 80047f0:	0a12      	lsrs	r2, r2, #8
 80047f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047f6:	fb02 f303 	mul.w	r3, r2, r3
 80047fa:	617b      	str	r3, [r7, #20]
      break;
 80047fc:	e00c      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047fe:	4a13      	ldr	r2, [pc, #76]	; (800484c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	4a10      	ldr	r2, [pc, #64]	; (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004808:	68d2      	ldr	r2, [r2, #12]
 800480a:	0a12      	lsrs	r2, r2, #8
 800480c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	617b      	str	r3, [r7, #20]
      break;
 8004816:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	0e5b      	lsrs	r3, r3, #25
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	3301      	adds	r3, #1
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e001      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004838:	693b      	ldr	r3, [r7, #16]
}
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
 800484c:	00f42400 	.word	0x00f42400
 8004850:	007a1200 	.word	0x007a1200

08004854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <HAL_RCC_GetHCLKFreq+0x14>)
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000000 	.word	0x20000000

0800486c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004870:	f7ff fff0 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8004874:	4601      	mov	r1, r0
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004882:	5cd3      	ldrb	r3, [r2, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa21 f303 	lsr.w	r3, r1, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	0800cf3c 	.word	0x0800cf3c

08004898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800489c:	f7ff ffda 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80048a0:	4601      	mov	r1, r0
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0adb      	lsrs	r3, r3, #11
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4a04      	ldr	r2, [pc, #16]	; (80048c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000
 80048c0:	0800cf3c 	.word	0x0800cf3c

080048c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ca:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048d4:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d10c      	bne.n	8004902 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048e8:	4a17      	ldr	r2, [pc, #92]	; (8004948 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	4a14      	ldr	r2, [pc, #80]	; (8004944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048f2:	68d2      	ldr	r2, [r2, #12]
 80048f4:	0a12      	lsrs	r2, r2, #8
 80048f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048fa:	fb02 f303 	mul.w	r3, r2, r3
 80048fe:	617b      	str	r3, [r7, #20]
    break;
 8004900:	e00c      	b.n	800491c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	fbb2 f3f3 	udiv	r3, r2, r3
 800490a:	4a0e      	ldr	r2, [pc, #56]	; (8004944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800490c:	68d2      	ldr	r2, [r2, #12]
 800490e:	0a12      	lsrs	r2, r2, #8
 8004910:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004914:	fb02 f303 	mul.w	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]
    break;
 800491a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	0e5b      	lsrs	r3, r3, #25
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	3301      	adds	r3, #1
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004936:	687b      	ldr	r3, [r7, #4]
}
 8004938:	4618      	mov	r0, r3
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	40021000 	.word	0x40021000
 8004948:	007a1200 	.word	0x007a1200
 800494c:	00f42400 	.word	0x00f42400

08004950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004958:	2300      	movs	r3, #0
 800495a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800495c:	2300      	movs	r3, #0
 800495e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8098 	beq.w	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496e:	2300      	movs	r3, #0
 8004970:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004972:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497e:	4b40      	ldr	r3, [pc, #256]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	4a3f      	ldr	r2, [pc, #252]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004988:	6593      	str	r3, [r2, #88]	; 0x58
 800498a:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004996:	2301      	movs	r3, #1
 8004998:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499a:	4b3a      	ldr	r3, [pc, #232]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a39      	ldr	r2, [pc, #228]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049a6:	f7fd f8d1 	bl	8001b4c <HAL_GetTick>
 80049aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ac:	e009      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ae:	f7fd f8cd 	bl	8001b4c <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d902      	bls.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	74fb      	strb	r3, [r7, #19]
        break;
 80049c0:	e005      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049c2:	4b30      	ldr	r3, [pc, #192]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ef      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d159      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049d4:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01e      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d019      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049f0:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049fc:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a0c:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a1c:	4a18      	ldr	r2, [pc, #96]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2e:	f7fd f88d 	bl	8001b4c <HAL_GetTick>
 8004a32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a34:	e00b      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fd f889 	bl	8001b4c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d902      	bls.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a4c:	e006      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ec      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a62:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a78:	e008      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a7a:	7cfb      	ldrb	r3, [r7, #19]
 8004a7c:	74bb      	strb	r3, [r7, #18]
 8004a7e:	e005      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a8c:	7c7b      	ldrb	r3, [r7, #17]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d105      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a92:	4ba6      	ldr	r3, [pc, #664]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a96:	4aa5      	ldr	r2, [pc, #660]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aaa:	4ba0      	ldr	r3, [pc, #640]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f023 0203 	bic.w	r2, r3, #3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	499c      	ldr	r1, [pc, #624]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004acc:	4b97      	ldr	r3, [pc, #604]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f023 020c 	bic.w	r2, r3, #12
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4994      	ldr	r1, [pc, #592]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aee:	4b8f      	ldr	r3, [pc, #572]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	498b      	ldr	r1, [pc, #556]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b10:	4b86      	ldr	r3, [pc, #536]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	4983      	ldr	r1, [pc, #524]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b32:	4b7e      	ldr	r3, [pc, #504]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	497a      	ldr	r1, [pc, #488]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b54:	4b75      	ldr	r3, [pc, #468]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	4972      	ldr	r1, [pc, #456]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b76:	4b6d      	ldr	r3, [pc, #436]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	4969      	ldr	r1, [pc, #420]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b98:	4b64      	ldr	r3, [pc, #400]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	4961      	ldr	r1, [pc, #388]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bba:	4b5c      	ldr	r3, [pc, #368]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	4958      	ldr	r1, [pc, #352]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d015      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bdc:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	4950      	ldr	r1, [pc, #320]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bfc:	4b4b      	ldr	r3, [pc, #300]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a4a      	ldr	r2, [pc, #296]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d015      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c14:	4b45      	ldr	r3, [pc, #276]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	4942      	ldr	r1, [pc, #264]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c32:	d105      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c34:	4b3d      	ldr	r3, [pc, #244]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a3c      	ldr	r2, [pc, #240]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d015      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c4c:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	4934      	ldr	r1, [pc, #208]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c6a:	d105      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c6c:	4b2f      	ldr	r3, [pc, #188]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4a2e      	ldr	r2, [pc, #184]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d015      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c92:	4926      	ldr	r1, [pc, #152]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca2:	d105      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca4:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	4918      	ldr	r1, [pc, #96]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cda:	d105      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cdc:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	490a      	ldr	r1, [pc, #40]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d12:	d105      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d20:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40021000 	.word	0x40021000

08004d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e09d      	b.n	8004e7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d52:	d009      	beq.n	8004d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	61da      	str	r2, [r3, #28]
 8004d5a:	e005      	b.n	8004d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc f988 	bl	8001098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004da8:	d902      	bls.n	8004db0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e002      	b.n	8004db6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004db4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004dbe:	d007      	beq.n	8004dd0 <HAL_SPI_Init+0xa0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	ea42 0103 	orr.w	r1, r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	f003 0204 	and.w	r2, r3, #4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e4c:	ea42 0103 	orr.w	r1, r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b08a      	sub	sp, #40	; 0x28
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e94:	2301      	movs	r3, #1
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x26>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e1fb      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x41e>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eb4:	f7fc fe4a 	bl	8001b4c <HAL_GetTick>
 8004eb8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ec0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ec8:	887b      	ldrh	r3, [r7, #2]
 8004eca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ecc:	887b      	ldrh	r3, [r7, #2]
 8004ece:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ed0:	7efb      	ldrb	r3, [r7, #27]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_SPI_TransmitReceive+0x6e>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004edc:	d106      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x66>
 8004ee6:	7efb      	ldrb	r3, [r7, #27]
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d003      	beq.n	8004ef4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ef2:	e1cd      	b.n	8005290 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x80>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x80>
 8004f00:	887b      	ldrh	r3, [r7, #2]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f0c:	e1c0      	b.n	8005290 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d003      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2205      	movs	r2, #5
 8004f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	887a      	ldrh	r2, [r7, #2]
 8004f32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	887a      	ldrh	r2, [r7, #2]
 8004f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	887a      	ldrh	r2, [r7, #2]
 8004f48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	887a      	ldrh	r2, [r7, #2]
 8004f4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f64:	d802      	bhi.n	8004f6c <HAL_SPI_TransmitReceive+0xe6>
 8004f66:	8a3b      	ldrh	r3, [r7, #16]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d908      	bls.n	8004f7e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	e007      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f8c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d007      	beq.n	8004fac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004faa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fb4:	d97c      	bls.n	80050b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <HAL_SPI_TransmitReceive+0x13e>
 8004fbe:	8a7b      	ldrh	r3, [r7, #18]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d169      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	881a      	ldrh	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	1c9a      	adds	r2, r3, #2
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fe8:	e056      	b.n	8005098 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d11b      	bne.n	8005030 <HAL_SPI_TransmitReceive+0x1aa>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d016      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x1aa>
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	2b01      	cmp	r3, #1
 8005006:	d113      	bne.n	8005030 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	881a      	ldrh	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	1c9a      	adds	r2, r3, #2
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d11c      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x1f2>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d016      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	b292      	uxth	r2, r2
 8005056:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	1c9a      	adds	r2, r3, #2
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005074:	2301      	movs	r3, #1
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005078:	f7fc fd68 	bl	8001b4c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005084:	429a      	cmp	r2, r3
 8005086:	d807      	bhi.n	8005098 <HAL_SPI_TransmitReceive+0x212>
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d003      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005096:	e0fb      	b.n	8005290 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1a3      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x164>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d19d      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x164>
 80050ae:	e0df      	b.n	8005270 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_SPI_TransmitReceive+0x23a>
 80050b8:	8a7b      	ldrh	r3, [r7, #18]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	f040 80cb 	bne.w	8005256 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d912      	bls.n	80050f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	1c9a      	adds	r2, r3, #2
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b02      	subs	r3, #2
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050ee:	e0b2      	b.n	8005256 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005116:	e09e      	b.n	8005256 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d134      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x30a>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d02f      	beq.n	8005190 <HAL_SPI_TransmitReceive+0x30a>
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	2b01      	cmp	r3, #1
 8005134:	d12c      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d912      	bls.n	8005166 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	881a      	ldrh	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	1c9a      	adds	r2, r3, #2
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b02      	subs	r3, #2
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005164:	e012      	b.n	800518c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	330c      	adds	r3, #12
 8005170:	7812      	ldrb	r2, [r2, #0]
 8005172:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b01      	cmp	r3, #1
 800519c:	d148      	bne.n	8005230 <HAL_SPI_TransmitReceive+0x3aa>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d042      	beq.n	8005230 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d923      	bls.n	80051fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	b292      	uxth	r2, r2
 80051c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b02      	subs	r3, #2
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d81f      	bhi.n	800522c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	e016      	b.n	800522c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f103 020c 	add.w	r2, r3, #12
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	7812      	ldrb	r2, [r2, #0]
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800522c:	2301      	movs	r3, #1
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005230:	f7fc fc8c 	bl	8001b4c <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523c:	429a      	cmp	r2, r3
 800523e:	d803      	bhi.n	8005248 <HAL_SPI_TransmitReceive+0x3c2>
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d102      	bne.n	800524e <HAL_SPI_TransmitReceive+0x3c8>
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005254:	e01c      	b.n	8005290 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	f47f af5b 	bne.w	8005118 <HAL_SPI_TransmitReceive+0x292>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	f47f af54 	bne.w	8005118 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fd29 	bl	8005ccc <SPI_EndRxTxTransaction>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	661a      	str	r2, [r3, #96]	; 0x60
 800528c:	e000      	b.n	8005290 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800528e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3728      	adds	r7, #40	; 0x28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_SPI_TransmitReceive_DMA+0x20>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e16c      	b.n	80055a6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80052e2:	7dbb      	ldrb	r3, [r7, #22]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d00d      	beq.n	8005304 <HAL_SPI_TransmitReceive_DMA+0x58>
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ee:	d106      	bne.n	80052fe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <HAL_SPI_TransmitReceive_DMA+0x52>
 80052f8:	7dbb      	ldrb	r3, [r7, #22]
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d002      	beq.n	8005304 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80052fe:	2302      	movs	r3, #2
 8005300:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005302:	e14b      	b.n	800559c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005310:	887b      	ldrh	r3, [r7, #2]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d102      	bne.n	800531c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	75fb      	strb	r3, [r7, #23]
    goto error;
 800531a:	e13f      	b.n	800559c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b04      	cmp	r3, #4
 8005326:	d003      	beq.n	8005330 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2205      	movs	r2, #5
 800532c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	887a      	ldrh	r2, [r7, #2]
 8005340:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	887a      	ldrh	r2, [r7, #2]
 8005346:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	887a      	ldrh	r2, [r7, #2]
 8005352:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	887a      	ldrh	r2, [r7, #2]
 800535a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005378:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005382:	d908      	bls.n	8005396 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005392:	605a      	str	r2, [r3, #4]
 8005394:	e06f      	b.n	8005476 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053a4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b0:	d126      	bne.n	8005400 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10f      	bne.n	80053de <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053cc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053dc:	e010      	b.n	8005400 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ec:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3301      	adds	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540a:	d134      	bne.n	8005476 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800541a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005422:	b29b      	uxth	r3, r3
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d111      	bne.n	8005450 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800543a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005442:	b29b      	uxth	r3, r3
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800544e:	e012      	b.n	8005476 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800545e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005466:	b29b      	uxth	r3, r3
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	b29b      	uxth	r3, r3
 800546c:	3301      	adds	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b04      	cmp	r3, #4
 8005480:	d108      	bne.n	8005494 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005486:	4a4a      	ldr	r2, [pc, #296]	; (80055b0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	4a49      	ldr	r2, [pc, #292]	; (80055b4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8005490:	62da      	str	r2, [r3, #44]	; 0x2c
 8005492:	e007      	b.n	80054a4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	4a47      	ldr	r2, [pc, #284]	; (80055b8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	4a46      	ldr	r2, [pc, #280]	; (80055bc <HAL_SPI_TransmitReceive_DMA+0x310>)
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	4a45      	ldr	r2, [pc, #276]	; (80055c0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80054aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	2200      	movs	r2, #0
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	4619      	mov	r1, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80054ce:	f7fc fd23 	bl	8001f18 <HAL_DMA_Start_IT>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00c      	beq.n	80054f2 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054dc:	f043 0210 	orr.w	r2, r3, #16
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80054f0:	e054      	b.n	800559c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	2200      	movs	r2, #0
 8005508:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	2200      	movs	r2, #0
 8005510:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	2200      	movs	r2, #0
 8005518:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551e:	2200      	movs	r2, #0
 8005520:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	4619      	mov	r1, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005538:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800553a:	f7fc fced 	bl	8001f18 <HAL_DMA_Start_IT>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00c      	beq.n	800555e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	f043 0210 	orr.w	r2, r3, #16
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800555c:	e01e      	b.n	800559c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d007      	beq.n	800557c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800557a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0220 	orr.w	r2, r2, #32
 800558a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0202 	orr.w	r2, r2, #2
 800559a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	0800594d 	.word	0x0800594d
 80055b4:	08005815 	.word	0x08005815
 80055b8:	08005969 	.word	0x08005969
 80055bc:	080058bd 	.word	0x080058bd
 80055c0:	08005985 	.word	0x08005985

080055c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	099b      	lsrs	r3, r3, #6
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10f      	bne.n	8005608 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	099b      	lsrs	r3, r3, #6
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
    return;
 8005606:	e0d8      	b.n	80057ba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_SPI_IRQHandler+0x66>
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	09db      	lsrs	r3, r3, #7
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
    return;
 8005628:	e0c7      	b.n	80057ba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10c      	bne.n	8005650 <HAL_SPI_IRQHandler+0x8c>
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	099b      	lsrs	r3, r3, #6
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	0a1b      	lsrs	r3, r3, #8
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80b5 	beq.w	80057ba <HAL_SPI_IRQHandler+0x1f6>
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80ae 	beq.w	80057ba <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	099b      	lsrs	r3, r3, #6
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d023      	beq.n	80056b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b03      	cmp	r3, #3
 8005674:	d011      	beq.n	800569a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567a:	f043 0204 	orr.w	r2, r3, #4
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	e00b      	b.n	80056b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	693b      	ldr	r3, [r7, #16]
        return;
 80056b0:	e083      	b.n	80057ba <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d014      	beq.n	80056e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c2:	f043 0201 	orr.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00c      	beq.n	800570e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f8:	f043 0208 	orr.w	r2, r3, #8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005700:	2300      	movs	r3, #0
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005712:	2b00      	cmp	r3, #0
 8005714:	d050      	beq.n	80057b8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005724:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <HAL_SPI_IRQHandler+0x17e>
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d034      	beq.n	80057ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0203 	bic.w	r2, r2, #3
 8005750:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005756:	2b00      	cmp	r3, #0
 8005758:	d011      	beq.n	800577e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575e:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <HAL_SPI_IRQHandler+0x1fc>)
 8005760:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005766:	4618      	mov	r0, r3
 8005768:	f7fc fc51 	bl	800200e <HAL_DMA_Abort_IT>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005776:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	2b00      	cmp	r3, #0
 8005784:	d016      	beq.n	80057b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	4a0d      	ldr	r2, [pc, #52]	; (80057c0 <HAL_SPI_IRQHandler+0x1fc>)
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	4618      	mov	r0, r3
 8005794:	f7fc fc3b 	bl	800200e <HAL_DMA_Abort_IT>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80057aa:	e003      	b.n	80057b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f827 	bl	8005800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80057b2:	e000      	b.n	80057b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80057b4:	bf00      	nop
    return;
 80057b6:	bf00      	nop
 80057b8:	bf00      	nop
  }
}
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	080059c5 	.word	0x080059c5

080057c4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005822:	f7fc f993 	bl	8001b4c <HAL_GetTick>
 8005826:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b20      	cmp	r3, #32
 8005834:	d03c      	beq.n	80058b0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0220 	bic.w	r2, r2, #32
 8005844:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <SPI_DMAReceiveCplt+0x56>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005856:	d108      	bne.n	800586a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0203 	bic.w	r2, r2, #3
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	e007      	b.n	800587a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	2164      	movs	r1, #100	; 0x64
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f9cc 	bl	8005c1c <SPI_EndRxTransaction>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff ffa9 	bl	8005800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80058ae:	e002      	b.n	80058b6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7ff ff87 	bl	80057c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058ca:	f7fc f93f 	bl	8001b4c <HAL_GetTick>
 80058ce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d030      	beq.n	8005940 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0220 	bic.w	r2, r2, #32
 80058ec:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	2164      	movs	r1, #100	; 0x64
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f9ea 	bl	8005ccc <SPI_EndRxTxTransaction>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0203 	bic.w	r2, r2, #3
 8005918:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff ff61 	bl	8005800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800593e:	e002      	b.n	8005946 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f007 f985 	bl	800cc50 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7ff ff3c 	bl	80057d8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff ff38 	bl	80057ec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0203 	bic.w	r2, r2, #3
 80059a0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a6:	f043 0210 	orr.w	r2, r3, #16
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff ff22 	bl	8005800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059bc:	bf00      	nop
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff ff0d 	bl	8005800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059e6:	bf00      	nop
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a00:	f7fc f8a4 	bl	8001b4c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a10:	f7fc f89c 	bl	8001b4c <HAL_GetTick>
 8005a14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a16:	4b39      	ldr	r3, [pc, #228]	; (8005afc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	015b      	lsls	r3, r3, #5
 8005a1c:	0d1b      	lsrs	r3, r3, #20
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a26:	e054      	b.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	d050      	beq.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a30:	f7fc f88c 	bl	8001b4c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d902      	bls.n	8005a46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d13d      	bne.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a5e:	d111      	bne.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a68:	d004      	beq.n	8005a74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a72:	d107      	bne.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8c:	d10f      	bne.n	8005aae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e017      	b.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	2300      	movne	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d19b      	bne.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000000 	.word	0x20000000

08005b00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b0e:	f7fc f81d 	bl	8001b4c <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b1e:	f7fc f815 	bl	8001b4c <HAL_GetTick>
 8005b22:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b24:	4b3c      	ldr	r3, [pc, #240]	; (8005c18 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	00da      	lsls	r2, r3, #3
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	0d1b      	lsrs	r3, r3, #20
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b3c:	e05f      	b.n	8005bfe <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b44:	d106      	bne.n	8005b54 <SPI_WaitFifoStateUntilTimeout+0x54>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5a:	d050      	beq.n	8005bfe <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b5c:	f7fb fff6 	bl	8001b4c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d902      	bls.n	8005b72 <SPI_WaitFifoStateUntilTimeout+0x72>
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d13d      	bne.n	8005bee <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b8a:	d111      	bne.n	8005bb0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b94:	d004      	beq.n	8005ba0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b9e:	d107      	bne.n	8005bb0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb8:	d10f      	bne.n	8005bda <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e010      	b.n	8005c10 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4013      	ands	r3, r2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d197      	bne.n	8005b3e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3720      	adds	r7, #32
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20000000 	.word	0x20000000

08005c1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c30:	d111      	bne.n	8005c56 <SPI_EndRxTransaction+0x3a>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3a:	d004      	beq.n	8005c46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c44:	d107      	bne.n	8005c56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c54:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2180      	movs	r1, #128	; 0x80
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff fec5 	bl	80059f0 <SPI_WaitFlagStateUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e023      	b.n	8005cc4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c84:	d11d      	bne.n	8005cc2 <SPI_EndRxTransaction+0xa6>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8e:	d004      	beq.n	8005c9a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c98:	d113      	bne.n	8005cc2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff ff2a 	bl	8005b00 <SPI_WaitFifoStateUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb6:	f043 0220 	orr.w	r2, r3, #32
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e000      	b.n	8005cc4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff ff0b 	bl	8005b00 <SPI_WaitFifoStateUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf4:	f043 0220 	orr.w	r2, r3, #32
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e027      	b.n	8005d50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2200      	movs	r2, #0
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff fe70 	bl	80059f0 <SPI_WaitFlagStateUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1a:	f043 0220 	orr.w	r2, r3, #32
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e014      	b.n	8005d50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff fee4 	bl	8005b00 <SPI_WaitFifoStateUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e000      	b.n	8005d50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e049      	b.n	8005dfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb fc72 	bl	8001668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f000 fd8c 	bl	80068b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d001      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e04a      	b.n	8005eb6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a21      	ldr	r2, [pc, #132]	; (8005ec4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d018      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x6c>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4a:	d013      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x6c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00e      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x6c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1c      	ldr	r2, [pc, #112]	; (8005ecc <HAL_TIM_Base_Start_IT+0xc4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d009      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x6c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1a      	ldr	r2, [pc, #104]	; (8005ed0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d004      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x6c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a19      	ldr	r2, [pc, #100]	; (8005ed4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d115      	bne.n	8005ea0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	4b17      	ldr	r3, [pc, #92]	; (8005ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b06      	cmp	r3, #6
 8005e84:	d015      	beq.n	8005eb2 <HAL_TIM_Base_Start_IT+0xaa>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8c:	d011      	beq.n	8005eb2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0201 	orr.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9e:	e008      	b.n	8005eb2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0201 	orr.w	r2, r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	e000      	b.n	8005eb4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	00010007 	.word	0x00010007

08005edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e049      	b.n	8005f82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f841 	bl	8005f8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f000 fcca 	bl	80068b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0x24>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e03c      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d109      	bne.n	8005fde <HAL_TIM_PWM_Start+0x3e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	bf14      	ite	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	e02f      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d109      	bne.n	8005ff8 <HAL_TIM_PWM_Start+0x58>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	bf14      	ite	ne
 8005ff0:	2301      	movne	r3, #1
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	e022      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b0c      	cmp	r3, #12
 8005ffc:	d109      	bne.n	8006012 <HAL_TIM_PWM_Start+0x72>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b01      	cmp	r3, #1
 8006008:	bf14      	ite	ne
 800600a:	2301      	movne	r3, #1
 800600c:	2300      	moveq	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	e015      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b10      	cmp	r3, #16
 8006016:	d109      	bne.n	800602c <HAL_TIM_PWM_Start+0x8c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	e008      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	bf14      	ite	ne
 8006038:	2301      	movne	r3, #1
 800603a:	2300      	moveq	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e097      	b.n	8006176 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <HAL_TIM_PWM_Start+0xb6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006054:	e023      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b04      	cmp	r3, #4
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0xc6>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006064:	e01b      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start+0xd6>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006074:	e013      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xe6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006084:	e00b      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b10      	cmp	r3, #16
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Start+0xf6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006094:	e003      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2201      	movs	r2, #1
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 f826 	bl	80070f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a33      	ldr	r2, [pc, #204]	; (8006180 <HAL_TIM_PWM_Start+0x1e0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <HAL_TIM_PWM_Start+0x13e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a32      	ldr	r2, [pc, #200]	; (8006184 <HAL_TIM_PWM_Start+0x1e4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_TIM_PWM_Start+0x13e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a30      	ldr	r2, [pc, #192]	; (8006188 <HAL_TIM_PWM_Start+0x1e8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_TIM_PWM_Start+0x13e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2f      	ldr	r2, [pc, #188]	; (800618c <HAL_TIM_PWM_Start+0x1ec>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_TIM_PWM_Start+0x13e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2d      	ldr	r2, [pc, #180]	; (8006190 <HAL_TIM_PWM_Start+0x1f0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d101      	bne.n	80060e2 <HAL_TIM_PWM_Start+0x142>
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <HAL_TIM_PWM_Start+0x144>
 80060e2:	2300      	movs	r3, #0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a20      	ldr	r2, [pc, #128]	; (8006180 <HAL_TIM_PWM_Start+0x1e0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <HAL_TIM_PWM_Start+0x194>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d013      	beq.n	8006134 <HAL_TIM_PWM_Start+0x194>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a20      	ldr	r2, [pc, #128]	; (8006194 <HAL_TIM_PWM_Start+0x1f4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <HAL_TIM_PWM_Start+0x194>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1f      	ldr	r2, [pc, #124]	; (8006198 <HAL_TIM_PWM_Start+0x1f8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <HAL_TIM_PWM_Start+0x194>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a17      	ldr	r2, [pc, #92]	; (8006184 <HAL_TIM_PWM_Start+0x1e4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <HAL_TIM_PWM_Start+0x194>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a16      	ldr	r2, [pc, #88]	; (8006188 <HAL_TIM_PWM_Start+0x1e8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d115      	bne.n	8006160 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	4b18      	ldr	r3, [pc, #96]	; (800619c <HAL_TIM_PWM_Start+0x1fc>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b06      	cmp	r3, #6
 8006144:	d015      	beq.n	8006172 <HAL_TIM_PWM_Start+0x1d2>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d011      	beq.n	8006172 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0201 	orr.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	e008      	b.n	8006172 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	e000      	b.n	8006174 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40013400 	.word	0x40013400
 8006188:	40014000 	.word	0x40014000
 800618c:	40014400 	.word	0x40014400
 8006190:	40014800 	.word	0x40014800
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	00010007 	.word	0x00010007

080061a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d122      	bne.n	80061fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d11b      	bne.n	80061fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0202 	mvn.w	r2, #2
 80061cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fb48 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fb3a 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fb4b 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b04      	cmp	r3, #4
 8006208:	d122      	bne.n	8006250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b04      	cmp	r3, #4
 8006216:	d11b      	bne.n	8006250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0204 	mvn.w	r2, #4
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fb1e 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fb10 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fb21 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b08      	cmp	r3, #8
 800625c:	d122      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b08      	cmp	r3, #8
 800626a:	d11b      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0208 	mvn.w	r2, #8
 8006274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2204      	movs	r2, #4
 800627a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 faf4 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 8006290:	e005      	b.n	800629e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fae6 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 faf7 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0310 	and.w	r3, r3, #16
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d122      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b10      	cmp	r3, #16
 80062be:	d11b      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0210 	mvn.w	r2, #16
 80062c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2208      	movs	r2, #8
 80062ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 faca 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 80062e4:	e005      	b.n	80062f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fabc 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 facd 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b01      	cmp	r3, #1
 8006304:	d10e      	bne.n	8006324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b01      	cmp	r3, #1
 8006312:	d107      	bne.n	8006324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0201 	mvn.w	r2, #1
 800631c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f006 f928 	bl	800c574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632e:	2b80      	cmp	r3, #128	; 0x80
 8006330:	d10e      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633c:	2b80      	cmp	r3, #128	; 0x80
 800633e:	d107      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 f8da 	bl	8007504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	d10e      	bne.n	800637e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d107      	bne.n	800637e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 f8cd 	bl	8007518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d10e      	bne.n	80063aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d107      	bne.n	80063aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fa7b 	bl	80068a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d10e      	bne.n	80063d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d107      	bne.n	80063d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f06f 0220 	mvn.w	r2, #32
 80063ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 f88d 	bl	80074f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e4:	d10f      	bne.n	8006406 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f4:	d107      	bne.n	8006406 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80063fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 f893 	bl	800752c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006414:	d10f      	bne.n	8006436 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006424:	d107      	bne.n	8006436 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800642e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f885 	bl	8007540 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006444:	d10f      	bne.n	8006466 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006454:	d107      	bne.n	8006466 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800645e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 f877 	bl	8007554 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006470:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006474:	d10f      	bne.n	8006496 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006480:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006484:	d107      	bne.n	8006496 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800648e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 f869 	bl	8007568 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e0fd      	b.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b14      	cmp	r3, #20
 80064c6:	f200 80f0 	bhi.w	80066aa <HAL_TIM_PWM_ConfigChannel+0x20a>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	08006525 	.word	0x08006525
 80064d4:	080066ab 	.word	0x080066ab
 80064d8:	080066ab 	.word	0x080066ab
 80064dc:	080066ab 	.word	0x080066ab
 80064e0:	08006565 	.word	0x08006565
 80064e4:	080066ab 	.word	0x080066ab
 80064e8:	080066ab 	.word	0x080066ab
 80064ec:	080066ab 	.word	0x080066ab
 80064f0:	080065a7 	.word	0x080065a7
 80064f4:	080066ab 	.word	0x080066ab
 80064f8:	080066ab 	.word	0x080066ab
 80064fc:	080066ab 	.word	0x080066ab
 8006500:	080065e7 	.word	0x080065e7
 8006504:	080066ab 	.word	0x080066ab
 8006508:	080066ab 	.word	0x080066ab
 800650c:	080066ab 	.word	0x080066ab
 8006510:	08006629 	.word	0x08006629
 8006514:	080066ab 	.word	0x080066ab
 8006518:	080066ab 	.word	0x080066ab
 800651c:	080066ab 	.word	0x080066ab
 8006520:	08006669 	.word	0x08006669
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fa52 	bl	80069d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0208 	orr.w	r2, r2, #8
 800653e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0204 	bic.w	r2, r2, #4
 800654e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6999      	ldr	r1, [r3, #24]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	619a      	str	r2, [r3, #24]
      break;
 8006562:	e0a3      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fac2 	bl	8006af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800657e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6999      	ldr	r1, [r3, #24]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	021a      	lsls	r2, r3, #8
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	619a      	str	r2, [r3, #24]
      break;
 80065a4:	e082      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fb2b 	bl	8006c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0208 	orr.w	r2, r2, #8
 80065c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0204 	bic.w	r2, r2, #4
 80065d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69d9      	ldr	r1, [r3, #28]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	61da      	str	r2, [r3, #28]
      break;
 80065e4:	e062      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fb93 	bl	8006d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69d9      	ldr	r1, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	021a      	lsls	r2, r3, #8
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	61da      	str	r2, [r3, #28]
      break;
 8006626:	e041      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fbfc 	bl	8006e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0208 	orr.w	r2, r2, #8
 8006642:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0204 	bic.w	r2, r2, #4
 8006652:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006666:	e021      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fc40 	bl	8006ef4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006682:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006692:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	021a      	lsls	r2, r3, #8
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80066a8:	e000      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80066aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop

080066c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_TIM_ConfigClockSource+0x18>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e0b9      	b.n	800684c <HAL_TIM_ConfigClockSource+0x18c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80066f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006702:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b70      	cmp	r3, #112	; 0x70
 8006712:	d02e      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0xb2>
 8006714:	2b70      	cmp	r3, #112	; 0x70
 8006716:	d812      	bhi.n	800673e <HAL_TIM_ConfigClockSource+0x7e>
 8006718:	2b30      	cmp	r3, #48	; 0x30
 800671a:	f000 8084 	beq.w	8006826 <HAL_TIM_ConfigClockSource+0x166>
 800671e:	2b30      	cmp	r3, #48	; 0x30
 8006720:	d806      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x70>
 8006722:	2b10      	cmp	r3, #16
 8006724:	d07f      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x166>
 8006726:	2b20      	cmp	r3, #32
 8006728:	d07d      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x166>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d07b      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800672e:	e084      	b.n	800683a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8006730:	2b50      	cmp	r3, #80	; 0x50
 8006732:	d048      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x106>
 8006734:	2b60      	cmp	r3, #96	; 0x60
 8006736:	d056      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x126>
 8006738:	2b40      	cmp	r3, #64	; 0x40
 800673a:	d064      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x146>
      break;
 800673c:	e07d      	b.n	800683a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800673e:	4a45      	ldr	r2, [pc, #276]	; (8006854 <HAL_TIM_ConfigClockSource+0x194>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d070      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x166>
 8006744:	4a43      	ldr	r2, [pc, #268]	; (8006854 <HAL_TIM_ConfigClockSource+0x194>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d809      	bhi.n	800675e <HAL_TIM_ConfigClockSource+0x9e>
 800674a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800674e:	d027      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0xe0>
 8006750:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006754:	d067      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x166>
 8006756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675a:	d06d      	beq.n	8006838 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800675c:	e06d      	b.n	800683a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800675e:	4a3e      	ldr	r2, [pc, #248]	; (8006858 <HAL_TIM_ConfigClockSource+0x198>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d060      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x166>
 8006764:	4a3d      	ldr	r2, [pc, #244]	; (800685c <HAL_TIM_ConfigClockSource+0x19c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d05d      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x166>
 800676a:	4a3d      	ldr	r2, [pc, #244]	; (8006860 <HAL_TIM_ConfigClockSource+0x1a0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d05a      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8006770:	e063      	b.n	800683a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	6899      	ldr	r1, [r3, #8]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f000 fc99 	bl	80070b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006794:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	609a      	str	r2, [r3, #8]
      break;
 800679e:	e04c      	b.n	800683a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6899      	ldr	r1, [r3, #8]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f000 fc82 	bl	80070b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067c2:	609a      	str	r2, [r3, #8]
      break;
 80067c4:	e039      	b.n	800683a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f000 fbf4 	bl	8006fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2150      	movs	r1, #80	; 0x50
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fc4d 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 80067e4:	e029      	b.n	800683a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6859      	ldr	r1, [r3, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	461a      	mov	r2, r3
 80067f4:	f000 fc13 	bl	800701e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2160      	movs	r1, #96	; 0x60
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fc3d 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 8006804:	e019      	b.n	800683a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6859      	ldr	r1, [r3, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	461a      	mov	r2, r3
 8006814:	f000 fbd4 	bl	8006fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2140      	movs	r1, #64	; 0x40
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fc2d 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 8006824:	e009      	b.n	800683a <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f000 fc24 	bl	800707e <TIM_ITRx_SetConfig>
        break;
 8006836:	e000      	b.n	800683a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8006838:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	00100020 	.word	0x00100020
 8006858:	00100040 	.word	0x00100040
 800685c:	00100070 	.word	0x00100070
 8006860:	00100030 	.word	0x00100030

08006864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3c      	ldr	r2, [pc, #240]	; (80069b8 <TIM_Base_SetConfig+0x104>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00f      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d2:	d00b      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a39      	ldr	r2, [pc, #228]	; (80069bc <TIM_Base_SetConfig+0x108>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a38      	ldr	r2, [pc, #224]	; (80069c0 <TIM_Base_SetConfig+0x10c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a37      	ldr	r2, [pc, #220]	; (80069c4 <TIM_Base_SetConfig+0x110>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d108      	bne.n	80068fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2d      	ldr	r2, [pc, #180]	; (80069b8 <TIM_Base_SetConfig+0x104>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01b      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690c:	d017      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <TIM_Base_SetConfig+0x108>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <TIM_Base_SetConfig+0x10c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00f      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a28      	ldr	r2, [pc, #160]	; (80069c4 <TIM_Base_SetConfig+0x110>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00b      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a27      	ldr	r2, [pc, #156]	; (80069c8 <TIM_Base_SetConfig+0x114>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d007      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a26      	ldr	r2, [pc, #152]	; (80069cc <TIM_Base_SetConfig+0x118>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <TIM_Base_SetConfig+0x11c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d108      	bne.n	8006950 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a10      	ldr	r2, [pc, #64]	; (80069b8 <TIM_Base_SetConfig+0x104>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00f      	beq.n	800699c <TIM_Base_SetConfig+0xe8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a11      	ldr	r2, [pc, #68]	; (80069c4 <TIM_Base_SetConfig+0x110>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00b      	beq.n	800699c <TIM_Base_SetConfig+0xe8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a10      	ldr	r2, [pc, #64]	; (80069c8 <TIM_Base_SetConfig+0x114>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d007      	beq.n	800699c <TIM_Base_SetConfig+0xe8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a0f      	ldr	r2, [pc, #60]	; (80069cc <TIM_Base_SetConfig+0x118>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_Base_SetConfig+0xe8>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a0e      	ldr	r2, [pc, #56]	; (80069d0 <TIM_Base_SetConfig+0x11c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d103      	bne.n	80069a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	615a      	str	r2, [r3, #20]
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40013400 	.word	0x40013400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40014400 	.word	0x40014400
 80069d0:	40014800 	.word	0x40014800

080069d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f023 0302 	bic.w	r3, r3, #2
 8006a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a2c      	ldr	r2, [pc, #176]	; (8006ae0 <TIM_OC1_SetConfig+0x10c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00f      	beq.n	8006a54 <TIM_OC1_SetConfig+0x80>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a2b      	ldr	r2, [pc, #172]	; (8006ae4 <TIM_OC1_SetConfig+0x110>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00b      	beq.n	8006a54 <TIM_OC1_SetConfig+0x80>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ae8 <TIM_OC1_SetConfig+0x114>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <TIM_OC1_SetConfig+0x80>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a29      	ldr	r2, [pc, #164]	; (8006aec <TIM_OC1_SetConfig+0x118>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_OC1_SetConfig+0x80>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a28      	ldr	r2, [pc, #160]	; (8006af0 <TIM_OC1_SetConfig+0x11c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d10c      	bne.n	8006a6e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f023 0308 	bic.w	r3, r3, #8
 8006a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f023 0304 	bic.w	r3, r3, #4
 8006a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a1b      	ldr	r2, [pc, #108]	; (8006ae0 <TIM_OC1_SetConfig+0x10c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00f      	beq.n	8006a96 <TIM_OC1_SetConfig+0xc2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a1a      	ldr	r2, [pc, #104]	; (8006ae4 <TIM_OC1_SetConfig+0x110>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00b      	beq.n	8006a96 <TIM_OC1_SetConfig+0xc2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a19      	ldr	r2, [pc, #100]	; (8006ae8 <TIM_OC1_SetConfig+0x114>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d007      	beq.n	8006a96 <TIM_OC1_SetConfig+0xc2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a18      	ldr	r2, [pc, #96]	; (8006aec <TIM_OC1_SetConfig+0x118>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_OC1_SetConfig+0xc2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <TIM_OC1_SetConfig+0x11c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d111      	bne.n	8006aba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40012c00 	.word	0x40012c00
 8006ae4:	40013400 	.word	0x40013400
 8006ae8:	40014000 	.word	0x40014000
 8006aec:	40014400 	.word	0x40014400
 8006af0:	40014800 	.word	0x40014800

08006af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f023 0210 	bic.w	r2, r3, #16
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 0320 	bic.w	r3, r3, #32
 8006b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a28      	ldr	r2, [pc, #160]	; (8006bf4 <TIM_OC2_SetConfig+0x100>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_OC2_SetConfig+0x6c>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a27      	ldr	r2, [pc, #156]	; (8006bf8 <TIM_OC2_SetConfig+0x104>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10d      	bne.n	8006b7c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a1d      	ldr	r2, [pc, #116]	; (8006bf4 <TIM_OC2_SetConfig+0x100>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00f      	beq.n	8006ba4 <TIM_OC2_SetConfig+0xb0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <TIM_OC2_SetConfig+0x104>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00b      	beq.n	8006ba4 <TIM_OC2_SetConfig+0xb0>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <TIM_OC2_SetConfig+0x108>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d007      	beq.n	8006ba4 <TIM_OC2_SetConfig+0xb0>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <TIM_OC2_SetConfig+0x10c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_OC2_SetConfig+0xb0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <TIM_OC2_SetConfig+0x110>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d113      	bne.n	8006bcc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	621a      	str	r2, [r3, #32]
}
 8006be6:	bf00      	nop
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40012c00 	.word	0x40012c00
 8006bf8:	40013400 	.word	0x40013400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800

08006c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0303 	bic.w	r3, r3, #3
 8006c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <TIM_OC3_SetConfig+0xfc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d003      	beq.n	8006c72 <TIM_OC3_SetConfig+0x6a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a26      	ldr	r2, [pc, #152]	; (8006d08 <TIM_OC3_SetConfig+0x100>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d10d      	bne.n	8006c8e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	021b      	lsls	r3, r3, #8
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a1c      	ldr	r2, [pc, #112]	; (8006d04 <TIM_OC3_SetConfig+0xfc>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d00f      	beq.n	8006cb6 <TIM_OC3_SetConfig+0xae>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <TIM_OC3_SetConfig+0x100>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00b      	beq.n	8006cb6 <TIM_OC3_SetConfig+0xae>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a1a      	ldr	r2, [pc, #104]	; (8006d0c <TIM_OC3_SetConfig+0x104>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d007      	beq.n	8006cb6 <TIM_OC3_SetConfig+0xae>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a19      	ldr	r2, [pc, #100]	; (8006d10 <TIM_OC3_SetConfig+0x108>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_OC3_SetConfig+0xae>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <TIM_OC3_SetConfig+0x10c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d113      	bne.n	8006cde <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	621a      	str	r2, [r3, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40013400 	.word	0x40013400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40014400 	.word	0x40014400
 8006d14:	40014800 	.word	0x40014800

08006d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	031b      	lsls	r3, r3, #12
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a28      	ldr	r2, [pc, #160]	; (8006e18 <TIM_OC4_SetConfig+0x100>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC4_SetConfig+0x6c>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a27      	ldr	r2, [pc, #156]	; (8006e1c <TIM_OC4_SetConfig+0x104>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d10d      	bne.n	8006da0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	031b      	lsls	r3, r3, #12
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <TIM_OC4_SetConfig+0x100>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00f      	beq.n	8006dc8 <TIM_OC4_SetConfig+0xb0>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <TIM_OC4_SetConfig+0x104>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00b      	beq.n	8006dc8 <TIM_OC4_SetConfig+0xb0>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <TIM_OC4_SetConfig+0x108>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d007      	beq.n	8006dc8 <TIM_OC4_SetConfig+0xb0>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a1a      	ldr	r2, [pc, #104]	; (8006e24 <TIM_OC4_SetConfig+0x10c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC4_SetConfig+0xb0>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a19      	ldr	r2, [pc, #100]	; (8006e28 <TIM_OC4_SetConfig+0x110>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d113      	bne.n	8006df0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dd6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	019b      	lsls	r3, r3, #6
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	019b      	lsls	r3, r3, #6
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40013400 	.word	0x40013400
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800

08006e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	041b      	lsls	r3, r3, #16
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <TIM_OC5_SetConfig+0xb4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x7a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a16      	ldr	r2, [pc, #88]	; (8006ee4 <TIM_OC5_SetConfig+0xb8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00b      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x7a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <TIM_OC5_SetConfig+0xbc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x7a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a14      	ldr	r2, [pc, #80]	; (8006eec <TIM_OC5_SetConfig+0xc0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x7a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <TIM_OC5_SetConfig+0xc4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d109      	bne.n	8006eba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	621a      	str	r2, [r3, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40013400 	.word	0x40013400
 8006ee8:	40014000 	.word	0x40014000
 8006eec:	40014400 	.word	0x40014400
 8006ef0:	40014800 	.word	0x40014800

08006ef4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	051b      	lsls	r3, r3, #20
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a18      	ldr	r2, [pc, #96]	; (8006fac <TIM_OC6_SetConfig+0xb8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00f      	beq.n	8006f70 <TIM_OC6_SetConfig+0x7c>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a17      	ldr	r2, [pc, #92]	; (8006fb0 <TIM_OC6_SetConfig+0xbc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00b      	beq.n	8006f70 <TIM_OC6_SetConfig+0x7c>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <TIM_OC6_SetConfig+0xc0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_OC6_SetConfig+0x7c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <TIM_OC6_SetConfig+0xc4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC6_SetConfig+0x7c>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a14      	ldr	r2, [pc, #80]	; (8006fbc <TIM_OC6_SetConfig+0xc8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d109      	bne.n	8006f84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40013400 	.word	0x40013400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800

08006fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f023 0201 	bic.w	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	011b      	lsls	r3, r3, #4
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f023 030a 	bic.w	r3, r3, #10
 8006ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800701e:	b480      	push	{r7}
 8007020:	b087      	sub	sp, #28
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f023 0210 	bic.w	r2, r3, #16
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	031b      	lsls	r3, r3, #12
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800705a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800707e:	b480      	push	{r7}
 8007080:	b085      	sub	sp, #20
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	f043 0307 	orr.w	r3, r3, #7
 80070a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	609a      	str	r2, [r3, #8]
}
 80070ac:	bf00      	nop
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	021a      	lsls	r2, r3, #8
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	431a      	orrs	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4313      	orrs	r3, r2
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	609a      	str	r2, [r3, #8]
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2201      	movs	r2, #1
 800710c:	fa02 f303 	lsl.w	r3, r2, r3
 8007110:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	43db      	mvns	r3, r3
 800711a:	401a      	ands	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a1a      	ldr	r2, [r3, #32]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f003 031f 	and.w	r3, r3, #31
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	fa01 f303 	lsl.w	r3, r1, r3
 8007130:	431a      	orrs	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	621a      	str	r2, [r3, #32]
}
 8007136:	bf00      	nop
 8007138:	371c      	adds	r7, #28
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
	...

08007144 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d109      	bne.n	8007168 <HAL_TIMEx_PWMN_Start+0x24>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b01      	cmp	r3, #1
 800715e:	bf14      	ite	ne
 8007160:	2301      	movne	r3, #1
 8007162:	2300      	moveq	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	e022      	b.n	80071ae <HAL_TIMEx_PWMN_Start+0x6a>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b04      	cmp	r3, #4
 800716c:	d109      	bne.n	8007182 <HAL_TIMEx_PWMN_Start+0x3e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b01      	cmp	r3, #1
 8007178:	bf14      	ite	ne
 800717a:	2301      	movne	r3, #1
 800717c:	2300      	moveq	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	e015      	b.n	80071ae <HAL_TIMEx_PWMN_Start+0x6a>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b08      	cmp	r3, #8
 8007186:	d109      	bne.n	800719c <HAL_TIMEx_PWMN_Start+0x58>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b01      	cmp	r3, #1
 8007192:	bf14      	ite	ne
 8007194:	2301      	movne	r3, #1
 8007196:	2300      	moveq	r3, #0
 8007198:	b2db      	uxtb	r3, r3
 800719a:	e008      	b.n	80071ae <HAL_TIMEx_PWMN_Start+0x6a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	bf14      	ite	ne
 80071a8:	2301      	movne	r3, #1
 80071aa:	2300      	moveq	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e069      	b.n	800728a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d104      	bne.n	80071c6 <HAL_TIMEx_PWMN_Start+0x82>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071c4:	e013      	b.n	80071ee <HAL_TIMEx_PWMN_Start+0xaa>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d104      	bne.n	80071d6 <HAL_TIMEx_PWMN_Start+0x92>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071d4:	e00b      	b.n	80071ee <HAL_TIMEx_PWMN_Start+0xaa>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d104      	bne.n	80071e6 <HAL_TIMEx_PWMN_Start+0xa2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071e4:	e003      	b.n	80071ee <HAL_TIMEx_PWMN_Start+0xaa>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2204      	movs	r2, #4
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 f9c0 	bl	800757c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800720a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a20      	ldr	r2, [pc, #128]	; (8007294 <HAL_TIMEx_PWMN_Start+0x150>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d018      	beq.n	8007248 <HAL_TIMEx_PWMN_Start+0x104>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721e:	d013      	beq.n	8007248 <HAL_TIMEx_PWMN_Start+0x104>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a1c      	ldr	r2, [pc, #112]	; (8007298 <HAL_TIMEx_PWMN_Start+0x154>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00e      	beq.n	8007248 <HAL_TIMEx_PWMN_Start+0x104>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a1b      	ldr	r2, [pc, #108]	; (800729c <HAL_TIMEx_PWMN_Start+0x158>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d009      	beq.n	8007248 <HAL_TIMEx_PWMN_Start+0x104>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a19      	ldr	r2, [pc, #100]	; (80072a0 <HAL_TIMEx_PWMN_Start+0x15c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_TIMEx_PWMN_Start+0x104>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <HAL_TIMEx_PWMN_Start+0x160>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d115      	bne.n	8007274 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	4b16      	ldr	r3, [pc, #88]	; (80072a8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007250:	4013      	ands	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b06      	cmp	r3, #6
 8007258:	d015      	beq.n	8007286 <HAL_TIMEx_PWMN_Start+0x142>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007260:	d011      	beq.n	8007286 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f042 0201 	orr.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007272:	e008      	b.n	8007286 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	e000      	b.n	8007288 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007286:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	40012c00 	.word	0x40012c00
 8007298:	40000400 	.word	0x40000400
 800729c:	40000800 	.word	0x40000800
 80072a0:	40013400 	.word	0x40013400
 80072a4:	40014000 	.word	0x40014000
 80072a8:	00010007 	.word	0x00010007

080072ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e065      	b.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a2c      	ldr	r2, [pc, #176]	; (800739c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d004      	beq.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a2b      	ldr	r2, [pc, #172]	; (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d108      	bne.n	800730a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007314:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1b      	ldr	r2, [pc, #108]	; (800739c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d018      	beq.n	8007364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733a:	d013      	beq.n	8007364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a18      	ldr	r2, [pc, #96]	; (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d00e      	beq.n	8007364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a17      	ldr	r2, [pc, #92]	; (80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d009      	beq.n	8007364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a12      	ldr	r2, [pc, #72]	; (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a13      	ldr	r2, [pc, #76]	; (80073ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10c      	bne.n	800737e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800736a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	4313      	orrs	r3, r2
 8007374:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40012c00 	.word	0x40012c00
 80073a0:	40013400 	.word	0x40013400
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800
 80073ac:	40014000 	.word	0x40014000

080073b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e087      	b.n	80074dc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	4313      	orrs	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	041b      	lsls	r3, r3, #16
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a27      	ldr	r2, [pc, #156]	; (80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d004      	beq.n	800745a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a25      	ldr	r2, [pc, #148]	; (80074ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d106      	bne.n	8007468 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d004      	beq.n	800747c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1d      	ldr	r2, [pc, #116]	; (80074ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d126      	bne.n	80074ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	051b      	lsls	r3, r3, #20
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a0e      	ldr	r2, [pc, #56]	; (80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a0d      	ldr	r2, [pc, #52]	; (80074ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d106      	bne.n	80074ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40013400 	.word	0x40013400

080074f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2204      	movs	r2, #4
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1a      	ldr	r2, [r3, #32]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	43db      	mvns	r3, r3
 800759e:	401a      	ands	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a1a      	ldr	r2, [r3, #32]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	fa01 f303 	lsl.w	r3, r1, r3
 80075b4:	431a      	orrs	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	621a      	str	r2, [r3, #32]
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e042      	b.n	800765e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fa f98e 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2224      	movs	r2, #36	; 0x24
 80075f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0201 	bic.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f82d 	bl	8007668 <UART_SetConfig>
 800760e:	4603      	mov	r3, r0
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e022      	b.n	800765e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fac9 	bl	8007bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007634:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007644:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f042 0201 	orr.w	r2, r2, #1
 8007654:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fb50 	bl	8007cfc <UART_CheckIdleState>
 800765c:	4603      	mov	r3, r0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007668:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800766c:	b088      	sub	sp, #32
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	4313      	orrs	r3, r2
 800768c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	4313      	orrs	r3, r2
 8007696:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	4bb0      	ldr	r3, [pc, #704]	; (8007960 <UART_SetConfig+0x2f8>)
 80076a0:	4013      	ands	r3, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6812      	ldr	r2, [r2, #0]
 80076a6:	69f9      	ldr	r1, [r7, #28]
 80076a8:	430b      	orrs	r3, r1
 80076aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4aa5      	ldr	r2, [pc, #660]	; (8007964 <UART_SetConfig+0x2fc>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d004      	beq.n	80076dc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	4313      	orrs	r3, r2
 80076da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80076e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	69f9      	ldr	r1, [r7, #28]
 80076f0:	430b      	orrs	r3, r1
 80076f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	f023 010f 	bic.w	r1, r3, #15
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a96      	ldr	r2, [pc, #600]	; (8007968 <UART_SetConfig+0x300>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d121      	bne.n	8007758 <UART_SetConfig+0xf0>
 8007714:	4b95      	ldr	r3, [pc, #596]	; (800796c <UART_SetConfig+0x304>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	2b03      	cmp	r3, #3
 8007720:	d816      	bhi.n	8007750 <UART_SetConfig+0xe8>
 8007722:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <UART_SetConfig+0xc0>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	08007739 	.word	0x08007739
 800772c:	08007745 	.word	0x08007745
 8007730:	0800773f 	.word	0x0800773f
 8007734:	0800774b 	.word	0x0800774b
 8007738:	2301      	movs	r3, #1
 800773a:	76fb      	strb	r3, [r7, #27]
 800773c:	e0be      	b.n	80078bc <UART_SetConfig+0x254>
 800773e:	2302      	movs	r3, #2
 8007740:	76fb      	strb	r3, [r7, #27]
 8007742:	e0bb      	b.n	80078bc <UART_SetConfig+0x254>
 8007744:	2304      	movs	r3, #4
 8007746:	76fb      	strb	r3, [r7, #27]
 8007748:	e0b8      	b.n	80078bc <UART_SetConfig+0x254>
 800774a:	2308      	movs	r3, #8
 800774c:	76fb      	strb	r3, [r7, #27]
 800774e:	e0b5      	b.n	80078bc <UART_SetConfig+0x254>
 8007750:	2310      	movs	r3, #16
 8007752:	76fb      	strb	r3, [r7, #27]
 8007754:	bf00      	nop
 8007756:	e0b1      	b.n	80078bc <UART_SetConfig+0x254>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a84      	ldr	r2, [pc, #528]	; (8007970 <UART_SetConfig+0x308>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d134      	bne.n	80077cc <UART_SetConfig+0x164>
 8007762:	4b82      	ldr	r3, [pc, #520]	; (800796c <UART_SetConfig+0x304>)
 8007764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007768:	f003 030c 	and.w	r3, r3, #12
 800776c:	2b0c      	cmp	r3, #12
 800776e:	d829      	bhi.n	80077c4 <UART_SetConfig+0x15c>
 8007770:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <UART_SetConfig+0x110>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	080077ad 	.word	0x080077ad
 800777c:	080077c5 	.word	0x080077c5
 8007780:	080077c5 	.word	0x080077c5
 8007784:	080077c5 	.word	0x080077c5
 8007788:	080077b9 	.word	0x080077b9
 800778c:	080077c5 	.word	0x080077c5
 8007790:	080077c5 	.word	0x080077c5
 8007794:	080077c5 	.word	0x080077c5
 8007798:	080077b3 	.word	0x080077b3
 800779c:	080077c5 	.word	0x080077c5
 80077a0:	080077c5 	.word	0x080077c5
 80077a4:	080077c5 	.word	0x080077c5
 80077a8:	080077bf 	.word	0x080077bf
 80077ac:	2300      	movs	r3, #0
 80077ae:	76fb      	strb	r3, [r7, #27]
 80077b0:	e084      	b.n	80078bc <UART_SetConfig+0x254>
 80077b2:	2302      	movs	r3, #2
 80077b4:	76fb      	strb	r3, [r7, #27]
 80077b6:	e081      	b.n	80078bc <UART_SetConfig+0x254>
 80077b8:	2304      	movs	r3, #4
 80077ba:	76fb      	strb	r3, [r7, #27]
 80077bc:	e07e      	b.n	80078bc <UART_SetConfig+0x254>
 80077be:	2308      	movs	r3, #8
 80077c0:	76fb      	strb	r3, [r7, #27]
 80077c2:	e07b      	b.n	80078bc <UART_SetConfig+0x254>
 80077c4:	2310      	movs	r3, #16
 80077c6:	76fb      	strb	r3, [r7, #27]
 80077c8:	bf00      	nop
 80077ca:	e077      	b.n	80078bc <UART_SetConfig+0x254>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a68      	ldr	r2, [pc, #416]	; (8007974 <UART_SetConfig+0x30c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d120      	bne.n	8007818 <UART_SetConfig+0x1b0>
 80077d6:	4b65      	ldr	r3, [pc, #404]	; (800796c <UART_SetConfig+0x304>)
 80077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077e0:	2b10      	cmp	r3, #16
 80077e2:	d00f      	beq.n	8007804 <UART_SetConfig+0x19c>
 80077e4:	2b10      	cmp	r3, #16
 80077e6:	d802      	bhi.n	80077ee <UART_SetConfig+0x186>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <UART_SetConfig+0x190>
 80077ec:	e010      	b.n	8007810 <UART_SetConfig+0x1a8>
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	d005      	beq.n	80077fe <UART_SetConfig+0x196>
 80077f2:	2b30      	cmp	r3, #48	; 0x30
 80077f4:	d009      	beq.n	800780a <UART_SetConfig+0x1a2>
 80077f6:	e00b      	b.n	8007810 <UART_SetConfig+0x1a8>
 80077f8:	2300      	movs	r3, #0
 80077fa:	76fb      	strb	r3, [r7, #27]
 80077fc:	e05e      	b.n	80078bc <UART_SetConfig+0x254>
 80077fe:	2302      	movs	r3, #2
 8007800:	76fb      	strb	r3, [r7, #27]
 8007802:	e05b      	b.n	80078bc <UART_SetConfig+0x254>
 8007804:	2304      	movs	r3, #4
 8007806:	76fb      	strb	r3, [r7, #27]
 8007808:	e058      	b.n	80078bc <UART_SetConfig+0x254>
 800780a:	2308      	movs	r3, #8
 800780c:	76fb      	strb	r3, [r7, #27]
 800780e:	e055      	b.n	80078bc <UART_SetConfig+0x254>
 8007810:	2310      	movs	r3, #16
 8007812:	76fb      	strb	r3, [r7, #27]
 8007814:	bf00      	nop
 8007816:	e051      	b.n	80078bc <UART_SetConfig+0x254>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a56      	ldr	r2, [pc, #344]	; (8007978 <UART_SetConfig+0x310>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d120      	bne.n	8007864 <UART_SetConfig+0x1fc>
 8007822:	4b52      	ldr	r3, [pc, #328]	; (800796c <UART_SetConfig+0x304>)
 8007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007828:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800782c:	2b40      	cmp	r3, #64	; 0x40
 800782e:	d00f      	beq.n	8007850 <UART_SetConfig+0x1e8>
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	d802      	bhi.n	800783a <UART_SetConfig+0x1d2>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <UART_SetConfig+0x1dc>
 8007838:	e010      	b.n	800785c <UART_SetConfig+0x1f4>
 800783a:	2b80      	cmp	r3, #128	; 0x80
 800783c:	d005      	beq.n	800784a <UART_SetConfig+0x1e2>
 800783e:	2bc0      	cmp	r3, #192	; 0xc0
 8007840:	d009      	beq.n	8007856 <UART_SetConfig+0x1ee>
 8007842:	e00b      	b.n	800785c <UART_SetConfig+0x1f4>
 8007844:	2300      	movs	r3, #0
 8007846:	76fb      	strb	r3, [r7, #27]
 8007848:	e038      	b.n	80078bc <UART_SetConfig+0x254>
 800784a:	2302      	movs	r3, #2
 800784c:	76fb      	strb	r3, [r7, #27]
 800784e:	e035      	b.n	80078bc <UART_SetConfig+0x254>
 8007850:	2304      	movs	r3, #4
 8007852:	76fb      	strb	r3, [r7, #27]
 8007854:	e032      	b.n	80078bc <UART_SetConfig+0x254>
 8007856:	2308      	movs	r3, #8
 8007858:	76fb      	strb	r3, [r7, #27]
 800785a:	e02f      	b.n	80078bc <UART_SetConfig+0x254>
 800785c:	2310      	movs	r3, #16
 800785e:	76fb      	strb	r3, [r7, #27]
 8007860:	bf00      	nop
 8007862:	e02b      	b.n	80078bc <UART_SetConfig+0x254>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a3e      	ldr	r2, [pc, #248]	; (8007964 <UART_SetConfig+0x2fc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d124      	bne.n	80078b8 <UART_SetConfig+0x250>
 800786e:	4b3f      	ldr	r3, [pc, #252]	; (800796c <UART_SetConfig+0x304>)
 8007870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007874:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800787c:	d012      	beq.n	80078a4 <UART_SetConfig+0x23c>
 800787e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007882:	d802      	bhi.n	800788a <UART_SetConfig+0x222>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d007      	beq.n	8007898 <UART_SetConfig+0x230>
 8007888:	e012      	b.n	80078b0 <UART_SetConfig+0x248>
 800788a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800788e:	d006      	beq.n	800789e <UART_SetConfig+0x236>
 8007890:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007894:	d009      	beq.n	80078aa <UART_SetConfig+0x242>
 8007896:	e00b      	b.n	80078b0 <UART_SetConfig+0x248>
 8007898:	2300      	movs	r3, #0
 800789a:	76fb      	strb	r3, [r7, #27]
 800789c:	e00e      	b.n	80078bc <UART_SetConfig+0x254>
 800789e:	2302      	movs	r3, #2
 80078a0:	76fb      	strb	r3, [r7, #27]
 80078a2:	e00b      	b.n	80078bc <UART_SetConfig+0x254>
 80078a4:	2304      	movs	r3, #4
 80078a6:	76fb      	strb	r3, [r7, #27]
 80078a8:	e008      	b.n	80078bc <UART_SetConfig+0x254>
 80078aa:	2308      	movs	r3, #8
 80078ac:	76fb      	strb	r3, [r7, #27]
 80078ae:	e005      	b.n	80078bc <UART_SetConfig+0x254>
 80078b0:	2310      	movs	r3, #16
 80078b2:	76fb      	strb	r3, [r7, #27]
 80078b4:	bf00      	nop
 80078b6:	e001      	b.n	80078bc <UART_SetConfig+0x254>
 80078b8:	2310      	movs	r3, #16
 80078ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a28      	ldr	r2, [pc, #160]	; (8007964 <UART_SetConfig+0x2fc>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	f040 80a1 	bne.w	8007a0a <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078c8:	7efb      	ldrb	r3, [r7, #27]
 80078ca:	2b08      	cmp	r3, #8
 80078cc:	d823      	bhi.n	8007916 <UART_SetConfig+0x2ae>
 80078ce:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <UART_SetConfig+0x26c>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007917 	.word	0x08007917
 80078dc:	08007901 	.word	0x08007901
 80078e0:	08007917 	.word	0x08007917
 80078e4:	08007907 	.word	0x08007907
 80078e8:	08007917 	.word	0x08007917
 80078ec:	08007917 	.word	0x08007917
 80078f0:	08007917 	.word	0x08007917
 80078f4:	0800790f 	.word	0x0800790f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f8:	f7fc ffb8 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 80078fc:	6178      	str	r0, [r7, #20]
        break;
 80078fe:	e00f      	b.n	8007920 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007900:	4b1e      	ldr	r3, [pc, #120]	; (800797c <UART_SetConfig+0x314>)
 8007902:	617b      	str	r3, [r7, #20]
        break;
 8007904:	e00c      	b.n	8007920 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007906:	f7fc ff43 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800790a:	6178      	str	r0, [r7, #20]
        break;
 800790c:	e008      	b.n	8007920 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800790e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007912:	617b      	str	r3, [r7, #20]
        break;
 8007914:	e004      	b.n	8007920 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	76bb      	strb	r3, [r7, #26]
        break;
 800791e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 8130 	beq.w	8007b88 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	4a14      	ldr	r2, [pc, #80]	; (8007980 <UART_SetConfig+0x318>)
 800792e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007932:	461a      	mov	r2, r3
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	fbb3 f3f2 	udiv	r3, r3, r2
 800793a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	4613      	mov	r3, r2
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	4413      	add	r3, r2
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	429a      	cmp	r2, r3
 800794a:	d305      	bcc.n	8007958 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	429a      	cmp	r2, r3
 8007956:	d915      	bls.n	8007984 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	76bb      	strb	r3, [r7, #26]
 800795c:	e114      	b.n	8007b88 <UART_SetConfig+0x520>
 800795e:	bf00      	nop
 8007960:	cfff69f3 	.word	0xcfff69f3
 8007964:	40008000 	.word	0x40008000
 8007968:	40013800 	.word	0x40013800
 800796c:	40021000 	.word	0x40021000
 8007970:	40004400 	.word	0x40004400
 8007974:	40004800 	.word	0x40004800
 8007978:	40004c00 	.word	0x40004c00
 800797c:	00f42400 	.word	0x00f42400
 8007980:	0800cf44 	.word	0x0800cf44
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	4618      	mov	r0, r3
 8007988:	f04f 0100 	mov.w	r1, #0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	4a87      	ldr	r2, [pc, #540]	; (8007bb0 <UART_SetConfig+0x548>)
 8007992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f04f 0400 	mov.w	r4, #0
 800799c:	461a      	mov	r2, r3
 800799e:	4623      	mov	r3, r4
 80079a0:	f7f9 f858 	bl	8000a54 <__aeabi_uldivmod>
 80079a4:	4603      	mov	r3, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	4619      	mov	r1, r3
 80079aa:	4622      	mov	r2, r4
 80079ac:	f04f 0300 	mov.w	r3, #0
 80079b0:	f04f 0400 	mov.w	r4, #0
 80079b4:	0214      	lsls	r4, r2, #8
 80079b6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80079ba:	020b      	lsls	r3, r1, #8
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6852      	ldr	r2, [r2, #4]
 80079c0:	0852      	lsrs	r2, r2, #1
 80079c2:	4611      	mov	r1, r2
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	eb13 0b01 	adds.w	fp, r3, r1
 80079cc:	eb44 0c02 	adc.w	ip, r4, r2
 80079d0:	4658      	mov	r0, fp
 80079d2:	4661      	mov	r1, ip
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f04f 0400 	mov.w	r4, #0
 80079dc:	461a      	mov	r2, r3
 80079de:	4623      	mov	r3, r4
 80079e0:	f7f9 f838 	bl	8000a54 <__aeabi_uldivmod>
 80079e4:	4603      	mov	r3, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079f0:	d308      	bcc.n	8007a04 <UART_SetConfig+0x39c>
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079f8:	d204      	bcs.n	8007a04 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	60da      	str	r2, [r3, #12]
 8007a02:	e0c1      	b.n	8007b88 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	76bb      	strb	r3, [r7, #26]
 8007a08:	e0be      	b.n	8007b88 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a12:	d164      	bne.n	8007ade <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8007a14:	7efb      	ldrb	r3, [r7, #27]
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d827      	bhi.n	8007a6a <UART_SetConfig+0x402>
 8007a1a:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <UART_SetConfig+0x3b8>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007a45 	.word	0x08007a45
 8007a24:	08007a4d 	.word	0x08007a4d
 8007a28:	08007a55 	.word	0x08007a55
 8007a2c:	08007a6b 	.word	0x08007a6b
 8007a30:	08007a5b 	.word	0x08007a5b
 8007a34:	08007a6b 	.word	0x08007a6b
 8007a38:	08007a6b 	.word	0x08007a6b
 8007a3c:	08007a6b 	.word	0x08007a6b
 8007a40:	08007a63 	.word	0x08007a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a44:	f7fc ff12 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8007a48:	6178      	str	r0, [r7, #20]
        break;
 8007a4a:	e013      	b.n	8007a74 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a4c:	f7fc ff24 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 8007a50:	6178      	str	r0, [r7, #20]
        break;
 8007a52:	e00f      	b.n	8007a74 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a54:	4b57      	ldr	r3, [pc, #348]	; (8007bb4 <UART_SetConfig+0x54c>)
 8007a56:	617b      	str	r3, [r7, #20]
        break;
 8007a58:	e00c      	b.n	8007a74 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a5a:	f7fc fe99 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8007a5e:	6178      	str	r0, [r7, #20]
        break;
 8007a60:	e008      	b.n	8007a74 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a66:	617b      	str	r3, [r7, #20]
        break;
 8007a68:	e004      	b.n	8007a74 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	76bb      	strb	r3, [r7, #26]
        break;
 8007a72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8086 	beq.w	8007b88 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	4a4b      	ldr	r2, [pc, #300]	; (8007bb0 <UART_SetConfig+0x548>)
 8007a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a86:	461a      	mov	r2, r3
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a8e:	005a      	lsls	r2, r3, #1
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	085b      	lsrs	r3, r3, #1
 8007a96:	441a      	add	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d916      	bls.n	8007ad8 <UART_SetConfig+0x470>
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab0:	d212      	bcs.n	8007ad8 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	f023 030f 	bic.w	r3, r3, #15
 8007aba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	085b      	lsrs	r3, r3, #1
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	89fa      	ldrh	r2, [r7, #14]
 8007ad4:	60da      	str	r2, [r3, #12]
 8007ad6:	e057      	b.n	8007b88 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	76bb      	strb	r3, [r7, #26]
 8007adc:	e054      	b.n	8007b88 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ade:	7efb      	ldrb	r3, [r7, #27]
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d828      	bhi.n	8007b36 <UART_SetConfig+0x4ce>
 8007ae4:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <UART_SetConfig+0x484>)
 8007ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aea:	bf00      	nop
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b19 	.word	0x08007b19
 8007af4:	08007b21 	.word	0x08007b21
 8007af8:	08007b37 	.word	0x08007b37
 8007afc:	08007b27 	.word	0x08007b27
 8007b00:	08007b37 	.word	0x08007b37
 8007b04:	08007b37 	.word	0x08007b37
 8007b08:	08007b37 	.word	0x08007b37
 8007b0c:	08007b2f 	.word	0x08007b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b10:	f7fc feac 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8007b14:	6178      	str	r0, [r7, #20]
        break;
 8007b16:	e013      	b.n	8007b40 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b18:	f7fc febe 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 8007b1c:	6178      	str	r0, [r7, #20]
        break;
 8007b1e:	e00f      	b.n	8007b40 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b20:	4b24      	ldr	r3, [pc, #144]	; (8007bb4 <UART_SetConfig+0x54c>)
 8007b22:	617b      	str	r3, [r7, #20]
        break;
 8007b24:	e00c      	b.n	8007b40 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b26:	f7fc fe33 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8007b2a:	6178      	str	r0, [r7, #20]
        break;
 8007b2c:	e008      	b.n	8007b40 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b32:	617b      	str	r3, [r7, #20]
        break;
 8007b34:	e004      	b.n	8007b40 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	76bb      	strb	r3, [r7, #26]
        break;
 8007b3e:	bf00      	nop
    }

    if (pclk != 0U)
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d020      	beq.n	8007b88 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	4a19      	ldr	r2, [pc, #100]	; (8007bb0 <UART_SetConfig+0x548>)
 8007b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b50:	461a      	mov	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	085b      	lsrs	r3, r3, #1
 8007b5e:	441a      	add	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b0f      	cmp	r3, #15
 8007b70:	d908      	bls.n	8007b84 <UART_SetConfig+0x51c>
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b78:	d204      	bcs.n	8007b84 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	60da      	str	r2, [r3, #12]
 8007b82:	e001      	b.n	8007b88 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007ba4:	7ebb      	ldrb	r3, [r7, #26]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3720      	adds	r7, #32
 8007baa:	46bd      	mov	sp, r7
 8007bac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007bb0:	0800cf44 	.word	0x0800cf44
 8007bb4:	00f42400 	.word	0x00f42400

08007bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01a      	beq.n	8007cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb6:	d10a      	bne.n	8007cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	605a      	str	r2, [r3, #4]
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d0c:	f7f9 ff1e 	bl	8001b4c <HAL_GetTick>
 8007d10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d10e      	bne.n	8007d3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f82c 	bl	8007d8c <UART_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e022      	b.n	8007d84 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d10e      	bne.n	8007d6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f816 	bl	8007d8c <UART_WaitOnFlagUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e00c      	b.n	8007d84 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d9c:	e062      	b.n	8007e64 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d05e      	beq.n	8007e64 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da6:	f7f9 fed1 	bl	8001b4c <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d302      	bcc.n	8007dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d11d      	bne.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 0201 	bic.w	r2, r2, #1
 8007dda:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e045      	b.n	8007e84 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d02e      	beq.n	8007e64 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e14:	d126      	bne.n	8007e64 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e2e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0201 	bic.w	r2, r2, #1
 8007e3e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e00f      	b.n	8007e84 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69da      	ldr	r2, [r3, #28]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	bf0c      	ite	eq
 8007e74:	2301      	moveq	r3, #1
 8007e76:	2300      	movne	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d08d      	beq.n	8007d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e027      	b.n	8007ef2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2224      	movs	r2, #36	; 0x24
 8007eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0201 	bic.w	r2, r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ed0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d101      	bne.n	8007f16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f12:	2302      	movs	r3, #2
 8007f14:	e02d      	b.n	8007f72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2224      	movs	r2, #36	; 0x24
 8007f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0201 	bic.w	r2, r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f850 	bl	8007ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d101      	bne.n	8007f92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e02d      	b.n	8007fee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2224      	movs	r2, #36	; 0x24
 8007f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 0201 	bic.w	r2, r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f812 	bl	8007ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b089      	sub	sp, #36	; 0x24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008000:	4a2f      	ldr	r2, [pc, #188]	; (80080c0 <UARTEx_SetNbDataToProcess+0xc8>)
 8008002:	f107 0314 	add.w	r3, r7, #20
 8008006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800800a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800800e:	4a2d      	ldr	r2, [pc, #180]	; (80080c4 <UARTEx_SetNbDataToProcess+0xcc>)
 8008010:	f107 030c 	add.w	r3, r7, #12
 8008014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008018:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008020:	2b00      	cmp	r3, #0
 8008022:	d108      	bne.n	8008036 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008034:	e03d      	b.n	80080b2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008036:	2308      	movs	r3, #8
 8008038:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800803a:	2308      	movs	r3, #8
 800803c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	0e5b      	lsrs	r3, r3, #25
 8008046:	b2db      	uxtb	r3, r3
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	0f5b      	lsrs	r3, r3, #29
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800805e:	7fbb      	ldrb	r3, [r7, #30]
 8008060:	7f3a      	ldrb	r2, [r7, #28]
 8008062:	f107 0120 	add.w	r1, r7, #32
 8008066:	440a      	add	r2, r1
 8008068:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800806c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008070:	7f3a      	ldrb	r2, [r7, #28]
 8008072:	f107 0120 	add.w	r1, r7, #32
 8008076:	440a      	add	r2, r1
 8008078:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800807c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008080:	b29a      	uxth	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008088:	7ffb      	ldrb	r3, [r7, #31]
 800808a:	7f7a      	ldrb	r2, [r7, #29]
 800808c:	f107 0120 	add.w	r1, r7, #32
 8008090:	440a      	add	r2, r1
 8008092:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008096:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800809a:	7f7a      	ldrb	r2, [r7, #29]
 800809c:	f107 0120 	add.w	r1, r7, #32
 80080a0:	440a      	add	r2, r1
 80080a2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080b2:	bf00      	nop
 80080b4:	3724      	adds	r7, #36	; 0x24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	0800ce24 	.word	0x0800ce24
 80080c4:	0800ce2c 	.word	0x0800ce2c

080080c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080d8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80080dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080fe:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008102:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800810a:	b29a      	uxth	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	b29b      	uxth	r3, r3
 8008110:	43db      	mvns	r3, r3
 8008112:	b29b      	uxth	r3, r3
 8008114:	4013      	ands	r3, r2
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800812c:	b084      	sub	sp, #16
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	f107 0014 	add.w	r0, r7, #20
 800813a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	b004      	add	sp, #16
 800816c:	4770      	bx	lr
	...

08008170 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008170:	b480      	push	{r7}
 8008172:	b09b      	sub	sp, #108	; 0x6c
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008196:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	78db      	ldrb	r3, [r3, #3]
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d81f      	bhi.n	80081e2 <USB_ActivateEndpoint+0x72>
 80081a2:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <USB_ActivateEndpoint+0x38>)
 80081a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a8:	080081b9 	.word	0x080081b9
 80081ac:	080081d5 	.word	0x080081d5
 80081b0:	080081eb 	.word	0x080081eb
 80081b4:	080081c7 	.word	0x080081c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80081b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80081c4:	e012      	b.n	80081ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80081c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80081ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80081d2:	e00b      	b.n	80081ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80081d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80081e0:	e004      	b.n	80081ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80081e8:	e000      	b.n	80081ec <USB_ActivateEndpoint+0x7c>
      break;
 80081ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	441a      	add	r2, r3
 80081f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820a:	b29b      	uxth	r3, r3
 800820c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	b21b      	sxth	r3, r3
 800821e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008226:	b21a      	sxth	r2, r3
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	b21b      	sxth	r3, r3
 800822e:	4313      	orrs	r3, r2
 8008230:	b21b      	sxth	r3, r3
 8008232:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	441a      	add	r2, r3
 8008240:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800824c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008254:	b29b      	uxth	r3, r3
 8008256:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	7b1b      	ldrb	r3, [r3, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f040 8149 	bne.w	80084f4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 8084 	beq.w	8008374 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008276:	b29b      	uxth	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	4413      	add	r3, r2
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	00da      	lsls	r2, r3, #3
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	88db      	ldrh	r3, [r3, #6]
 8008294:	085b      	lsrs	r3, r3, #1
 8008296:	b29b      	uxth	r3, r3
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	81fb      	strh	r3, [r7, #14]
 80082ae:	89fb      	ldrh	r3, [r7, #14]
 80082b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01b      	beq.n	80082f0 <USB_ActivateEndpoint+0x180>
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ce:	81bb      	strh	r3, [r7, #12]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	441a      	add	r2, r3
 80082da:	89bb      	ldrh	r3, [r7, #12]
 80082dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	78db      	ldrb	r3, [r3, #3]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d020      	beq.n	800833a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800830a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830e:	813b      	strh	r3, [r7, #8]
 8008310:	893b      	ldrh	r3, [r7, #8]
 8008312:	f083 0320 	eor.w	r3, r3, #32
 8008316:	813b      	strh	r3, [r7, #8]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	441a      	add	r2, r3
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800832c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008334:	b29b      	uxth	r3, r3
 8008336:	8013      	strh	r3, [r2, #0]
 8008338:	e27f      	b.n	800883a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008350:	817b      	strh	r3, [r7, #10]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	441a      	add	r2, r3
 800835c:	897b      	ldrh	r3, [r7, #10]
 800835e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836e:	b29b      	uxth	r3, r3
 8008370:	8013      	strh	r3, [r2, #0]
 8008372:	e262      	b.n	800883a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800837e:	b29b      	uxth	r3, r3
 8008380:	461a      	mov	r2, r3
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	4413      	add	r3, r2
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	00da      	lsls	r2, r3, #3
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	4413      	add	r3, r2
 8008392:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	88db      	ldrh	r3, [r3, #6]
 800839c:	085b      	lsrs	r3, r3, #1
 800839e:	b29b      	uxth	r3, r3
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	4413      	add	r3, r2
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	00da      	lsls	r2, r3, #3
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	4413      	add	r3, r2
 80083c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083ca:	623b      	str	r3, [r7, #32]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d112      	bne.n	80083fa <USB_ActivateEndpoint+0x28a>
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083de:	b29a      	uxth	r2, r3
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	801a      	strh	r2, [r3, #0]
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	801a      	strh	r2, [r3, #0]
 80083f8:	e02f      	b.n	800845a <USB_ActivateEndpoint+0x2ea>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008400:	d813      	bhi.n	800842a <USB_ActivateEndpoint+0x2ba>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	663b      	str	r3, [r7, #96]	; 0x60
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <USB_ActivateEndpoint+0x2ac>
 8008416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008418:	3301      	adds	r3, #1
 800841a:	663b      	str	r3, [r7, #96]	; 0x60
 800841c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800841e:	b29b      	uxth	r3, r3
 8008420:	029b      	lsls	r3, r3, #10
 8008422:	b29a      	uxth	r2, r3
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	e017      	b.n	800845a <USB_ActivateEndpoint+0x2ea>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	095b      	lsrs	r3, r3, #5
 8008430:	663b      	str	r3, [r7, #96]	; 0x60
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 031f 	and.w	r3, r3, #31
 800843a:	2b00      	cmp	r3, #0
 800843c:	d102      	bne.n	8008444 <USB_ActivateEndpoint+0x2d4>
 800843e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008440:	3b01      	subs	r3, #1
 8008442:	663b      	str	r3, [r7, #96]	; 0x60
 8008444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008446:	b29b      	uxth	r3, r3
 8008448:	029b      	lsls	r3, r3, #10
 800844a:	b29b      	uxth	r3, r3
 800844c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008454:	b29a      	uxth	r2, r3
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	83fb      	strh	r3, [r7, #30]
 8008468:	8bfb      	ldrh	r3, [r7, #30]
 800846a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d01b      	beq.n	80084aa <USB_ActivateEndpoint+0x33a>
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008488:	83bb      	strh	r3, [r7, #28]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	441a      	add	r2, r3
 8008494:	8bbb      	ldrh	r3, [r7, #28]
 8008496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800849e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c0:	837b      	strh	r3, [r7, #26]
 80084c2:	8b7b      	ldrh	r3, [r7, #26]
 80084c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084c8:	837b      	strh	r3, [r7, #26]
 80084ca:	8b7b      	ldrh	r3, [r7, #26]
 80084cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084d0:	837b      	strh	r3, [r7, #26]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	441a      	add	r2, r3
 80084dc:	8b7b      	ldrh	r3, [r7, #26]
 80084de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	8013      	strh	r3, [r2, #0]
 80084f2:	e1a2      	b.n	800883a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	441a      	add	r2, r3
 8008518:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800851c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008524:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852c:	b29b      	uxth	r3, r3
 800852e:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	65bb      	str	r3, [r7, #88]	; 0x58
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800853a:	b29b      	uxth	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008540:	4413      	add	r3, r2
 8008542:	65bb      	str	r3, [r7, #88]	; 0x58
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	00da      	lsls	r2, r3, #3
 800854a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800854c:	4413      	add	r3, r2
 800854e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008552:	657b      	str	r3, [r7, #84]	; 0x54
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	891b      	ldrh	r3, [r3, #8]
 8008558:	085b      	lsrs	r3, r3, #1
 800855a:	b29b      	uxth	r3, r3
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	653b      	str	r3, [r7, #80]	; 0x50
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800856e:	b29b      	uxth	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008574:	4413      	add	r3, r2
 8008576:	653b      	str	r3, [r7, #80]	; 0x50
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	00da      	lsls	r2, r3, #3
 800857e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008580:	4413      	add	r3, r2
 8008582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	895b      	ldrh	r3, [r3, #10]
 800858c:	085b      	lsrs	r3, r3, #1
 800858e:	b29b      	uxth	r3, r3
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008596:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	2b00      	cmp	r3, #0
 800859e:	f040 8091 	bne.w	80086c4 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80085b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80085b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d01b      	beq.n	80085f2 <USB_ActivateEndpoint+0x482>
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	441a      	add	r2, r3
 80085dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80085de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8008600:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01b      	beq.n	8008642 <USB_ActivateEndpoint+0x4d2>
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	b29b      	uxth	r3, r3
 8008618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008620:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	441a      	add	r2, r3
 800862c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800862e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800863a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800863e:	b29b      	uxth	r3, r3
 8008640:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008658:	86bb      	strh	r3, [r7, #52]	; 0x34
 800865a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800865c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008660:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008662:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008664:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008668:	86bb      	strh	r3, [r7, #52]	; 0x34
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	441a      	add	r2, r3
 8008674:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800867e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008686:	b29b      	uxth	r3, r3
 8008688:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a0:	867b      	strh	r3, [r7, #50]	; 0x32
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80086ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086be:	b29b      	uxth	r3, r3
 80086c0:	8013      	strh	r3, [r2, #0]
 80086c2:	e0ba      	b.n	800883a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80086d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80086d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d01d      	beq.n	800871c <USB_ActivateEndpoint+0x5ac>
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	881b      	ldrh	r3, [r3, #0]
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	441a      	add	r2, r3
 8008704:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800870c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008718:	b29b      	uxth	r3, r3
 800871a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800872c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01d      	beq.n	8008774 <USB_ActivateEndpoint+0x604>
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800874a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	441a      	add	r2, r3
 800875c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800876c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008770:	b29b      	uxth	r3, r3
 8008772:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	78db      	ldrb	r3, [r3, #3]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d024      	beq.n	80087c6 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008792:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008796:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800879a:	f083 0320 	eor.w	r3, r3, #32
 800879e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	441a      	add	r2, r3
 80087ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80087b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	8013      	strh	r3, [r2, #0]
 80087c4:	e01d      	b.n	8008802 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	441a      	add	r2, r3
 80087ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80087ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087fe:	b29b      	uxth	r3, r3
 8008800:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008818:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	441a      	add	r2, r3
 8008824:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800882a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008836:	b29b      	uxth	r3, r3
 8008838:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800883a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800883e:	4618      	mov	r0, r3
 8008840:	376c      	adds	r7, #108	; 0x6c
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop

0800884c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800884c:	b480      	push	{r7}
 800884e:	b08d      	sub	sp, #52	; 0x34
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	7b1b      	ldrb	r3, [r3, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	f040 808e 	bne.w	800897c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d044      	beq.n	80088f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	81bb      	strh	r3, [r7, #12]
 8008876:	89bb      	ldrh	r3, [r7, #12]
 8008878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01b      	beq.n	80088b8 <USB_DeactivateEndpoint+0x6c>
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	b29b      	uxth	r3, r3
 800888e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008896:	817b      	strh	r3, [r7, #10]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	441a      	add	r2, r3
 80088a2:	897b      	ldrh	r3, [r7, #10]
 80088a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ce:	813b      	strh	r3, [r7, #8]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	441a      	add	r2, r3
 80088da:	893b      	ldrh	r3, [r7, #8]
 80088dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	8013      	strh	r3, [r2, #0]
 80088f0:	e192      	b.n	8008c18 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	827b      	strh	r3, [r7, #18]
 8008900:	8a7b      	ldrh	r3, [r7, #18]
 8008902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d01b      	beq.n	8008942 <USB_DeactivateEndpoint+0xf6>
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	b29b      	uxth	r3, r3
 8008918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008920:	823b      	strh	r3, [r7, #16]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	441a      	add	r2, r3
 800892c:	8a3b      	ldrh	r3, [r7, #16]
 800892e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800893a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893e:	b29b      	uxth	r3, r3
 8008940:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008958:	81fb      	strh	r3, [r7, #14]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	441a      	add	r2, r3
 8008964:	89fb      	ldrh	r3, [r7, #14]
 8008966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800896a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800896e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008976:	b29b      	uxth	r3, r3
 8008978:	8013      	strh	r3, [r2, #0]
 800897a:	e14d      	b.n	8008c18 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b00      	cmp	r3, #0
 8008982:	f040 80a5 	bne.w	8008ad0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	843b      	strh	r3, [r7, #32]
 8008994:	8c3b      	ldrh	r3, [r7, #32]
 8008996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01b      	beq.n	80089d6 <USB_DeactivateEndpoint+0x18a>
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b4:	83fb      	strh	r3, [r7, #30]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	441a      	add	r2, r3
 80089c0:	8bfb      	ldrh	r3, [r7, #30]
 80089c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	83bb      	strh	r3, [r7, #28]
 80089e4:	8bbb      	ldrh	r3, [r7, #28]
 80089e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01b      	beq.n	8008a26 <USB_DeactivateEndpoint+0x1da>
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a04:	837b      	strh	r3, [r7, #26]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	441a      	add	r2, r3
 8008a10:	8b7b      	ldrh	r3, [r7, #26]
 8008a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a3c:	833b      	strh	r3, [r7, #24]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	441a      	add	r2, r3
 8008a48:	8b3b      	ldrh	r3, [r7, #24]
 8008a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a74:	82fb      	strh	r3, [r7, #22]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	441a      	add	r2, r3
 8008a80:	8afb      	ldrh	r3, [r7, #22]
 8008a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aac:	82bb      	strh	r3, [r7, #20]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	441a      	add	r2, r3
 8008ab8:	8abb      	ldrh	r3, [r7, #20]
 8008aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	8013      	strh	r3, [r2, #0]
 8008ace:	e0a3      	b.n	8008c18 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008ade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01b      	beq.n	8008b20 <USB_DeactivateEndpoint+0x2d4>
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	881b      	ldrh	r3, [r3, #0]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	441a      	add	r2, r3
 8008b0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008b2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01b      	beq.n	8008b70 <USB_DeactivateEndpoint+0x324>
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b4e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	441a      	add	r2, r3
 8008b5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	441a      	add	r2, r3
 8008b92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	441a      	add	r2, r3
 8008bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf6:	847b      	strh	r3, [r7, #34]	; 0x22
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	441a      	add	r2, r3
 8008c02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3734      	adds	r7, #52	; 0x34
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b0c4      	sub	sp, #272	; 0x110
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	1d3b      	adds	r3, r7, #4
 8008c2e:	6018      	str	r0, [r3, #0]
 8008c30:	463b      	mov	r3, r7
 8008c32:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c34:	463b      	mov	r3, r7
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	f040 8566 	bne.w	800970c <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008c40:	463b      	mov	r3, r7
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699a      	ldr	r2, [r3, #24]
 8008c46:	463b      	mov	r3, r7
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d905      	bls.n	8008c5c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008c50:	463b      	mov	r3, r7
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008c5a:	e004      	b.n	8008c66 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008c5c:	463b      	mov	r3, r7
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008c66:	463b      	mov	r3, r7
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	7b1b      	ldrb	r3, [r3, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d12c      	bne.n	8008cca <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008c70:	463b      	mov	r3, r7
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6959      	ldr	r1, [r3, #20]
 8008c76:	463b      	mov	r3, r7
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	88da      	ldrh	r2, [r3, #6]
 8008c7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	1d38      	adds	r0, r7, #4
 8008c84:	6800      	ldr	r0, [r0, #0]
 8008c86:	f001 fa43 	bl	800a110 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c8a:	1d3b      	adds	r3, r7, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	617b      	str	r3, [r7, #20]
 8008c90:	1d3b      	adds	r3, r7, #4
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	00da      	lsls	r2, r3, #3
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	4413      	add	r3, r2
 8008cae:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8008cb2:	f107 0310 	add.w	r3, r7, #16
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	f107 0310 	add.w	r3, r7, #16
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	801a      	strh	r2, [r3, #0]
 8008cc6:	f000 bcec 	b.w	80096a2 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008cca:	463b      	mov	r3, r7
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	78db      	ldrb	r3, [r3, #3]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	f040 8356 	bne.w	8009382 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6a1a      	ldr	r2, [r3, #32]
 8008cdc:	463b      	mov	r3, r7
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	f240 82fa 	bls.w	80092dc <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008ce8:	1d3b      	adds	r3, r7, #4
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	463b      	mov	r3, r7
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d02:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8008d06:	1d3b      	adds	r3, r7, #4
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	441a      	add	r2, r3
 8008d14:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8008d2c:	463b      	mov	r3, r7
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d36:	463b      	mov	r3, r7
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6a1a      	ldr	r2, [r3, #32]
 8008d3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d40:	1ad2      	subs	r2, r2, r3
 8008d42:	463b      	mov	r3, r7
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d48:	1d3b      	adds	r3, r7, #4
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	463b      	mov	r3, r7
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 815e 	beq.w	8009020 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d64:	1d3b      	adds	r3, r7, #4
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6a:	463b      	mov	r3, r7
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d164      	bne.n	8008e3e <USB_EPStartXfer+0x218>
 8008d74:	1d3b      	adds	r3, r7, #4
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d7a:	1d3b      	adds	r3, r7, #4
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	4413      	add	r3, r2
 8008d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	00da      	lsls	r2, r3, #3
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	4413      	add	r3, r2
 8008d98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d112      	bne.n	8008dcc <USB_EPStartXfer+0x1a6>
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	801a      	strh	r2, [r3, #0]
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	e054      	b.n	8008e76 <USB_EPStartXfer+0x250>
 8008dcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8008dd2:	d817      	bhi.n	8008e04 <USB_EPStartXfer+0x1de>
 8008dd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dd8:	085b      	lsrs	r3, r3, #1
 8008dda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008dde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d004      	beq.n	8008df4 <USB_EPStartXfer+0x1ce>
 8008dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dee:	3301      	adds	r3, #1
 8008df0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	029b      	lsls	r3, r3, #10
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e00:	801a      	strh	r2, [r3, #0]
 8008e02:	e038      	b.n	8008e76 <USB_EPStartXfer+0x250>
 8008e04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e08:	095b      	lsrs	r3, r3, #5
 8008e0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d104      	bne.n	8008e24 <USB_EPStartXfer+0x1fe>
 8008e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	029b      	lsls	r3, r3, #10
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3a:	801a      	strh	r2, [r3, #0]
 8008e3c:	e01b      	b.n	8008e76 <USB_EPStartXfer+0x250>
 8008e3e:	463b      	mov	r3, r7
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	785b      	ldrb	r3, [r3, #1]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d116      	bne.n	8008e76 <USB_EPStartXfer+0x250>
 8008e48:	1d3b      	adds	r3, r7, #4
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e56:	4413      	add	r3, r2
 8008e58:	637b      	str	r3, [r7, #52]	; 0x34
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	00da      	lsls	r2, r3, #3
 8008e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e64:	4413      	add	r3, r2
 8008e66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e76:	463b      	mov	r3, r7
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	895b      	ldrh	r3, [r3, #10]
 8008e7c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e80:	463b      	mov	r3, r7
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6959      	ldr	r1, [r3, #20]
 8008e86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008e90:	1d38      	adds	r0, r7, #4
 8008e92:	6800      	ldr	r0, [r0, #0]
 8008e94:	f001 f93c 	bl	800a110 <USB_WritePMA>
            ep->xfer_buff += len;
 8008e98:	463b      	mov	r3, r7
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	695a      	ldr	r2, [r3, #20]
 8008e9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ea2:	441a      	add	r2, r3
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008eaa:	463b      	mov	r3, r7
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6a1a      	ldr	r2, [r3, #32]
 8008eb0:	463b      	mov	r3, r7
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d90e      	bls.n	8008ed8 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8008eba:	463b      	mov	r3, r7
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8008ec4:	463b      	mov	r3, r7
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6a1a      	ldr	r2, [r3, #32]
 8008eca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	463b      	mov	r3, r7
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	621a      	str	r2, [r3, #32]
 8008ed6:	e008      	b.n	8008eea <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ed8:	463b      	mov	r3, r7
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008eea:	463b      	mov	r3, r7
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	785b      	ldrb	r3, [r3, #1]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d164      	bne.n	8008fbe <USB_EPStartXfer+0x398>
 8008ef4:	1d3b      	adds	r3, r7, #4
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	61fb      	str	r3, [r7, #28]
 8008efa:	1d3b      	adds	r3, r7, #4
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	461a      	mov	r2, r3
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	4413      	add	r3, r2
 8008f0a:	61fb      	str	r3, [r7, #28]
 8008f0c:	463b      	mov	r3, r7
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	00da      	lsls	r2, r3, #3
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	4413      	add	r3, r2
 8008f18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f1c:	61bb      	str	r3, [r7, #24]
 8008f1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d112      	bne.n	8008f4c <USB_EPStartXfer+0x326>
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	801a      	strh	r2, [r3, #0]
 8008f4a:	e057      	b.n	8008ffc <USB_EPStartXfer+0x3d6>
 8008f4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f50:	2b3e      	cmp	r3, #62	; 0x3e
 8008f52:	d817      	bhi.n	8008f84 <USB_EPStartXfer+0x35e>
 8008f54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f58:	085b      	lsrs	r3, r3, #1
 8008f5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <USB_EPStartXfer+0x34e>
 8008f6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f6e:	3301      	adds	r3, #1
 8008f70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	029b      	lsls	r3, r3, #10
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	801a      	strh	r2, [r3, #0]
 8008f82:	e03b      	b.n	8008ffc <USB_EPStartXfer+0x3d6>
 8008f84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f88:	095b      	lsrs	r3, r3, #5
 8008f8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f92:	f003 031f 	and.w	r3, r3, #31
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d104      	bne.n	8008fa4 <USB_EPStartXfer+0x37e>
 8008f9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008fa4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	029b      	lsls	r3, r3, #10
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	801a      	strh	r2, [r3, #0]
 8008fbc:	e01e      	b.n	8008ffc <USB_EPStartXfer+0x3d6>
 8008fbe:	463b      	mov	r3, r7
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d119      	bne.n	8008ffc <USB_EPStartXfer+0x3d6>
 8008fc8:	1d3b      	adds	r3, r7, #4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8008fce:	1d3b      	adds	r3, r7, #4
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	4413      	add	r3, r2
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24
 8008fe0:	463b      	mov	r3, r7
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	00da      	lsls	r2, r3, #3
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	4413      	add	r3, r2
 8008fec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ff0:	623b      	str	r3, [r7, #32]
 8008ff2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	891b      	ldrh	r3, [r3, #8]
 8009002:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009006:	463b      	mov	r3, r7
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6959      	ldr	r1, [r3, #20]
 800900c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009010:	b29b      	uxth	r3, r3
 8009012:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009016:	1d38      	adds	r0, r7, #4
 8009018:	6800      	ldr	r0, [r0, #0]
 800901a:	f001 f879 	bl	800a110 <USB_WritePMA>
 800901e:	e340      	b.n	80096a2 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009020:	463b      	mov	r3, r7
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d164      	bne.n	80090f4 <USB_EPStartXfer+0x4ce>
 800902a:	1d3b      	adds	r3, r7, #4
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009030:	1d3b      	adds	r3, r7, #4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009038:	b29b      	uxth	r3, r3
 800903a:	461a      	mov	r2, r3
 800903c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903e:	4413      	add	r3, r2
 8009040:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009042:	463b      	mov	r3, r7
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	00da      	lsls	r2, r3, #3
 800904a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904c:	4413      	add	r3, r2
 800904e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009052:	64bb      	str	r3, [r7, #72]	; 0x48
 8009054:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009058:	2b00      	cmp	r3, #0
 800905a:	d112      	bne.n	8009082 <USB_EPStartXfer+0x45c>
 800905c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	b29b      	uxth	r3, r3
 8009062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009066:	b29a      	uxth	r2, r3
 8009068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800906a:	801a      	strh	r2, [r3, #0]
 800906c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	b29b      	uxth	r3, r3
 8009072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800907a:	b29a      	uxth	r2, r3
 800907c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800907e:	801a      	strh	r2, [r3, #0]
 8009080:	e057      	b.n	8009132 <USB_EPStartXfer+0x50c>
 8009082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009086:	2b3e      	cmp	r3, #62	; 0x3e
 8009088:	d817      	bhi.n	80090ba <USB_EPStartXfer+0x494>
 800908a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800908e:	085b      	lsrs	r3, r3, #1
 8009090:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009094:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <USB_EPStartXfer+0x484>
 80090a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090a4:	3301      	adds	r3, #1
 80090a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80090aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	029b      	lsls	r3, r3, #10
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090b6:	801a      	strh	r2, [r3, #0]
 80090b8:	e03b      	b.n	8009132 <USB_EPStartXfer+0x50c>
 80090ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090be:	095b      	lsrs	r3, r3, #5
 80090c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80090c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090c8:	f003 031f 	and.w	r3, r3, #31
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <USB_EPStartXfer+0x4b4>
 80090d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d4:	3b01      	subs	r3, #1
 80090d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80090da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090de:	b29b      	uxth	r3, r3
 80090e0:	029b      	lsls	r3, r3, #10
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f0:	801a      	strh	r2, [r3, #0]
 80090f2:	e01e      	b.n	8009132 <USB_EPStartXfer+0x50c>
 80090f4:	463b      	mov	r3, r7
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	785b      	ldrb	r3, [r3, #1]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d119      	bne.n	8009132 <USB_EPStartXfer+0x50c>
 80090fe:	1d3b      	adds	r3, r7, #4
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	657b      	str	r3, [r7, #84]	; 0x54
 8009104:	1d3b      	adds	r3, r7, #4
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800910c:	b29b      	uxth	r3, r3
 800910e:	461a      	mov	r2, r3
 8009110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009112:	4413      	add	r3, r2
 8009114:	657b      	str	r3, [r7, #84]	; 0x54
 8009116:	463b      	mov	r3, r7
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	00da      	lsls	r2, r3, #3
 800911e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009120:	4413      	add	r3, r2
 8009122:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009126:	653b      	str	r3, [r7, #80]	; 0x50
 8009128:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800912c:	b29a      	uxth	r2, r3
 800912e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009130:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009132:	463b      	mov	r3, r7
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	891b      	ldrh	r3, [r3, #8]
 8009138:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800913c:	463b      	mov	r3, r7
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6959      	ldr	r1, [r3, #20]
 8009142:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009146:	b29b      	uxth	r3, r3
 8009148:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800914c:	1d38      	adds	r0, r7, #4
 800914e:	6800      	ldr	r0, [r0, #0]
 8009150:	f000 ffde 	bl	800a110 <USB_WritePMA>
            ep->xfer_buff += len;
 8009154:	463b      	mov	r3, r7
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	695a      	ldr	r2, [r3, #20]
 800915a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800915e:	441a      	add	r2, r3
 8009160:	463b      	mov	r3, r7
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009166:	463b      	mov	r3, r7
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6a1a      	ldr	r2, [r3, #32]
 800916c:	463b      	mov	r3, r7
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	429a      	cmp	r2, r3
 8009174:	d90e      	bls.n	8009194 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8009176:	463b      	mov	r3, r7
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8009180:	463b      	mov	r3, r7
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6a1a      	ldr	r2, [r3, #32]
 8009186:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800918a:	1ad2      	subs	r2, r2, r3
 800918c:	463b      	mov	r3, r7
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	621a      	str	r2, [r3, #32]
 8009192:	e008      	b.n	80091a6 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8009194:	463b      	mov	r3, r7
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800919e:	463b      	mov	r3, r7
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2200      	movs	r2, #0
 80091a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091a6:	1d3b      	adds	r3, r7, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	647b      	str	r3, [r7, #68]	; 0x44
 80091ac:	463b      	mov	r3, r7
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	785b      	ldrb	r3, [r3, #1]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d164      	bne.n	8009280 <USB_EPStartXfer+0x65a>
 80091b6:	1d3b      	adds	r3, r7, #4
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091bc:	1d3b      	adds	r3, r7, #4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	461a      	mov	r2, r3
 80091c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ca:	4413      	add	r3, r2
 80091cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091ce:	463b      	mov	r3, r7
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	00da      	lsls	r2, r3, #3
 80091d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d8:	4413      	add	r3, r2
 80091da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091de:	63bb      	str	r3, [r7, #56]	; 0x38
 80091e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d112      	bne.n	800920e <USB_EPStartXfer+0x5e8>
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	801a      	strh	r2, [r3, #0]
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009206:	b29a      	uxth	r2, r3
 8009208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920a:	801a      	strh	r2, [r3, #0]
 800920c:	e054      	b.n	80092b8 <USB_EPStartXfer+0x692>
 800920e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009212:	2b3e      	cmp	r3, #62	; 0x3e
 8009214:	d817      	bhi.n	8009246 <USB_EPStartXfer+0x620>
 8009216:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800921a:	085b      	lsrs	r3, r3, #1
 800921c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009220:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <USB_EPStartXfer+0x610>
 800922c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009230:	3301      	adds	r3, #1
 8009232:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800923a:	b29b      	uxth	r3, r3
 800923c:	029b      	lsls	r3, r3, #10
 800923e:	b29a      	uxth	r2, r3
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	801a      	strh	r2, [r3, #0]
 8009244:	e038      	b.n	80092b8 <USB_EPStartXfer+0x692>
 8009246:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800924a:	095b      	lsrs	r3, r3, #5
 800924c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009250:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	2b00      	cmp	r3, #0
 800925a:	d104      	bne.n	8009266 <USB_EPStartXfer+0x640>
 800925c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009260:	3b01      	subs	r3, #1
 8009262:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800926a:	b29b      	uxth	r3, r3
 800926c:	029b      	lsls	r3, r3, #10
 800926e:	b29b      	uxth	r3, r3
 8009270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009278:	b29a      	uxth	r2, r3
 800927a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927c:	801a      	strh	r2, [r3, #0]
 800927e:	e01b      	b.n	80092b8 <USB_EPStartXfer+0x692>
 8009280:	463b      	mov	r3, r7
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	785b      	ldrb	r3, [r3, #1]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d116      	bne.n	80092b8 <USB_EPStartXfer+0x692>
 800928a:	1d3b      	adds	r3, r7, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009292:	b29b      	uxth	r3, r3
 8009294:	461a      	mov	r2, r3
 8009296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009298:	4413      	add	r3, r2
 800929a:	647b      	str	r3, [r7, #68]	; 0x44
 800929c:	463b      	mov	r3, r7
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	00da      	lsls	r2, r3, #3
 80092a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a6:	4413      	add	r3, r2
 80092a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092ac:	643b      	str	r3, [r7, #64]	; 0x40
 80092ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092b8:	463b      	mov	r3, r7
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	895b      	ldrh	r3, [r3, #10]
 80092be:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092c2:	463b      	mov	r3, r7
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6959      	ldr	r1, [r3, #20]
 80092c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80092d2:	1d38      	adds	r0, r7, #4
 80092d4:	6800      	ldr	r0, [r0, #0]
 80092d6:	f000 ff1b 	bl	800a110 <USB_WritePMA>
 80092da:	e1e2      	b.n	80096a2 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80092dc:	463b      	mov	r3, r7
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80092e6:	1d3b      	adds	r3, r7, #4
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	463b      	mov	r3, r7
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80092fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009300:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009304:	1d3b      	adds	r3, r7, #4
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	463b      	mov	r3, r7
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	441a      	add	r2, r3
 8009312:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800931a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800931e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009326:	b29b      	uxth	r3, r3
 8009328:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800932a:	1d3b      	adds	r3, r7, #4
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	663b      	str	r3, [r7, #96]	; 0x60
 8009330:	1d3b      	adds	r3, r7, #4
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009338:	b29b      	uxth	r3, r3
 800933a:	461a      	mov	r2, r3
 800933c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800933e:	4413      	add	r3, r2
 8009340:	663b      	str	r3, [r7, #96]	; 0x60
 8009342:	463b      	mov	r3, r7
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	00da      	lsls	r2, r3, #3
 800934a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800934c:	4413      	add	r3, r2
 800934e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009354:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009358:	b29a      	uxth	r2, r3
 800935a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800935c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800935e:	463b      	mov	r3, r7
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	891b      	ldrh	r3, [r3, #8]
 8009364:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009368:	463b      	mov	r3, r7
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6959      	ldr	r1, [r3, #20]
 800936e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009372:	b29b      	uxth	r3, r3
 8009374:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009378:	1d38      	adds	r0, r7, #4
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	f000 fec8 	bl	800a110 <USB_WritePMA>
 8009380:	e18f      	b.n	80096a2 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009382:	1d3b      	adds	r3, r7, #4
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	463b      	mov	r3, r7
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29b      	uxth	r3, r3
 8009394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 808f 	beq.w	80094bc <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800939e:	1d3b      	adds	r3, r7, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80093a4:	463b      	mov	r3, r7
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	785b      	ldrb	r3, [r3, #1]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d164      	bne.n	8009478 <USB_EPStartXfer+0x852>
 80093ae:	1d3b      	adds	r3, r7, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	673b      	str	r3, [r7, #112]	; 0x70
 80093b4:	1d3b      	adds	r3, r7, #4
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093bc:	b29b      	uxth	r3, r3
 80093be:	461a      	mov	r2, r3
 80093c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093c2:	4413      	add	r3, r2
 80093c4:	673b      	str	r3, [r7, #112]	; 0x70
 80093c6:	463b      	mov	r3, r7
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	00da      	lsls	r2, r3, #3
 80093ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093d0:	4413      	add	r3, r2
 80093d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d112      	bne.n	8009406 <USB_EPStartXfer+0x7e0>
 80093e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ee:	801a      	strh	r2, [r3, #0]
 80093f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fe:	b29a      	uxth	r2, r3
 8009400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009402:	801a      	strh	r2, [r3, #0]
 8009404:	e054      	b.n	80094b0 <USB_EPStartXfer+0x88a>
 8009406:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800940a:	2b3e      	cmp	r3, #62	; 0x3e
 800940c:	d817      	bhi.n	800943e <USB_EPStartXfer+0x818>
 800940e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009412:	085b      	lsrs	r3, r3, #1
 8009414:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009418:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d004      	beq.n	800942e <USB_EPStartXfer+0x808>
 8009424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009428:	3301      	adds	r3, #1
 800942a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800942e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009432:	b29b      	uxth	r3, r3
 8009434:	029b      	lsls	r3, r3, #10
 8009436:	b29a      	uxth	r2, r3
 8009438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800943a:	801a      	strh	r2, [r3, #0]
 800943c:	e038      	b.n	80094b0 <USB_EPStartXfer+0x88a>
 800943e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009442:	095b      	lsrs	r3, r3, #5
 8009444:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009448:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800944c:	f003 031f 	and.w	r3, r3, #31
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <USB_EPStartXfer+0x838>
 8009454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009458:	3b01      	subs	r3, #1
 800945a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800945e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009462:	b29b      	uxth	r3, r3
 8009464:	029b      	lsls	r3, r3, #10
 8009466:	b29b      	uxth	r3, r3
 8009468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800946c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009470:	b29a      	uxth	r2, r3
 8009472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009474:	801a      	strh	r2, [r3, #0]
 8009476:	e01b      	b.n	80094b0 <USB_EPStartXfer+0x88a>
 8009478:	463b      	mov	r3, r7
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	785b      	ldrb	r3, [r3, #1]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d116      	bne.n	80094b0 <USB_EPStartXfer+0x88a>
 8009482:	1d3b      	adds	r3, r7, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800948a:	b29b      	uxth	r3, r3
 800948c:	461a      	mov	r2, r3
 800948e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009490:	4413      	add	r3, r2
 8009492:	67bb      	str	r3, [r7, #120]	; 0x78
 8009494:	463b      	mov	r3, r7
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	00da      	lsls	r2, r3, #3
 800949c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800949e:	4413      	add	r3, r2
 80094a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094a4:	677b      	str	r3, [r7, #116]	; 0x74
 80094a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80094b0:	463b      	mov	r3, r7
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	895b      	ldrh	r3, [r3, #10]
 80094b6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80094ba:	e097      	b.n	80095ec <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094bc:	463b      	mov	r3, r7
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	785b      	ldrb	r3, [r3, #1]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d168      	bne.n	8009598 <USB_EPStartXfer+0x972>
 80094c6:	1d3b      	adds	r3, r7, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094ce:	1d3b      	adds	r3, r7, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	461a      	mov	r2, r3
 80094da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094de:	4413      	add	r3, r2
 80094e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094e4:	463b      	mov	r3, r7
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	00da      	lsls	r2, r3, #3
 80094ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094f0:	4413      	add	r3, r2
 80094f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80094f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d112      	bne.n	8009526 <USB_EPStartXfer+0x900>
 8009500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	b29b      	uxth	r3, r3
 8009506:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800950a:	b29a      	uxth	r2, r3
 800950c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800950e:	801a      	strh	r2, [r3, #0]
 8009510:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	b29b      	uxth	r3, r3
 8009516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800951a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800951e:	b29a      	uxth	r2, r3
 8009520:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009522:	801a      	strh	r2, [r3, #0]
 8009524:	e05d      	b.n	80095e2 <USB_EPStartXfer+0x9bc>
 8009526:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800952a:	2b3e      	cmp	r3, #62	; 0x3e
 800952c:	d817      	bhi.n	800955e <USB_EPStartXfer+0x938>
 800952e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009532:	085b      	lsrs	r3, r3, #1
 8009534:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009538:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d004      	beq.n	800954e <USB_EPStartXfer+0x928>
 8009544:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009548:	3301      	adds	r3, #1
 800954a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800954e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009552:	b29b      	uxth	r3, r3
 8009554:	029b      	lsls	r3, r3, #10
 8009556:	b29a      	uxth	r2, r3
 8009558:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	e041      	b.n	80095e2 <USB_EPStartXfer+0x9bc>
 800955e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009562:	095b      	lsrs	r3, r3, #5
 8009564:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009568:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800956c:	f003 031f 	and.w	r3, r3, #31
 8009570:	2b00      	cmp	r3, #0
 8009572:	d104      	bne.n	800957e <USB_EPStartXfer+0x958>
 8009574:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009578:	3b01      	subs	r3, #1
 800957a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800957e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009582:	b29b      	uxth	r3, r3
 8009584:	029b      	lsls	r3, r3, #10
 8009586:	b29b      	uxth	r3, r3
 8009588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800958c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009590:	b29a      	uxth	r2, r3
 8009592:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009594:	801a      	strh	r2, [r3, #0]
 8009596:	e024      	b.n	80095e2 <USB_EPStartXfer+0x9bc>
 8009598:	463b      	mov	r3, r7
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	785b      	ldrb	r3, [r3, #1]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d11f      	bne.n	80095e2 <USB_EPStartXfer+0x9bc>
 80095a2:	1d3b      	adds	r3, r7, #4
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80095aa:	1d3b      	adds	r3, r7, #4
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	461a      	mov	r2, r3
 80095b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095ba:	4413      	add	r3, r2
 80095bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80095c0:	463b      	mov	r3, r7
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	00da      	lsls	r2, r3, #3
 80095c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095cc:	4413      	add	r3, r2
 80095ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80095da:	b29a      	uxth	r2, r3
 80095dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80095e2:	463b      	mov	r3, r7
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	891b      	ldrh	r3, [r3, #8]
 80095e8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095ec:	463b      	mov	r3, r7
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6959      	ldr	r1, [r3, #20]
 80095f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80095fc:	1d38      	adds	r0, r7, #4
 80095fe:	6800      	ldr	r0, [r0, #0]
 8009600:	f000 fd86 	bl	800a110 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009604:	463b      	mov	r3, r7
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d122      	bne.n	8009654 <USB_EPStartXfer+0xa2e>
 800960e:	1d3b      	adds	r3, r7, #4
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	463b      	mov	r3, r7
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	b29b      	uxth	r3, r3
 8009620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009628:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800962c:	1d3b      	adds	r3, r7, #4
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	463b      	mov	r3, r7
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	441a      	add	r2, r3
 800963a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800963e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800964a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800964e:	b29b      	uxth	r3, r3
 8009650:	8013      	strh	r3, [r2, #0]
 8009652:	e026      	b.n	80096a2 <USB_EPStartXfer+0xa7c>
 8009654:	463b      	mov	r3, r7
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	785b      	ldrb	r3, [r3, #1]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d121      	bne.n	80096a2 <USB_EPStartXfer+0xa7c>
 800965e:	1d3b      	adds	r3, r7, #4
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	463b      	mov	r3, r7
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	b29b      	uxth	r3, r3
 8009670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009678:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800967c:	1d3b      	adds	r3, r7, #4
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	463b      	mov	r3, r7
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	441a      	add	r2, r3
 800968a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800968e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800969a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800969e:	b29b      	uxth	r3, r3
 80096a0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80096a2:	1d3b      	adds	r3, r7, #4
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	463b      	mov	r3, r7
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f107 020e 	add.w	r2, r7, #14
 80096b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096c0:	8013      	strh	r3, [r2, #0]
 80096c2:	f107 030e 	add.w	r3, r7, #14
 80096c6:	f107 020e 	add.w	r2, r7, #14
 80096ca:	8812      	ldrh	r2, [r2, #0]
 80096cc:	f082 0210 	eor.w	r2, r2, #16
 80096d0:	801a      	strh	r2, [r3, #0]
 80096d2:	f107 030e 	add.w	r3, r7, #14
 80096d6:	f107 020e 	add.w	r2, r7, #14
 80096da:	8812      	ldrh	r2, [r2, #0]
 80096dc:	f082 0220 	eor.w	r2, r2, #32
 80096e0:	801a      	strh	r2, [r3, #0]
 80096e2:	1d3b      	adds	r3, r7, #4
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	463b      	mov	r3, r7
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	441a      	add	r2, r3
 80096f0:	f107 030e 	add.w	r3, r7, #14
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009706:	b29b      	uxth	r3, r3
 8009708:	8013      	strh	r3, [r2, #0]
 800970a:	e3b5      	b.n	8009e78 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800970c:	463b      	mov	r3, r7
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	7b1b      	ldrb	r3, [r3, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 8090 	bne.w	8009838 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8009718:	463b      	mov	r3, r7
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	699a      	ldr	r2, [r3, #24]
 800971e:	463b      	mov	r3, r7
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	429a      	cmp	r2, r3
 8009726:	d90e      	bls.n	8009746 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8009728:	463b      	mov	r3, r7
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8009732:	463b      	mov	r3, r7
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	699a      	ldr	r2, [r3, #24]
 8009738:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800973c:	1ad2      	subs	r2, r2, r3
 800973e:	463b      	mov	r3, r7
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	619a      	str	r2, [r3, #24]
 8009744:	e008      	b.n	8009758 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8009746:	463b      	mov	r3, r7
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8009750:	463b      	mov	r3, r7
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2200      	movs	r2, #0
 8009756:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009758:	1d3b      	adds	r3, r7, #4
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009760:	1d3b      	adds	r3, r7, #4
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009768:	b29b      	uxth	r3, r3
 800976a:	461a      	mov	r2, r3
 800976c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009770:	4413      	add	r3, r2
 8009772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009776:	463b      	mov	r3, r7
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	00da      	lsls	r2, r3, #3
 800977e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009782:	4413      	add	r3, r2
 8009784:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800978c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009790:	2b00      	cmp	r3, #0
 8009792:	d116      	bne.n	80097c2 <USB_EPStartXfer+0xb9c>
 8009794:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	b29b      	uxth	r3, r3
 800979c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097a6:	801a      	strh	r2, [r3, #0]
 80097a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097be:	801a      	strh	r2, [r3, #0]
 80097c0:	e32c      	b.n	8009e1c <USB_EPStartXfer+0x11f6>
 80097c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80097c6:	2b3e      	cmp	r3, #62	; 0x3e
 80097c8:	d818      	bhi.n	80097fc <USB_EPStartXfer+0xbd6>
 80097ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80097ce:	085b      	lsrs	r3, r3, #1
 80097d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d004      	beq.n	80097ea <USB_EPStartXfer+0xbc4>
 80097e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097e4:	3301      	adds	r3, #1
 80097e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	029b      	lsls	r3, r3, #10
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097f8:	801a      	strh	r2, [r3, #0]
 80097fa:	e30f      	b.n	8009e1c <USB_EPStartXfer+0x11f6>
 80097fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009800:	095b      	lsrs	r3, r3, #5
 8009802:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009806:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800980a:	f003 031f 	and.w	r3, r3, #31
 800980e:	2b00      	cmp	r3, #0
 8009810:	d104      	bne.n	800981c <USB_EPStartXfer+0xbf6>
 8009812:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009816:	3b01      	subs	r3, #1
 8009818:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800981c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009820:	b29b      	uxth	r3, r3
 8009822:	029b      	lsls	r3, r3, #10
 8009824:	b29b      	uxth	r3, r3
 8009826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800982a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800982e:	b29a      	uxth	r2, r3
 8009830:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009834:	801a      	strh	r2, [r3, #0]
 8009836:	e2f1      	b.n	8009e1c <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8009838:	463b      	mov	r3, r7
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	78db      	ldrb	r3, [r3, #3]
 800983e:	2b02      	cmp	r3, #2
 8009840:	f040 818f 	bne.w	8009b62 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009844:	463b      	mov	r3, r7
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	785b      	ldrb	r3, [r3, #1]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d175      	bne.n	800993a <USB_EPStartXfer+0xd14>
 800984e:	1d3b      	adds	r3, r7, #4
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009856:	1d3b      	adds	r3, r7, #4
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800985e:	b29b      	uxth	r3, r3
 8009860:	461a      	mov	r2, r3
 8009862:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009866:	4413      	add	r3, r2
 8009868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800986c:	463b      	mov	r3, r7
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	00da      	lsls	r2, r3, #3
 8009874:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009878:	4413      	add	r3, r2
 800987a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800987e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009882:	463b      	mov	r3, r7
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d116      	bne.n	80098ba <USB_EPStartXfer+0xc94>
 800988c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	b29b      	uxth	r3, r3
 8009894:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009898:	b29a      	uxth	r2, r3
 800989a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800989e:	801a      	strh	r2, [r3, #0]
 80098a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098b6:	801a      	strh	r2, [r3, #0]
 80098b8:	e065      	b.n	8009986 <USB_EPStartXfer+0xd60>
 80098ba:	463b      	mov	r3, r7
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	2b3e      	cmp	r3, #62	; 0x3e
 80098c2:	d81a      	bhi.n	80098fa <USB_EPStartXfer+0xcd4>
 80098c4:	463b      	mov	r3, r7
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	085b      	lsrs	r3, r3, #1
 80098cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80098d0:	463b      	mov	r3, r7
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d004      	beq.n	80098e8 <USB_EPStartXfer+0xcc2>
 80098de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098e2:	3301      	adds	r3, #1
 80098e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80098e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	029b      	lsls	r3, r3, #10
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	e045      	b.n	8009986 <USB_EPStartXfer+0xd60>
 80098fa:	463b      	mov	r3, r7
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	095b      	lsrs	r3, r3, #5
 8009902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009906:	463b      	mov	r3, r7
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	f003 031f 	and.w	r3, r3, #31
 8009910:	2b00      	cmp	r3, #0
 8009912:	d104      	bne.n	800991e <USB_EPStartXfer+0xcf8>
 8009914:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009918:	3b01      	subs	r3, #1
 800991a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800991e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009922:	b29b      	uxth	r3, r3
 8009924:	029b      	lsls	r3, r3, #10
 8009926:	b29b      	uxth	r3, r3
 8009928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800992c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009930:	b29a      	uxth	r2, r3
 8009932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009936:	801a      	strh	r2, [r3, #0]
 8009938:	e025      	b.n	8009986 <USB_EPStartXfer+0xd60>
 800993a:	463b      	mov	r3, r7
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d120      	bne.n	8009986 <USB_EPStartXfer+0xd60>
 8009944:	1d3b      	adds	r3, r7, #4
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800994c:	1d3b      	adds	r3, r7, #4
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009954:	b29b      	uxth	r3, r3
 8009956:	461a      	mov	r2, r3
 8009958:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800995c:	4413      	add	r3, r2
 800995e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009962:	463b      	mov	r3, r7
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	00da      	lsls	r2, r3, #3
 800996a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800996e:	4413      	add	r3, r2
 8009970:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009978:	463b      	mov	r3, r7
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	b29a      	uxth	r2, r3
 8009980:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009984:	801a      	strh	r2, [r3, #0]
 8009986:	1d3b      	adds	r3, r7, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800998e:	463b      	mov	r3, r7
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	785b      	ldrb	r3, [r3, #1]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d175      	bne.n	8009a84 <USB_EPStartXfer+0xe5e>
 8009998:	1d3b      	adds	r3, r7, #4
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80099a0:	1d3b      	adds	r3, r7, #4
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	461a      	mov	r2, r3
 80099ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099b0:	4413      	add	r3, r2
 80099b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80099b6:	463b      	mov	r3, r7
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	00da      	lsls	r2, r3, #3
 80099be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099c2:	4413      	add	r3, r2
 80099c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099cc:	463b      	mov	r3, r7
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d116      	bne.n	8009a04 <USB_EPStartXfer+0xdde>
 80099d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	b29b      	uxth	r3, r3
 80099de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099e8:	801a      	strh	r2, [r3, #0]
 80099ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a00:	801a      	strh	r2, [r3, #0]
 8009a02:	e061      	b.n	8009ac8 <USB_EPStartXfer+0xea2>
 8009a04:	463b      	mov	r3, r7
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8009a0c:	d81a      	bhi.n	8009a44 <USB_EPStartXfer+0xe1e>
 8009a0e:	463b      	mov	r3, r7
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	085b      	lsrs	r3, r3, #1
 8009a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a1a:	463b      	mov	r3, r7
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d004      	beq.n	8009a32 <USB_EPStartXfer+0xe0c>
 8009a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	029b      	lsls	r3, r3, #10
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a40:	801a      	strh	r2, [r3, #0]
 8009a42:	e041      	b.n	8009ac8 <USB_EPStartXfer+0xea2>
 8009a44:	463b      	mov	r3, r7
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	095b      	lsrs	r3, r3, #5
 8009a4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a50:	463b      	mov	r3, r7
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f003 031f 	and.w	r3, r3, #31
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d104      	bne.n	8009a68 <USB_EPStartXfer+0xe42>
 8009a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a62:	3b01      	subs	r3, #1
 8009a64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	029b      	lsls	r3, r3, #10
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a80:	801a      	strh	r2, [r3, #0]
 8009a82:	e021      	b.n	8009ac8 <USB_EPStartXfer+0xea2>
 8009a84:	463b      	mov	r3, r7
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	785b      	ldrb	r3, [r3, #1]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d11c      	bne.n	8009ac8 <USB_EPStartXfer+0xea2>
 8009a8e:	1d3b      	adds	r3, r7, #4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	461a      	mov	r2, r3
 8009a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009aa4:	463b      	mov	r3, r7
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	00da      	lsls	r2, r3, #3
 8009aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009aba:	463b      	mov	r3, r7
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ac6:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8009ac8:	463b      	mov	r3, r7
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f000 81a4 	beq.w	8009e1c <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009ad4:	1d3b      	adds	r3, r7, #4
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	463b      	mov	r3, r7
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009ae8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d005      	beq.n	8009b00 <USB_EPStartXfer+0xeda>
 8009af4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10d      	bne.n	8009b1c <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b00:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f040 8187 	bne.w	8009e1c <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b0e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f040 8180 	bne.w	8009e1c <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009b1c:	1d3b      	adds	r3, r7, #4
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	463b      	mov	r3, r7
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b36:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8009b3a:	1d3b      	adds	r3, r7, #4
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	463b      	mov	r3, r7
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	441a      	add	r2, r3
 8009b48:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8009b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	8013      	strh	r3, [r2, #0]
 8009b60:	e15c      	b.n	8009e1c <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009b62:	463b      	mov	r3, r7
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	78db      	ldrb	r3, [r3, #3]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	f040 8155 	bne.w	8009e18 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8009b6e:	463b      	mov	r3, r7
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	699a      	ldr	r2, [r3, #24]
 8009b74:	463b      	mov	r3, r7
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d90e      	bls.n	8009b9c <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8009b7e:	463b      	mov	r3, r7
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8009b88:	463b      	mov	r3, r7
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699a      	ldr	r2, [r3, #24]
 8009b8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b92:	1ad2      	subs	r2, r2, r3
 8009b94:	463b      	mov	r3, r7
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	619a      	str	r2, [r3, #24]
 8009b9a:	e008      	b.n	8009bae <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2200      	movs	r2, #0
 8009bac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009bae:	463b      	mov	r3, r7
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d16f      	bne.n	8009c98 <USB_EPStartXfer+0x1072>
 8009bb8:	1d3b      	adds	r3, r7, #4
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bc0:	1d3b      	adds	r3, r7, #4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	00da      	lsls	r2, r3, #3
 8009bde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009be2:	4413      	add	r3, r2
 8009be4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d116      	bne.n	8009c22 <USB_EPStartXfer+0xffc>
 8009bf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c06:	801a      	strh	r2, [r3, #0]
 8009c08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c1e:	801a      	strh	r2, [r3, #0]
 8009c20:	e05f      	b.n	8009ce2 <USB_EPStartXfer+0x10bc>
 8009c22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c26:	2b3e      	cmp	r3, #62	; 0x3e
 8009c28:	d818      	bhi.n	8009c5c <USB_EPStartXfer+0x1036>
 8009c2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c2e:	085b      	lsrs	r3, r3, #1
 8009c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d004      	beq.n	8009c4a <USB_EPStartXfer+0x1024>
 8009c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c44:	3301      	adds	r3, #1
 8009c46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	029b      	lsls	r3, r3, #10
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c58:	801a      	strh	r2, [r3, #0]
 8009c5a:	e042      	b.n	8009ce2 <USB_EPStartXfer+0x10bc>
 8009c5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c60:	095b      	lsrs	r3, r3, #5
 8009c62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c6a:	f003 031f 	and.w	r3, r3, #31
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d104      	bne.n	8009c7c <USB_EPStartXfer+0x1056>
 8009c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c76:	3b01      	subs	r3, #1
 8009c78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	029b      	lsls	r3, r3, #10
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c94:	801a      	strh	r2, [r3, #0]
 8009c96:	e024      	b.n	8009ce2 <USB_EPStartXfer+0x10bc>
 8009c98:	463b      	mov	r3, r7
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	785b      	ldrb	r3, [r3, #1]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d11f      	bne.n	8009ce2 <USB_EPStartXfer+0x10bc>
 8009ca2:	1d3b      	adds	r3, r7, #4
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009caa:	1d3b      	adds	r3, r7, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cba:	4413      	add	r3, r2
 8009cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cc0:	463b      	mov	r3, r7
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	00da      	lsls	r2, r3, #3
 8009cc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ccc:	4413      	add	r3, r2
 8009cce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ce0:	801a      	strh	r2, [r3, #0]
 8009ce2:	1d3b      	adds	r3, r7, #4
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009cea:	463b      	mov	r3, r7
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d16f      	bne.n	8009dd4 <USB_EPStartXfer+0x11ae>
 8009cf4:	1d3b      	adds	r3, r7, #4
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009cfc:	1d3b      	adds	r3, r7, #4
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	461a      	mov	r2, r3
 8009d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d12:	463b      	mov	r3, r7
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	00da      	lsls	r2, r3, #3
 8009d1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d1e:	4413      	add	r3, r2
 8009d20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d116      	bne.n	8009d5e <USB_EPStartXfer+0x1138>
 8009d30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d42:	801a      	strh	r2, [r3, #0]
 8009d44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d5a:	801a      	strh	r2, [r3, #0]
 8009d5c:	e05e      	b.n	8009e1c <USB_EPStartXfer+0x11f6>
 8009d5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d62:	2b3e      	cmp	r3, #62	; 0x3e
 8009d64:	d818      	bhi.n	8009d98 <USB_EPStartXfer+0x1172>
 8009d66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d004      	beq.n	8009d86 <USB_EPStartXfer+0x1160>
 8009d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d80:	3301      	adds	r3, #1
 8009d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	029b      	lsls	r3, r3, #10
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d94:	801a      	strh	r2, [r3, #0]
 8009d96:	e041      	b.n	8009e1c <USB_EPStartXfer+0x11f6>
 8009d98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d9c:	095b      	lsrs	r3, r3, #5
 8009d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009da2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009da6:	f003 031f 	and.w	r3, r3, #31
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d104      	bne.n	8009db8 <USB_EPStartXfer+0x1192>
 8009dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009db2:	3b01      	subs	r3, #1
 8009db4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	029b      	lsls	r3, r3, #10
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009dd0:	801a      	strh	r2, [r3, #0]
 8009dd2:	e023      	b.n	8009e1c <USB_EPStartXfer+0x11f6>
 8009dd4:	463b      	mov	r3, r7
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	785b      	ldrb	r3, [r3, #1]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d11e      	bne.n	8009e1c <USB_EPStartXfer+0x11f6>
 8009dde:	1d3b      	adds	r3, r7, #4
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	461a      	mov	r2, r3
 8009dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dee:	4413      	add	r3, r2
 8009df0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009df4:	463b      	mov	r3, r7
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	00da      	lsls	r2, r3, #3
 8009dfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e00:	4413      	add	r3, r2
 8009e02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e14:	801a      	strh	r2, [r3, #0]
 8009e16:	e001      	b.n	8009e1c <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e02e      	b.n	8009e7a <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e1c:	1d3b      	adds	r3, r7, #4
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	463b      	mov	r3, r7
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e36:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009e3a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009e3e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e42:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009e46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009e4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e4e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009e52:	1d3b      	adds	r3, r7, #4
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	463b      	mov	r3, r7
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	441a      	add	r2, r3
 8009e60:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	785b      	ldrb	r3, [r3, #1]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d020      	beq.n	8009ed8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eac:	81bb      	strh	r3, [r7, #12]
 8009eae:	89bb      	ldrh	r3, [r7, #12]
 8009eb0:	f083 0310 	eor.w	r3, r3, #16
 8009eb4:	81bb      	strh	r3, [r7, #12]
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	441a      	add	r2, r3
 8009ec0:	89bb      	ldrh	r3, [r7, #12]
 8009ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	8013      	strh	r3, [r2, #0]
 8009ed6:	e01f      	b.n	8009f18 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4413      	add	r3, r2
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eee:	81fb      	strh	r3, [r7, #14]
 8009ef0:	89fb      	ldrh	r3, [r7, #14]
 8009ef2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ef6:	81fb      	strh	r3, [r7, #14]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	441a      	add	r2, r3
 8009f02:	89fb      	ldrh	r3, [r7, #14]
 8009f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b087      	sub	sp, #28
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	7b1b      	ldrb	r3, [r3, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f040 809d 	bne.w	800a074 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d04c      	beq.n	8009fdc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	823b      	strh	r3, [r7, #16]
 8009f50:	8a3b      	ldrh	r3, [r7, #16]
 8009f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d01b      	beq.n	8009f92 <USB_EPClearStall+0x6c>
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f70:	81fb      	strh	r3, [r7, #14]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	441a      	add	r2, r3
 8009f7c:	89fb      	ldrh	r3, [r7, #14]
 8009f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	78db      	ldrb	r3, [r3, #3]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d06c      	beq.n	800a074 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fb0:	81bb      	strh	r3, [r7, #12]
 8009fb2:	89bb      	ldrh	r3, [r7, #12]
 8009fb4:	f083 0320 	eor.w	r3, r3, #32
 8009fb8:	81bb      	strh	r3, [r7, #12]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	441a      	add	r2, r3
 8009fc4:	89bb      	ldrh	r3, [r7, #12]
 8009fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	8013      	strh	r3, [r2, #0]
 8009fda:	e04b      	b.n	800a074 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	82fb      	strh	r3, [r7, #22]
 8009fea:	8afb      	ldrh	r3, [r7, #22]
 8009fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d01b      	beq.n	800a02c <USB_EPClearStall+0x106>
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	b29b      	uxth	r3, r3
 800a002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a00a:	82bb      	strh	r3, [r7, #20]
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	441a      	add	r2, r3
 800a016:	8abb      	ldrh	r3, [r7, #20]
 800a018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a01c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a028:	b29b      	uxth	r3, r3
 800a02a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	b29b      	uxth	r3, r3
 800a03a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a042:	827b      	strh	r3, [r7, #18]
 800a044:	8a7b      	ldrh	r3, [r7, #18]
 800a046:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a04a:	827b      	strh	r3, [r7, #18]
 800a04c:	8a7b      	ldrh	r3, [r7, #18]
 800a04e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a052:	827b      	strh	r3, [r7, #18]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	441a      	add	r2, r3
 800a05e:	8a7b      	ldrh	r3, [r7, #18]
 800a060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a06c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a070:	b29b      	uxth	r3, r3
 800a072:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	371c      	adds	r7, #28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	460b      	mov	r3, r1
 800a08c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d103      	bne.n	800a09c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2280      	movs	r2, #128	; 0x80
 800a098:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a110:	b480      	push	{r7}
 800a112:	b08d      	sub	sp, #52	; 0x34
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	4611      	mov	r1, r2
 800a11c:	461a      	mov	r2, r3
 800a11e:	460b      	mov	r3, r1
 800a120:	80fb      	strh	r3, [r7, #6]
 800a122:	4613      	mov	r3, r2
 800a124:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a126:	88bb      	ldrh	r3, [r7, #4]
 800a128:	3301      	adds	r3, #1
 800a12a:	085b      	lsrs	r3, r3, #1
 800a12c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a136:	88fa      	ldrh	r2, [r7, #6]
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a140:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a146:	e01b      	b.n	800a180 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	3301      	adds	r3, #1
 800a152:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	b29b      	uxth	r3, r3
 800a15a:	021b      	lsls	r3, r3, #8
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	461a      	mov	r2, r3
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	4313      	orrs	r3, r2
 800a164:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	b29a      	uxth	r2, r3
 800a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	3302      	adds	r3, #2
 800a172:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	3301      	adds	r3, #1
 800a178:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	3b01      	subs	r3, #1
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1e0      	bne.n	800a148 <USB_WritePMA+0x38>
  }
}
 800a186:	bf00      	nop
 800a188:	3734      	adds	r7, #52	; 0x34
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a192:	b480      	push	{r7}
 800a194:	b08b      	sub	sp, #44	; 0x2c
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	4611      	mov	r1, r2
 800a19e:	461a      	mov	r2, r3
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	80fb      	strh	r3, [r7, #6]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a1a8:	88bb      	ldrh	r3, [r7, #4]
 800a1aa:	085b      	lsrs	r3, r3, #1
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a1b8:	88fa      	ldrh	r2, [r7, #6]
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1c2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a1c8:	e018      	b.n	800a1fc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	3302      	adds	r3, #2
 800a1d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	0a1b      	lsrs	r3, r3, #8
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e3      	bne.n	800a1ca <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a202:	88bb      	ldrh	r3, [r7, #4]
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d007      	beq.n	800a21e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	b29b      	uxth	r3, r3
 800a214:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	701a      	strb	r2, [r3, #0]
  }
}
 800a21e:	bf00      	nop
 800a220:	372c      	adds	r7, #44	; 0x2c
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a236:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a23a:	f002 f843 	bl	800c2c4 <USBD_static_malloc>
 800a23e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d105      	bne.n	800a252 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a24e:	2302      	movs	r3, #2
 800a250:	e066      	b.n	800a320 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	7c1b      	ldrb	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d119      	bne.n	800a296 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a262:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a266:	2202      	movs	r2, #2
 800a268:	2181      	movs	r1, #129	; 0x81
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f001 fecf 	bl	800c00e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a27a:	2202      	movs	r2, #2
 800a27c:	2101      	movs	r1, #1
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f001 fec5 	bl	800c00e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2210      	movs	r2, #16
 800a290:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a294:	e016      	b.n	800a2c4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a296:	2340      	movs	r3, #64	; 0x40
 800a298:	2202      	movs	r2, #2
 800a29a:	2181      	movs	r1, #129	; 0x81
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f001 feb6 	bl	800c00e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a2a8:	2340      	movs	r3, #64	; 0x40
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f001 fead 	bl	800c00e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2210      	movs	r2, #16
 800a2c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a2c4:	2308      	movs	r3, #8
 800a2c6:	2203      	movs	r2, #3
 800a2c8:	2182      	movs	r1, #130	; 0x82
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f001 fe9f 	bl	800c00e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	7c1b      	ldrb	r3, [r3, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d109      	bne.n	800a30e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a300:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a304:	2101      	movs	r1, #1
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f001 ff71 	bl	800c1ee <USBD_LL_PrepareReceive>
 800a30c:	e007      	b.n	800a31e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a314:	2340      	movs	r3, #64	; 0x40
 800a316:	2101      	movs	r1, #1
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 ff68 	bl	800c1ee <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a334:	2181      	movs	r1, #129	; 0x81
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 fe8f 	bl	800c05a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a342:	2101      	movs	r1, #1
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 fe88 	bl	800c05a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a352:	2182      	movs	r1, #130	; 0x82
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f001 fe80 	bl	800c05a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00e      	beq.n	800a392 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a384:	4618      	mov	r0, r3
 800a386:	f001 ffab 	bl	800c2e0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3ac:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d03a      	beq.n	800a43c <USBD_CDC_Setup+0xa0>
 800a3c6:	2b20      	cmp	r3, #32
 800a3c8:	f040 8097 	bne.w	800a4fa <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	88db      	ldrh	r3, [r3, #6]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d029      	beq.n	800a428 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	b25b      	sxtb	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	da11      	bge.n	800a402 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a3ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	88d2      	ldrh	r2, [r2, #6]
 800a3f0:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a3f2:	6939      	ldr	r1, [r7, #16]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	88db      	ldrh	r3, [r3, #6]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f001 fa5d 	bl	800b8ba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a400:	e082      	b.n	800a508 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	785a      	ldrb	r2, [r3, #1]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	88db      	ldrh	r3, [r3, #6]
 800a410:	b2da      	uxtb	r2, r3
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a418:	6939      	ldr	r1, [r7, #16]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	88db      	ldrh	r3, [r3, #6]
 800a41e:	461a      	mov	r2, r3
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f001 fa76 	bl	800b912 <USBD_CtlPrepareRx>
      break;
 800a426:	e06f      	b.n	800a508 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	7850      	ldrb	r0, [r2, #1]
 800a434:	2200      	movs	r2, #0
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	4798      	blx	r3
      break;
 800a43a:	e065      	b.n	800a508 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	2b0b      	cmp	r3, #11
 800a442:	d84f      	bhi.n	800a4e4 <USBD_CDC_Setup+0x148>
 800a444:	a201      	add	r2, pc, #4	; (adr r2, 800a44c <USBD_CDC_Setup+0xb0>)
 800a446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44a:	bf00      	nop
 800a44c:	0800a47d 	.word	0x0800a47d
 800a450:	0800a4f3 	.word	0x0800a4f3
 800a454:	0800a4e5 	.word	0x0800a4e5
 800a458:	0800a4e5 	.word	0x0800a4e5
 800a45c:	0800a4e5 	.word	0x0800a4e5
 800a460:	0800a4e5 	.word	0x0800a4e5
 800a464:	0800a4e5 	.word	0x0800a4e5
 800a468:	0800a4e5 	.word	0x0800a4e5
 800a46c:	0800a4e5 	.word	0x0800a4e5
 800a470:	0800a4e5 	.word	0x0800a4e5
 800a474:	0800a4a5 	.word	0x0800a4a5
 800a478:	0800a4cd 	.word	0x0800a4cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a482:	2b03      	cmp	r3, #3
 800a484:	d107      	bne.n	800a496 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a486:	f107 030c 	add.w	r3, r7, #12
 800a48a:	2202      	movs	r2, #2
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 fa13 	bl	800b8ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a494:	e030      	b.n	800a4f8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 f99d 	bl	800b7d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4a2:	e029      	b.n	800a4f8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d107      	bne.n	800a4be <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a4ae:	f107 030f 	add.w	r3, r7, #15
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f001 f9ff 	bl	800b8ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a4bc:	e01c      	b.n	800a4f8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f001 f989 	bl	800b7d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	75fb      	strb	r3, [r7, #23]
          break;
 800a4ca:	e015      	b.n	800a4f8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d00f      	beq.n	800a4f6 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f001 f97d 	bl	800b7d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a4e2:	e008      	b.n	800a4f6 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f001 f976 	bl	800b7d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	75fb      	strb	r3, [r7, #23]
          break;
 800a4f0:	e002      	b.n	800a4f8 <USBD_CDC_Setup+0x15c>
          break;
 800a4f2:	bf00      	nop
 800a4f4:	e008      	b.n	800a508 <USBD_CDC_Setup+0x16c>
          break;
 800a4f6:	bf00      	nop
      }
      break;
 800a4f8:	e006      	b.n	800a508 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800a4fa:	6839      	ldr	r1, [r7, #0]
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f001 f96b 	bl	800b7d8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a502:	2303      	movs	r3, #3
 800a504:	75fb      	strb	r3, [r7, #23]
      break;
 800a506:	bf00      	nop
  }

  return (uint8_t)ret;
 800a508:	7dfb      	ldrb	r3, [r7, #23]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop

0800a514 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a526:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a532:	2303      	movs	r3, #3
 800a534:	e04f      	b.n	800a5d6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a53c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a53e:	78fa      	ldrb	r2, [r7, #3]
 800a540:	6879      	ldr	r1, [r7, #4]
 800a542:	4613      	mov	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	440b      	add	r3, r1
 800a54c:	3318      	adds	r3, #24
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d029      	beq.n	800a5a8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	440b      	add	r3, r1
 800a562:	3318      	adds	r3, #24
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	78f9      	ldrb	r1, [r7, #3]
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	460b      	mov	r3, r1
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	440b      	add	r3, r1
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	4403      	add	r3, r0
 800a574:	3338      	adds	r3, #56	; 0x38
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	fbb2 f1f3 	udiv	r1, r2, r3
 800a57c:	fb03 f301 	mul.w	r3, r3, r1
 800a580:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a582:	2b00      	cmp	r3, #0
 800a584:	d110      	bne.n	800a5a8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	440b      	add	r3, r1
 800a594:	3318      	adds	r3, #24
 800a596:	2200      	movs	r2, #0
 800a598:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a59a:	78f9      	ldrb	r1, [r7, #3]
 800a59c:	2300      	movs	r3, #0
 800a59e:	2200      	movs	r2, #0
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 fe03 	bl	800c1ac <USBD_LL_Transmit>
 800a5a6:	e015      	b.n	800a5d4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00b      	beq.n	800a5d4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b084      	sub	sp, #16
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d101      	bne.n	800a600 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e015      	b.n	800a62c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 fe13 	bl	800c230 <USBD_LL_GetRxDataSize>
 800a60a:	4602      	mov	r2, r0
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a626:	4611      	mov	r1, r2
 800a628:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a642:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d015      	beq.n	800a67a <USBD_CDC_EP0_RxReady+0x46>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a654:	2bff      	cmp	r3, #255	; 0xff
 800a656:	d010      	beq.n	800a67a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a666:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a66e:	b292      	uxth	r2, r2
 800a670:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	22ff      	movs	r2, #255	; 0xff
 800a676:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2243      	movs	r2, #67	; 0x43
 800a690:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a692:	4b03      	ldr	r3, [pc, #12]	; (800a6a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	20000094 	.word	0x20000094

0800a6a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2243      	movs	r2, #67	; 0x43
 800a6b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a6b2:	4b03      	ldr	r3, [pc, #12]	; (800a6c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	20000050 	.word	0x20000050

0800a6c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2243      	movs	r2, #67	; 0x43
 800a6d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a6d2:	4b03      	ldr	r3, [pc, #12]	; (800a6e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	200000d8 	.word	0x200000d8

0800a6e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	220a      	movs	r2, #10
 800a6f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a6f2:	4b03      	ldr	r3, [pc, #12]	; (800a700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	2000000c 	.word	0x2000000c

0800a704 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a714:	2303      	movs	r3, #3
 800a716:	e004      	b.n	800a722 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a72e:	b480      	push	{r7}
 800a730:	b087      	sub	sp, #28
 800a732:	af00      	add	r7, sp, #0
 800a734:	60f8      	str	r0, [r7, #12]
 800a736:	60b9      	str	r1, [r7, #8]
 800a738:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a740:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	371c      	adds	r7, #28
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a770:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a796:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	e016      	b.n	800a7d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	7c1b      	ldrb	r3, [r3, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d109      	bne.n	800a7c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 fd17 	bl	800c1ee <USBD_LL_PrepareReceive>
 800a7c0:	e007      	b.n	800a7d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7c8:	2340      	movs	r3, #64	; 0x40
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f001 fd0e 	bl	800c1ee <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e01f      	b.n	800a834 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	79fa      	ldrb	r2, [r7, #7]
 800a826:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f001 fb75 	bl	800bf18 <USBD_LL_Init>
 800a82e:	4603      	mov	r3, r0
 800a830:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a846:	2300      	movs	r3, #0
 800a848:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a850:	2303      	movs	r3, #3
 800a852:	e016      	b.n	800a882 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00b      	beq.n	800a880 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a870:	f107 020e 	add.w	r2, r7, #14
 800a874:	4610      	mov	r0, r2
 800a876:	4798      	blx	r3
 800a878:	4602      	mov	r2, r0
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f001 fba0 	bl	800bfd8 <USBD_LL_Start>
 800a898:	4603      	mov	r3, r0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d009      	beq.n	800a8e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	78fa      	ldrb	r2, [r7, #3]
 800a8dc:	4611      	mov	r1, r2
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4798      	blx	r3
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d007      	beq.n	800a916 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	78fa      	ldrb	r2, [r7, #3]
 800a910:	4611      	mov	r1, r2
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	4798      	blx	r3
  }

  return USBD_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 ff16 	bl	800b764 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a946:	461a      	mov	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a954:	f003 031f 	and.w	r3, r3, #31
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d00e      	beq.n	800a97a <USBD_LL_SetupStage+0x5a>
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d302      	bcc.n	800a966 <USBD_LL_SetupStage+0x46>
 800a960:	2b02      	cmp	r3, #2
 800a962:	d014      	beq.n	800a98e <USBD_LL_SetupStage+0x6e>
 800a964:	e01d      	b.n	800a9a2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f9d6 	bl	800ad20 <USBD_StdDevReq>
 800a974:	4603      	mov	r3, r0
 800a976:	73fb      	strb	r3, [r7, #15]
      break;
 800a978:	e020      	b.n	800a9bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a980:	4619      	mov	r1, r3
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fa3a 	bl	800adfc <USBD_StdItfReq>
 800a988:	4603      	mov	r3, r0
 800a98a:	73fb      	strb	r3, [r7, #15]
      break;
 800a98c:	e016      	b.n	800a9bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fa76 	bl	800ae88 <USBD_StdEPReq>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]
      break;
 800a9a0:	e00c      	b.n	800a9bc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a9a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f001 fb71 	bl	800c098 <USBD_LL_StallEP>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a9ba:	bf00      	nop
  }

  return ret;
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b086      	sub	sp, #24
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	60f8      	str	r0, [r7, #12]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a9d4:	7afb      	ldrb	r3, [r7, #11]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d137      	bne.n	800aa4a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a9e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d14a      	bne.n	800aa82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d913      	bls.n	800aa20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	1ad2      	subs	r2, r2, r3
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	68da      	ldr	r2, [r3, #12]
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	bf28      	it	cs
 800aa12:	4613      	movcs	r3, r2
 800aa14:	461a      	mov	r2, r3
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f000 ff97 	bl	800b94c <USBD_CtlContinueRx>
 800aa1e:	e030      	b.n	800aa82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00a      	beq.n	800aa42 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d105      	bne.n	800aa42 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f000 ff93 	bl	800b96e <USBD_CtlSendStatus>
 800aa48:	e01b      	b.n	800aa82 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d013      	beq.n	800aa7e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa5c:	2b03      	cmp	r3, #3
 800aa5e:	d10e      	bne.n	800aa7e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	7afa      	ldrb	r2, [r7, #11]
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	4798      	blx	r3
 800aa70:	4603      	mov	r3, r0
 800aa72:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800aa74:	7dfb      	ldrb	r3, [r7, #23]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
 800aa7c:	e002      	b.n	800aa84 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e000      	b.n	800aa84 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3718      	adds	r7, #24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	460b      	mov	r3, r1
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aa9a:	7afb      	ldrb	r3, [r7, #11]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d16a      	bne.n	800ab76 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	3314      	adds	r3, #20
 800aaa4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d155      	bne.n	800ab5c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d914      	bls.n	800aae6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	689a      	ldr	r2, [r3, #8]
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	1ad2      	subs	r2, r2, r3
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	461a      	mov	r2, r3
 800aad0:	6879      	ldr	r1, [r7, #4]
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 ff0c 	bl	800b8f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aad8:	2300      	movs	r3, #0
 800aada:	2200      	movs	r2, #0
 800aadc:	2100      	movs	r1, #0
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f001 fb85 	bl	800c1ee <USBD_LL_PrepareReceive>
 800aae4:	e03a      	b.n	800ab5c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	68da      	ldr	r2, [r3, #12]
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d11c      	bne.n	800ab2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d316      	bcc.n	800ab2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d20f      	bcs.n	800ab2c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2100      	movs	r1, #0
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 feed 	bl	800b8f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab1e:	2300      	movs	r3, #0
 800ab20:	2200      	movs	r2, #0
 800ab22:	2100      	movs	r1, #0
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f001 fb62 	bl	800c1ee <USBD_LL_PrepareReceive>
 800ab2a:	e017      	b.n	800ab5c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00a      	beq.n	800ab4e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab3e:	2b03      	cmp	r3, #3
 800ab40:	d105      	bne.n	800ab4e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab4e:	2180      	movs	r1, #128	; 0x80
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f001 faa1 	bl	800c098 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f000 ff1c 	bl	800b994 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d123      	bne.n	800abae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f7ff fe9b 	bl	800a8a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab74:	e01b      	b.n	800abae <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d013      	beq.n	800abaa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d10e      	bne.n	800abaa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	7afa      	ldrb	r2, [r7, #11]
 800ab96:	4611      	mov	r1, r2
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	4798      	blx	r3
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	e002      	b.n	800abb0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800abaa:	2303      	movs	r3, #3
 800abac:	e000      	b.n	800abb0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3718      	adds	r7, #24
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d009      	beq.n	800abfc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	6852      	ldr	r2, [r2, #4]
 800abf4:	b2d2      	uxtb	r2, r2
 800abf6:	4611      	mov	r1, r2
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abfc:	2340      	movs	r3, #64	; 0x40
 800abfe:	2200      	movs	r2, #0
 800ac00:	2100      	movs	r1, #0
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f001 fa03 	bl	800c00e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2240      	movs	r2, #64	; 0x40
 800ac14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac18:	2340      	movs	r3, #64	; 0x40
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2180      	movs	r1, #128	; 0x80
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f001 f9f5 	bl	800c00e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2240      	movs	r2, #64	; 0x40
 800ac2e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b083      	sub	sp, #12
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	460b      	mov	r3, r1
 800ac44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	78fa      	ldrb	r2, [r7, #3]
 800ac4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2204      	movs	r2, #4
 800ac72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac92:	2b04      	cmp	r3, #4
 800ac94:	d105      	bne.n	800aca2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	d10b      	bne.n	800acda <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d005      	beq.n	800acda <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acd4:	69db      	ldr	r3, [r3, #28]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	3301      	adds	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad02:	8a3b      	ldrh	r3, [r7, #16]
 800ad04:	021b      	lsls	r3, r3, #8
 800ad06:	b21a      	sxth	r2, r3
 800ad08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	b21b      	sxth	r3, r3
 800ad10:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad12:	89fb      	ldrh	r3, [r7, #14]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	371c      	adds	r7, #28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad36:	2b20      	cmp	r3, #32
 800ad38:	d004      	beq.n	800ad44 <USBD_StdDevReq+0x24>
 800ad3a:	2b40      	cmp	r3, #64	; 0x40
 800ad3c:	d002      	beq.n	800ad44 <USBD_StdDevReq+0x24>
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00a      	beq.n	800ad58 <USBD_StdDevReq+0x38>
 800ad42:	e050      	b.n	800ade6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	4798      	blx	r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	73fb      	strb	r3, [r7, #15]
    break;
 800ad56:	e04b      	b.n	800adf0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	785b      	ldrb	r3, [r3, #1]
 800ad5c:	2b09      	cmp	r3, #9
 800ad5e:	d83c      	bhi.n	800adda <USBD_StdDevReq+0xba>
 800ad60:	a201      	add	r2, pc, #4	; (adr r2, 800ad68 <USBD_StdDevReq+0x48>)
 800ad62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad66:	bf00      	nop
 800ad68:	0800adbd 	.word	0x0800adbd
 800ad6c:	0800add1 	.word	0x0800add1
 800ad70:	0800addb 	.word	0x0800addb
 800ad74:	0800adc7 	.word	0x0800adc7
 800ad78:	0800addb 	.word	0x0800addb
 800ad7c:	0800ad9b 	.word	0x0800ad9b
 800ad80:	0800ad91 	.word	0x0800ad91
 800ad84:	0800addb 	.word	0x0800addb
 800ad88:	0800adb3 	.word	0x0800adb3
 800ad8c:	0800ada5 	.word	0x0800ada5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f9d0 	bl	800b138 <USBD_GetDescriptor>
      break;
 800ad98:	e024      	b.n	800ade4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fb5f 	bl	800b460 <USBD_SetAddress>
      break;
 800ada2:	e01f      	b.n	800ade4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fb9c 	bl	800b4e4 <USBD_SetConfig>
 800adac:	4603      	mov	r3, r0
 800adae:	73fb      	strb	r3, [r7, #15]
      break;
 800adb0:	e018      	b.n	800ade4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fc39 	bl	800b62c <USBD_GetConfig>
      break;
 800adba:	e013      	b.n	800ade4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fc68 	bl	800b694 <USBD_GetStatus>
      break;
 800adc4:	e00e      	b.n	800ade4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fc96 	bl	800b6fa <USBD_SetFeature>
      break;
 800adce:	e009      	b.n	800ade4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fca5 	bl	800b722 <USBD_ClrFeature>
      break;
 800add8:	e004      	b.n	800ade4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fcfb 	bl	800b7d8 <USBD_CtlError>
      break;
 800ade2:	bf00      	nop
    }
    break;
 800ade4:	e004      	b.n	800adf0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fcf5 	bl	800b7d8 <USBD_CtlError>
    break;
 800adee:	bf00      	nop
  }

  return ret;
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop

0800adfc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	d003      	beq.n	800ae1e <USBD_StdItfReq+0x22>
 800ae16:	2b40      	cmp	r3, #64	; 0x40
 800ae18:	d001      	beq.n	800ae1e <USBD_StdItfReq+0x22>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d12a      	bne.n	800ae74 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae24:	3b01      	subs	r3, #1
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d81d      	bhi.n	800ae66 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	889b      	ldrh	r3, [r3, #4]
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d813      	bhi.n	800ae5c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	4798      	blx	r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	88db      	ldrh	r3, [r3, #6]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d110      	bne.n	800ae70 <USBD_StdItfReq+0x74>
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10d      	bne.n	800ae70 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fd8a 	bl	800b96e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ae5a:	e009      	b.n	800ae70 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fcba 	bl	800b7d8 <USBD_CtlError>
      break;
 800ae64:	e004      	b.n	800ae70 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fcb5 	bl	800b7d8 <USBD_CtlError>
      break;
 800ae6e:	e000      	b.n	800ae72 <USBD_StdItfReq+0x76>
      break;
 800ae70:	bf00      	nop
    }
    break;
 800ae72:	e004      	b.n	800ae7e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fcae 	bl	800b7d8 <USBD_CtlError>
    break;
 800ae7c:	bf00      	nop
  }

  return ret;
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae92:	2300      	movs	r3, #0
 800ae94:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	889b      	ldrh	r3, [r3, #4]
 800ae9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aea4:	2b20      	cmp	r3, #32
 800aea6:	d004      	beq.n	800aeb2 <USBD_StdEPReq+0x2a>
 800aea8:	2b40      	cmp	r3, #64	; 0x40
 800aeaa:	d002      	beq.n	800aeb2 <USBD_StdEPReq+0x2a>
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00a      	beq.n	800aec6 <USBD_StdEPReq+0x3e>
 800aeb0:	e137      	b.n	800b122 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	4798      	blx	r3
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]
    break;
 800aec4:	e132      	b.n	800b12c <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	785b      	ldrb	r3, [r3, #1]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d03e      	beq.n	800af4c <USBD_StdEPReq+0xc4>
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d002      	beq.n	800aed8 <USBD_StdEPReq+0x50>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d079      	beq.n	800afca <USBD_StdEPReq+0x142>
 800aed6:	e11e      	b.n	800b116 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d002      	beq.n	800aee8 <USBD_StdEPReq+0x60>
 800aee2:	2b03      	cmp	r3, #3
 800aee4:	d015      	beq.n	800af12 <USBD_StdEPReq+0x8a>
 800aee6:	e02b      	b.n	800af40 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00c      	beq.n	800af08 <USBD_StdEPReq+0x80>
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	2b80      	cmp	r3, #128	; 0x80
 800aef2:	d009      	beq.n	800af08 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800aef4:	7bbb      	ldrb	r3, [r7, #14]
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f001 f8cd 	bl	800c098 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aefe:	2180      	movs	r1, #128	; 0x80
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f001 f8c9 	bl	800c098 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800af06:	e020      	b.n	800af4a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fc64 	bl	800b7d8 <USBD_CtlError>
        break;
 800af10:	e01b      	b.n	800af4a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	885b      	ldrh	r3, [r3, #2]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10e      	bne.n	800af38 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af1a:	7bbb      	ldrb	r3, [r7, #14]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00b      	beq.n	800af38 <USBD_StdEPReq+0xb0>
 800af20:	7bbb      	ldrb	r3, [r7, #14]
 800af22:	2b80      	cmp	r3, #128	; 0x80
 800af24:	d008      	beq.n	800af38 <USBD_StdEPReq+0xb0>
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	88db      	ldrh	r3, [r3, #6]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d104      	bne.n	800af38 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f001 f8b0 	bl	800c098 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fd18 	bl	800b96e <USBD_CtlSendStatus>

        break;
 800af3e:	e004      	b.n	800af4a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fc48 	bl	800b7d8 <USBD_CtlError>
        break;
 800af48:	bf00      	nop
      }
      break;
 800af4a:	e0e9      	b.n	800b120 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af52:	2b02      	cmp	r3, #2
 800af54:	d002      	beq.n	800af5c <USBD_StdEPReq+0xd4>
 800af56:	2b03      	cmp	r3, #3
 800af58:	d015      	beq.n	800af86 <USBD_StdEPReq+0xfe>
 800af5a:	e02f      	b.n	800afbc <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af5c:	7bbb      	ldrb	r3, [r7, #14]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00c      	beq.n	800af7c <USBD_StdEPReq+0xf4>
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	2b80      	cmp	r3, #128	; 0x80
 800af66:	d009      	beq.n	800af7c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 f893 	bl	800c098 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800af72:	2180      	movs	r1, #128	; 0x80
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 f88f 	bl	800c098 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800af7a:	e025      	b.n	800afc8 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fc2a 	bl	800b7d8 <USBD_CtlError>
        break;
 800af84:	e020      	b.n	800afc8 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	885b      	ldrh	r3, [r3, #2]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d11b      	bne.n	800afc6 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800af8e:	7bbb      	ldrb	r3, [r7, #14]
 800af90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af94:	2b00      	cmp	r3, #0
 800af96:	d004      	beq.n	800afa2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af98:	7bbb      	ldrb	r3, [r7, #14]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 f89a 	bl	800c0d6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fce3 	bl	800b96e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	4798      	blx	r3
 800afb6:	4603      	mov	r3, r0
 800afb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800afba:	e004      	b.n	800afc6 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fc0a 	bl	800b7d8 <USBD_CtlError>
        break;
 800afc4:	e000      	b.n	800afc8 <USBD_StdEPReq+0x140>
        break;
 800afc6:	bf00      	nop
      }
      break;
 800afc8:	e0aa      	b.n	800b120 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d002      	beq.n	800afda <USBD_StdEPReq+0x152>
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d032      	beq.n	800b03e <USBD_StdEPReq+0x1b6>
 800afd8:	e097      	b.n	800b10a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d007      	beq.n	800aff0 <USBD_StdEPReq+0x168>
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b80      	cmp	r3, #128	; 0x80
 800afe4:	d004      	beq.n	800aff0 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fbf5 	bl	800b7d8 <USBD_CtlError>
          break;
 800afee:	e091      	b.n	800b114 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	da0b      	bge.n	800b010 <USBD_StdEPReq+0x188>
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
 800affa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	3310      	adds	r3, #16
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	4413      	add	r3, r2
 800b00c:	3304      	adds	r3, #4
 800b00e:	e00b      	b.n	800b028 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b016:	4613      	mov	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	4413      	add	r3, r2
 800b026:	3304      	adds	r3, #4
 800b028:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2200      	movs	r2, #0
 800b02e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2202      	movs	r2, #2
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fc3f 	bl	800b8ba <USBD_CtlSendData>
        break;
 800b03c:	e06a      	b.n	800b114 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b03e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b042:	2b00      	cmp	r3, #0
 800b044:	da11      	bge.n	800b06a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b046:	7bbb      	ldrb	r3, [r7, #14]
 800b048:	f003 020f 	and.w	r2, r3, #15
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	4613      	mov	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	440b      	add	r3, r1
 800b058:	3324      	adds	r3, #36	; 0x24
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d117      	bne.n	800b090 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fbb8 	bl	800b7d8 <USBD_CtlError>
            break;
 800b068:	e054      	b.n	800b114 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	f003 020f 	and.w	r2, r3, #15
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	4613      	mov	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	440b      	add	r3, r1
 800b07c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d104      	bne.n	800b090 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fba5 	bl	800b7d8 <USBD_CtlError>
            break;
 800b08e:	e041      	b.n	800b114 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b094:	2b00      	cmp	r3, #0
 800b096:	da0b      	bge.n	800b0b0 <USBD_StdEPReq+0x228>
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b09e:	4613      	mov	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	3310      	adds	r3, #16
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	e00b      	b.n	800b0c8 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d002      	beq.n	800b0d6 <USBD_StdEPReq+0x24e>
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	2b80      	cmp	r3, #128	; 0x80
 800b0d4:	d103      	bne.n	800b0de <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	e00e      	b.n	800b0fc <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f001 f816 	bl	800c114 <USBD_LL_IsStallEP>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d003      	beq.n	800b0f6 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	601a      	str	r2, [r3, #0]
 800b0f4:	e002      	b.n	800b0fc <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2202      	movs	r2, #2
 800b100:	4619      	mov	r1, r3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fbd9 	bl	800b8ba <USBD_CtlSendData>
          break;
 800b108:	e004      	b.n	800b114 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fb63 	bl	800b7d8 <USBD_CtlError>
        break;
 800b112:	bf00      	nop
      }
      break;
 800b114:	e004      	b.n	800b120 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fb5d 	bl	800b7d8 <USBD_CtlError>
      break;
 800b11e:	bf00      	nop
    }
    break;
 800b120:	e004      	b.n	800b12c <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fb57 	bl	800b7d8 <USBD_CtlError>
    break;
 800b12a:	bf00      	nop
  }

  return ret;
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
	...

0800b138 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b142:	2300      	movs	r3, #0
 800b144:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b14a:	2300      	movs	r3, #0
 800b14c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	885b      	ldrh	r3, [r3, #2]
 800b152:	0a1b      	lsrs	r3, r3, #8
 800b154:	b29b      	uxth	r3, r3
 800b156:	3b01      	subs	r3, #1
 800b158:	2b0e      	cmp	r3, #14
 800b15a:	f200 8152 	bhi.w	800b402 <USBD_GetDescriptor+0x2ca>
 800b15e:	a201      	add	r2, pc, #4	; (adr r2, 800b164 <USBD_GetDescriptor+0x2c>)
 800b160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b164:	0800b1d5 	.word	0x0800b1d5
 800b168:	0800b1ed 	.word	0x0800b1ed
 800b16c:	0800b22d 	.word	0x0800b22d
 800b170:	0800b403 	.word	0x0800b403
 800b174:	0800b403 	.word	0x0800b403
 800b178:	0800b3a3 	.word	0x0800b3a3
 800b17c:	0800b3cf 	.word	0x0800b3cf
 800b180:	0800b403 	.word	0x0800b403
 800b184:	0800b403 	.word	0x0800b403
 800b188:	0800b403 	.word	0x0800b403
 800b18c:	0800b403 	.word	0x0800b403
 800b190:	0800b403 	.word	0x0800b403
 800b194:	0800b403 	.word	0x0800b403
 800b198:	0800b403 	.word	0x0800b403
 800b19c:	0800b1a1 	.word	0x0800b1a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00b      	beq.n	800b1c4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b2:	69db      	ldr	r3, [r3, #28]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	7c12      	ldrb	r2, [r2, #16]
 800b1b8:	f107 0108 	add.w	r1, r7, #8
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4798      	blx	r3
 800b1c0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b1c2:	e126      	b.n	800b412 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fb06 	bl	800b7d8 <USBD_CtlError>
      err++;
 800b1cc:	7afb      	ldrb	r3, [r7, #11]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	72fb      	strb	r3, [r7, #11]
    break;
 800b1d2:	e11e      	b.n	800b412 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	7c12      	ldrb	r2, [r2, #16]
 800b1e0:	f107 0108 	add.w	r1, r7, #8
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	4798      	blx	r3
 800b1e8:	60f8      	str	r0, [r7, #12]
    break;
 800b1ea:	e112      	b.n	800b412 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	7c1b      	ldrb	r3, [r3, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10d      	bne.n	800b210 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1fc:	f107 0208 	add.w	r2, r7, #8
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
 800b204:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	3301      	adds	r3, #1
 800b20a:	2202      	movs	r2, #2
 800b20c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b20e:	e100      	b.n	800b412 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b218:	f107 0208 	add.w	r2, r7, #8
 800b21c:	4610      	mov	r0, r2
 800b21e:	4798      	blx	r3
 800b220:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3301      	adds	r3, #1
 800b226:	2202      	movs	r2, #2
 800b228:	701a      	strb	r2, [r3, #0]
    break;
 800b22a:	e0f2      	b.n	800b412 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	885b      	ldrh	r3, [r3, #2]
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b05      	cmp	r3, #5
 800b234:	f200 80ac 	bhi.w	800b390 <USBD_GetDescriptor+0x258>
 800b238:	a201      	add	r2, pc, #4	; (adr r2, 800b240 <USBD_GetDescriptor+0x108>)
 800b23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23e:	bf00      	nop
 800b240:	0800b259 	.word	0x0800b259
 800b244:	0800b28d 	.word	0x0800b28d
 800b248:	0800b2c1 	.word	0x0800b2c1
 800b24c:	0800b2f5 	.word	0x0800b2f5
 800b250:	0800b329 	.word	0x0800b329
 800b254:	0800b35d 	.word	0x0800b35d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00b      	beq.n	800b27c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	7c12      	ldrb	r2, [r2, #16]
 800b270:	f107 0108 	add.w	r1, r7, #8
 800b274:	4610      	mov	r0, r2
 800b276:	4798      	blx	r3
 800b278:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b27a:	e091      	b.n	800b3a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 faaa 	bl	800b7d8 <USBD_CtlError>
        err++;
 800b284:	7afb      	ldrb	r3, [r7, #11]
 800b286:	3301      	adds	r3, #1
 800b288:	72fb      	strb	r3, [r7, #11]
      break;
 800b28a:	e089      	b.n	800b3a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00b      	beq.n	800b2b0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	7c12      	ldrb	r2, [r2, #16]
 800b2a4:	f107 0108 	add.w	r1, r7, #8
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	4798      	blx	r3
 800b2ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2ae:	e077      	b.n	800b3a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fa90 	bl	800b7d8 <USBD_CtlError>
        err++;
 800b2b8:	7afb      	ldrb	r3, [r7, #11]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	72fb      	strb	r3, [r7, #11]
      break;
 800b2be:	e06f      	b.n	800b3a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00b      	beq.n	800b2e4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	7c12      	ldrb	r2, [r2, #16]
 800b2d8:	f107 0108 	add.w	r1, r7, #8
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4798      	blx	r3
 800b2e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2e2:	e05d      	b.n	800b3a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b2e4:	6839      	ldr	r1, [r7, #0]
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fa76 	bl	800b7d8 <USBD_CtlError>
        err++;
 800b2ec:	7afb      	ldrb	r3, [r7, #11]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	72fb      	strb	r3, [r7, #11]
      break;
 800b2f2:	e055      	b.n	800b3a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	7c12      	ldrb	r2, [r2, #16]
 800b30c:	f107 0108 	add.w	r1, r7, #8
 800b310:	4610      	mov	r0, r2
 800b312:	4798      	blx	r3
 800b314:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b316:	e043      	b.n	800b3a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fa5c 	bl	800b7d8 <USBD_CtlError>
        err++;
 800b320:	7afb      	ldrb	r3, [r7, #11]
 800b322:	3301      	adds	r3, #1
 800b324:	72fb      	strb	r3, [r7, #11]
      break;
 800b326:	e03b      	b.n	800b3a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00b      	beq.n	800b34c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	7c12      	ldrb	r2, [r2, #16]
 800b340:	f107 0108 	add.w	r1, r7, #8
 800b344:	4610      	mov	r0, r2
 800b346:	4798      	blx	r3
 800b348:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b34a:	e029      	b.n	800b3a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fa42 	bl	800b7d8 <USBD_CtlError>
        err++;
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	3301      	adds	r3, #1
 800b358:	72fb      	strb	r3, [r7, #11]
      break;
 800b35a:	e021      	b.n	800b3a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00b      	beq.n	800b380 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	7c12      	ldrb	r2, [r2, #16]
 800b374:	f107 0108 	add.w	r1, r7, #8
 800b378:	4610      	mov	r0, r2
 800b37a:	4798      	blx	r3
 800b37c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b37e:	e00f      	b.n	800b3a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa28 	bl	800b7d8 <USBD_CtlError>
        err++;
 800b388:	7afb      	ldrb	r3, [r7, #11]
 800b38a:	3301      	adds	r3, #1
 800b38c:	72fb      	strb	r3, [r7, #11]
      break;
 800b38e:	e007      	b.n	800b3a0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fa20 	bl	800b7d8 <USBD_CtlError>
      err++;
 800b398:	7afb      	ldrb	r3, [r7, #11]
 800b39a:	3301      	adds	r3, #1
 800b39c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b39e:	bf00      	nop
    }
    break;
 800b3a0:	e037      	b.n	800b412 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	7c1b      	ldrb	r3, [r3, #16]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d109      	bne.n	800b3be <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b2:	f107 0208 	add.w	r2, r7, #8
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	4798      	blx	r3
 800b3ba:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b3bc:	e029      	b.n	800b412 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fa09 	bl	800b7d8 <USBD_CtlError>
      err++;
 800b3c6:	7afb      	ldrb	r3, [r7, #11]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	72fb      	strb	r3, [r7, #11]
    break;
 800b3cc:	e021      	b.n	800b412 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	7c1b      	ldrb	r3, [r3, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10d      	bne.n	800b3f2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3de:	f107 0208 	add.w	r2, r7, #8
 800b3e2:	4610      	mov	r0, r2
 800b3e4:	4798      	blx	r3
 800b3e6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	2207      	movs	r2, #7
 800b3ee:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b3f0:	e00f      	b.n	800b412 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b3f2:	6839      	ldr	r1, [r7, #0]
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 f9ef 	bl	800b7d8 <USBD_CtlError>
      err++;
 800b3fa:	7afb      	ldrb	r3, [r7, #11]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	72fb      	strb	r3, [r7, #11]
    break;
 800b400:	e007      	b.n	800b412 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f9e7 	bl	800b7d8 <USBD_CtlError>
    err++;
 800b40a:	7afb      	ldrb	r3, [r7, #11]
 800b40c:	3301      	adds	r3, #1
 800b40e:	72fb      	strb	r3, [r7, #11]
    break;
 800b410:	bf00      	nop
  }

  if (err != 0U)
 800b412:	7afb      	ldrb	r3, [r7, #11]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d11e      	bne.n	800b456 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	88db      	ldrh	r3, [r3, #6]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d016      	beq.n	800b44e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800b420:	893b      	ldrh	r3, [r7, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00e      	beq.n	800b444 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	88da      	ldrh	r2, [r3, #6]
 800b42a:	893b      	ldrh	r3, [r7, #8]
 800b42c:	4293      	cmp	r3, r2
 800b42e:	bf28      	it	cs
 800b430:	4613      	movcs	r3, r2
 800b432:	b29b      	uxth	r3, r3
 800b434:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b436:	893b      	ldrh	r3, [r7, #8]
 800b438:	461a      	mov	r2, r3
 800b43a:	68f9      	ldr	r1, [r7, #12]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fa3c 	bl	800b8ba <USBD_CtlSendData>
 800b442:	e009      	b.n	800b458 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f9c6 	bl	800b7d8 <USBD_CtlError>
 800b44c:	e004      	b.n	800b458 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fa8d 	bl	800b96e <USBD_CtlSendStatus>
 800b454:	e000      	b.n	800b458 <USBD_GetDescriptor+0x320>
    return;
 800b456:	bf00      	nop
    }
  }
}
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop

0800b460 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	889b      	ldrh	r3, [r3, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d130      	bne.n	800b4d4 <USBD_SetAddress+0x74>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	88db      	ldrh	r3, [r3, #6]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d12c      	bne.n	800b4d4 <USBD_SetAddress+0x74>
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	885b      	ldrh	r3, [r3, #2]
 800b47e:	2b7f      	cmp	r3, #127	; 0x7f
 800b480:	d828      	bhi.n	800b4d4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	885b      	ldrh	r3, [r3, #2]
 800b486:	b2db      	uxtb	r3, r3
 800b488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b48c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b494:	2b03      	cmp	r3, #3
 800b496:	d104      	bne.n	800b4a2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f99c 	bl	800b7d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a0:	e01c      	b.n	800b4dc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	7bfa      	ldrb	r2, [r7, #15]
 800b4a6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fe5d 	bl	800c16e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fa5a 	bl	800b96e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d004      	beq.n	800b4ca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4c8:	e008      	b.n	800b4dc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4d2:	e003      	b.n	800b4dc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f97e 	bl	800b7d8 <USBD_CtlError>
  }
}
 800b4dc:	bf00      	nop
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	885b      	ldrh	r3, [r3, #2]
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	4b4b      	ldr	r3, [pc, #300]	; (800b628 <USBD_SetConfig+0x144>)
 800b4fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b4fc:	4b4a      	ldr	r3, [pc, #296]	; (800b628 <USBD_SetConfig+0x144>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d905      	bls.n	800b510 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f966 	bl	800b7d8 <USBD_CtlError>
    return USBD_FAIL;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e087      	b.n	800b620 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b516:	2b02      	cmp	r3, #2
 800b518:	d002      	beq.n	800b520 <USBD_SetConfig+0x3c>
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d025      	beq.n	800b56a <USBD_SetConfig+0x86>
 800b51e:	e071      	b.n	800b604 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b520:	4b41      	ldr	r3, [pc, #260]	; (800b628 <USBD_SetConfig+0x144>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d01c      	beq.n	800b562 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b528:	4b3f      	ldr	r3, [pc, #252]	; (800b628 <USBD_SetConfig+0x144>)
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	461a      	mov	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b532:	4b3d      	ldr	r3, [pc, #244]	; (800b628 <USBD_SetConfig+0x144>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff f9bd 	bl	800a8b8 <USBD_SetClassConfig>
 800b53e:	4603      	mov	r3, r0
 800b540:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b542:	7bfb      	ldrb	r3, [r7, #15]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d004      	beq.n	800b552 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f944 	bl	800b7d8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b550:	e065      	b.n	800b61e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 fa0b 	bl	800b96e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2203      	movs	r2, #3
 800b55c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b560:	e05d      	b.n	800b61e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fa03 	bl	800b96e <USBD_CtlSendStatus>
    break;
 800b568:	e059      	b.n	800b61e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b56a:	4b2f      	ldr	r3, [pc, #188]	; (800b628 <USBD_SetConfig+0x144>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d112      	bne.n	800b598 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2202      	movs	r2, #2
 800b576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b57a:	4b2b      	ldr	r3, [pc, #172]	; (800b628 <USBD_SetConfig+0x144>)
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	461a      	mov	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b584:	4b28      	ldr	r3, [pc, #160]	; (800b628 <USBD_SetConfig+0x144>)
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff f9b0 	bl	800a8f0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f9ec 	bl	800b96e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b596:	e042      	b.n	800b61e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b598:	4b23      	ldr	r3, [pc, #140]	; (800b628 <USBD_SetConfig+0x144>)
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	461a      	mov	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d02a      	beq.n	800b5fc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff f99e 	bl	800a8f0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b5b4:	4b1c      	ldr	r3, [pc, #112]	; (800b628 <USBD_SetConfig+0x144>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5be:	4b1a      	ldr	r3, [pc, #104]	; (800b628 <USBD_SetConfig+0x144>)
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff f977 	bl	800a8b8 <USBD_SetClassConfig>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00f      	beq.n	800b5f4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f8fe 	bl	800b7d8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff f983 	bl	800a8f0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b5f2:	e014      	b.n	800b61e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f9ba 	bl	800b96e <USBD_CtlSendStatus>
    break;
 800b5fa:	e010      	b.n	800b61e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 f9b6 	bl	800b96e <USBD_CtlSendStatus>
    break;
 800b602:	e00c      	b.n	800b61e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f8e6 	bl	800b7d8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b60c:	4b06      	ldr	r3, [pc, #24]	; (800b628 <USBD_SetConfig+0x144>)
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	4619      	mov	r1, r3
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7ff f96c 	bl	800a8f0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b618:	2303      	movs	r3, #3
 800b61a:	73fb      	strb	r3, [r7, #15]
    break;
 800b61c:	bf00      	nop
  }

  return ret;
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	2000020c 	.word	0x2000020c

0800b62c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	88db      	ldrh	r3, [r3, #6]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d004      	beq.n	800b648 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f8c9 	bl	800b7d8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b646:	e021      	b.n	800b68c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64e:	2b01      	cmp	r3, #1
 800b650:	db17      	blt.n	800b682 <USBD_GetConfig+0x56>
 800b652:	2b02      	cmp	r3, #2
 800b654:	dd02      	ble.n	800b65c <USBD_GetConfig+0x30>
 800b656:	2b03      	cmp	r3, #3
 800b658:	d00b      	beq.n	800b672 <USBD_GetConfig+0x46>
 800b65a:	e012      	b.n	800b682 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3308      	adds	r3, #8
 800b666:	2201      	movs	r2, #1
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f925 	bl	800b8ba <USBD_CtlSendData>
      break;
 800b670:	e00c      	b.n	800b68c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3304      	adds	r3, #4
 800b676:	2201      	movs	r2, #1
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f91d 	bl	800b8ba <USBD_CtlSendData>
      break;
 800b680:	e004      	b.n	800b68c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f8a7 	bl	800b7d8 <USBD_CtlError>
      break;
 800b68a:	bf00      	nop
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d81e      	bhi.n	800b6e8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	88db      	ldrh	r3, [r3, #6]
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d004      	beq.n	800b6bc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f88f 	bl	800b7d8 <USBD_CtlError>
      break;
 800b6ba:	e01a      	b.n	800b6f2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d005      	beq.n	800b6d8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	f043 0202 	orr.w	r2, r3, #2
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	330c      	adds	r3, #12
 800b6dc:	2202      	movs	r2, #2
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f8ea 	bl	800b8ba <USBD_CtlSendData>
    break;
 800b6e6:	e004      	b.n	800b6f2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f874 	bl	800b7d8 <USBD_CtlError>
    break;
 800b6f0:	bf00      	nop
  }
}
 800b6f2:	bf00      	nop
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b082      	sub	sp, #8
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	885b      	ldrh	r3, [r3, #2]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d106      	bne.n	800b71a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f92a 	bl	800b96e <USBD_CtlSendStatus>
  }
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b732:	3b01      	subs	r3, #1
 800b734:	2b02      	cmp	r3, #2
 800b736:	d80b      	bhi.n	800b750 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	885b      	ldrh	r3, [r3, #2]
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d10c      	bne.n	800b75a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f910 	bl	800b96e <USBD_CtlSendStatus>
      }
      break;
 800b74e:	e004      	b.n	800b75a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b750:	6839      	ldr	r1, [r7, #0]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f840 	bl	800b7d8 <USBD_CtlError>
      break;
 800b758:	e000      	b.n	800b75c <USBD_ClrFeature+0x3a>
      break;
 800b75a:	bf00      	nop
  }
}
 800b75c:	bf00      	nop
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	781a      	ldrb	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	3301      	adds	r3, #1
 800b77e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	781a      	ldrb	r2, [r3, #0]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	3301      	adds	r3, #1
 800b78c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f7ff faa8 	bl	800ace4 <SWAPBYTE>
 800b794:	4603      	mov	r3, r0
 800b796:	461a      	mov	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7ff fa9b 	bl	800ace4 <SWAPBYTE>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f7ff fa8e 	bl	800ace4 <SWAPBYTE>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	80da      	strh	r2, [r3, #6]
}
 800b7d0:	bf00      	nop
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7e2:	2180      	movs	r1, #128	; 0x80
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 fc57 	bl	800c098 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 fc53 	bl	800c098 <USBD_LL_StallEP>
}
 800b7f2:	bf00      	nop
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b086      	sub	sp, #24
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	60f8      	str	r0, [r7, #12]
 800b802:	60b9      	str	r1, [r7, #8]
 800b804:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b806:	2300      	movs	r3, #0
 800b808:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d036      	beq.n	800b87e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b814:	6938      	ldr	r0, [r7, #16]
 800b816:	f000 f836 	bl	800b886 <USBD_GetLen>
 800b81a:	4603      	mov	r3, r0
 800b81c:	3301      	adds	r3, #1
 800b81e:	b29b      	uxth	r3, r3
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	b29a      	uxth	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b828:	7dfb      	ldrb	r3, [r7, #23]
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	4413      	add	r3, r2
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	7812      	ldrb	r2, [r2, #0]
 800b832:	701a      	strb	r2, [r3, #0]
  idx++;
 800b834:	7dfb      	ldrb	r3, [r7, #23]
 800b836:	3301      	adds	r3, #1
 800b838:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	4413      	add	r3, r2
 800b840:	2203      	movs	r2, #3
 800b842:	701a      	strb	r2, [r3, #0]
  idx++;
 800b844:	7dfb      	ldrb	r3, [r7, #23]
 800b846:	3301      	adds	r3, #1
 800b848:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b84a:	e013      	b.n	800b874 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b84c:	7dfb      	ldrb	r3, [r7, #23]
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	4413      	add	r3, r2
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	7812      	ldrb	r2, [r2, #0]
 800b856:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	3301      	adds	r3, #1
 800b85c:	613b      	str	r3, [r7, #16]
    idx++;
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	3301      	adds	r3, #1
 800b862:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b864:	7dfb      	ldrb	r3, [r7, #23]
 800b866:	68ba      	ldr	r2, [r7, #8]
 800b868:	4413      	add	r3, r2
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	3301      	adds	r3, #1
 800b872:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1e7      	bne.n	800b84c <USBD_GetString+0x52>
 800b87c:	e000      	b.n	800b880 <USBD_GetString+0x86>
    return;
 800b87e:	bf00      	nop
  }
}
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b886:	b480      	push	{r7}
 800b888:	b085      	sub	sp, #20
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b88e:	2300      	movs	r3, #0
 800b890:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b896:	e005      	b.n	800b8a4 <USBD_GetLen+0x1e>
  {
    len++;
 800b898:	7bfb      	ldrb	r3, [r7, #15]
 800b89a:	3301      	adds	r3, #1
 800b89c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1f5      	bne.n	800b898 <USBD_GetLen+0x12>
  }

  return len;
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b084      	sub	sp, #16
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	60f8      	str	r0, [r7, #12]
 800b8c2:	60b9      	str	r1, [r7, #8]
 800b8c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	2100      	movs	r1, #0
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f000 fc63 	bl	800c1ac <USBD_LL_Transmit>

  return USBD_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	2100      	movs	r1, #0
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f000 fc52 	bl	800c1ac <USBD_LL_Transmit>

  return USBD_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	60f8      	str	r0, [r7, #12]
 800b91a:	60b9      	str	r1, [r7, #8]
 800b91c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2203      	movs	r2, #3
 800b922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	2100      	movs	r1, #0
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 fc56 	bl	800c1ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	2100      	movs	r1, #0
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f000 fc45 	bl	800c1ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2204      	movs	r2, #4
 800b97a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b97e:	2300      	movs	r3, #0
 800b980:	2200      	movs	r2, #0
 800b982:	2100      	movs	r1, #0
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fc11 	bl	800c1ac <USBD_LL_Transmit>

  return USBD_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2205      	movs	r2, #5
 800b9a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fc1f 	bl	800c1ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3708      	adds	r7, #8
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
	...

0800b9bc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	4912      	ldr	r1, [pc, #72]	; (800ba0c <MX_USB_Device_Init+0x50>)
 800b9c4:	4812      	ldr	r0, [pc, #72]	; (800ba10 <MX_USB_Device_Init+0x54>)
 800b9c6:	f7fe ff09 	bl	800a7dc <USBD_Init>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d001      	beq.n	800b9d4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b9d0:	f7f5 fb1c 	bl	800100c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b9d4:	490f      	ldr	r1, [pc, #60]	; (800ba14 <MX_USB_Device_Init+0x58>)
 800b9d6:	480e      	ldr	r0, [pc, #56]	; (800ba10 <MX_USB_Device_Init+0x54>)
 800b9d8:	f7fe ff30 	bl	800a83c <USBD_RegisterClass>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d001      	beq.n	800b9e6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b9e2:	f7f5 fb13 	bl	800100c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b9e6:	490c      	ldr	r1, [pc, #48]	; (800ba18 <MX_USB_Device_Init+0x5c>)
 800b9e8:	4809      	ldr	r0, [pc, #36]	; (800ba10 <MX_USB_Device_Init+0x54>)
 800b9ea:	f7fe fe8b 	bl	800a704 <USBD_CDC_RegisterInterface>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d001      	beq.n	800b9f8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b9f4:	f7f5 fb0a 	bl	800100c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b9f8:	4805      	ldr	r0, [pc, #20]	; (800ba10 <MX_USB_Device_Init+0x54>)
 800b9fa:	f7fe ff46 	bl	800a88a <USBD_Start>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ba04:	f7f5 fb02 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ba08:	bf00      	nop
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	20000130 	.word	0x20000130
 800ba10:	20000758 	.word	0x20000758
 800ba14:	20000018 	.word	0x20000018
 800ba18:	2000011c 	.word	0x2000011c

0800ba1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ba20:	2200      	movs	r2, #0
 800ba22:	4905      	ldr	r1, [pc, #20]	; (800ba38 <CDC_Init_FS+0x1c>)
 800ba24:	4805      	ldr	r0, [pc, #20]	; (800ba3c <CDC_Init_FS+0x20>)
 800ba26:	f7fe fe82 	bl	800a72e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba2a:	4905      	ldr	r1, [pc, #20]	; (800ba40 <CDC_Init_FS+0x24>)
 800ba2c:	4803      	ldr	r0, [pc, #12]	; (800ba3c <CDC_Init_FS+0x20>)
 800ba2e:	f7fe fe97 	bl	800a760 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	20000e10 	.word	0x20000e10
 800ba3c:	20000758 	.word	0x20000758
 800ba40:	20000a28 	.word	0x20000a28

0800ba44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ba44:	b480      	push	{r7}
 800ba46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ba48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	6039      	str	r1, [r7, #0]
 800ba5e:	71fb      	strb	r3, [r7, #7]
 800ba60:	4613      	mov	r3, r2
 800ba62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	2b23      	cmp	r3, #35	; 0x23
 800ba68:	d84a      	bhi.n	800bb00 <CDC_Control_FS+0xac>
 800ba6a:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <CDC_Control_FS+0x1c>)
 800ba6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba70:	0800bb01 	.word	0x0800bb01
 800ba74:	0800bb01 	.word	0x0800bb01
 800ba78:	0800bb01 	.word	0x0800bb01
 800ba7c:	0800bb01 	.word	0x0800bb01
 800ba80:	0800bb01 	.word	0x0800bb01
 800ba84:	0800bb01 	.word	0x0800bb01
 800ba88:	0800bb01 	.word	0x0800bb01
 800ba8c:	0800bb01 	.word	0x0800bb01
 800ba90:	0800bb01 	.word	0x0800bb01
 800ba94:	0800bb01 	.word	0x0800bb01
 800ba98:	0800bb01 	.word	0x0800bb01
 800ba9c:	0800bb01 	.word	0x0800bb01
 800baa0:	0800bb01 	.word	0x0800bb01
 800baa4:	0800bb01 	.word	0x0800bb01
 800baa8:	0800bb01 	.word	0x0800bb01
 800baac:	0800bb01 	.word	0x0800bb01
 800bab0:	0800bb01 	.word	0x0800bb01
 800bab4:	0800bb01 	.word	0x0800bb01
 800bab8:	0800bb01 	.word	0x0800bb01
 800babc:	0800bb01 	.word	0x0800bb01
 800bac0:	0800bb01 	.word	0x0800bb01
 800bac4:	0800bb01 	.word	0x0800bb01
 800bac8:	0800bb01 	.word	0x0800bb01
 800bacc:	0800bb01 	.word	0x0800bb01
 800bad0:	0800bb01 	.word	0x0800bb01
 800bad4:	0800bb01 	.word	0x0800bb01
 800bad8:	0800bb01 	.word	0x0800bb01
 800badc:	0800bb01 	.word	0x0800bb01
 800bae0:	0800bb01 	.word	0x0800bb01
 800bae4:	0800bb01 	.word	0x0800bb01
 800bae8:	0800bb01 	.word	0x0800bb01
 800baec:	0800bb01 	.word	0x0800bb01
 800baf0:	0800bb01 	.word	0x0800bb01
 800baf4:	0800bb01 	.word	0x0800bb01
 800baf8:	0800bb01 	.word	0x0800bb01
 800bafc:	0800bb01 	.word	0x0800bb01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb00:	bf00      	nop
  }

  return (USBD_OK);
 800bb02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb1a:	6879      	ldr	r1, [r7, #4]
 800bb1c:	4805      	ldr	r0, [pc, #20]	; (800bb34 <CDC_Receive_FS+0x24>)
 800bb1e:	f7fe fe1f 	bl	800a760 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bb22:	4804      	ldr	r0, [pc, #16]	; (800bb34 <CDC_Receive_FS+0x24>)
 800bb24:	f7fe fe30 	bl	800a788 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bb28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20000758 	.word	0x20000758

0800bb38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	4613      	mov	r3, r2
 800bb44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bb4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	371c      	adds	r7, #28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
	...

0800bb5c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4603      	mov	r3, r0
 800bb64:	6039      	str	r1, [r7, #0]
 800bb66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2212      	movs	r2, #18
 800bb6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bb6e:	4b03      	ldr	r3, [pc, #12]	; (800bb7c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	20000150 	.word	0x20000150

0800bb80 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	6039      	str	r1, [r7, #0]
 800bb8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2204      	movs	r2, #4
 800bb90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb92:	4b03      	ldr	r3, [pc, #12]	; (800bba0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	20000164 	.word	0x20000164

0800bba4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	4603      	mov	r3, r0
 800bbac:	6039      	str	r1, [r7, #0]
 800bbae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbb0:	79fb      	ldrb	r3, [r7, #7]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d105      	bne.n	800bbc2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	4907      	ldr	r1, [pc, #28]	; (800bbd8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bbba:	4808      	ldr	r0, [pc, #32]	; (800bbdc <USBD_CDC_ProductStrDescriptor+0x38>)
 800bbbc:	f7ff fe1d 	bl	800b7fa <USBD_GetString>
 800bbc0:	e004      	b.n	800bbcc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	4904      	ldr	r1, [pc, #16]	; (800bbd8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bbc6:	4805      	ldr	r0, [pc, #20]	; (800bbdc <USBD_CDC_ProductStrDescriptor+0x38>)
 800bbc8:	f7ff fe17 	bl	800b7fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbcc:	4b02      	ldr	r3, [pc, #8]	; (800bbd8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	200011f8 	.word	0x200011f8
 800bbdc:	0800ce34 	.word	0x0800ce34

0800bbe0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	6039      	str	r1, [r7, #0]
 800bbea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bbec:	683a      	ldr	r2, [r7, #0]
 800bbee:	4904      	ldr	r1, [pc, #16]	; (800bc00 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bbf0:	4804      	ldr	r0, [pc, #16]	; (800bc04 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bbf2:	f7ff fe02 	bl	800b7fa <USBD_GetString>
  return USBD_StrDesc;
 800bbf6:	4b02      	ldr	r3, [pc, #8]	; (800bc00 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	200011f8 	.word	0x200011f8
 800bc04:	0800ce4c 	.word	0x0800ce4c

0800bc08 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	6039      	str	r1, [r7, #0]
 800bc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	221a      	movs	r2, #26
 800bc18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc1a:	f000 f843 	bl	800bca4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bc1e:	4b02      	ldr	r3, [pc, #8]	; (800bc28 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	20000168 	.word	0x20000168

0800bc2c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	4603      	mov	r3, r0
 800bc34:	6039      	str	r1, [r7, #0]
 800bc36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc38:	79fb      	ldrb	r3, [r7, #7]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d105      	bne.n	800bc4a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	4907      	ldr	r1, [pc, #28]	; (800bc60 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bc42:	4808      	ldr	r0, [pc, #32]	; (800bc64 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bc44:	f7ff fdd9 	bl	800b7fa <USBD_GetString>
 800bc48:	e004      	b.n	800bc54 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	4904      	ldr	r1, [pc, #16]	; (800bc60 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bc4e:	4805      	ldr	r0, [pc, #20]	; (800bc64 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bc50:	f7ff fdd3 	bl	800b7fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc54:	4b02      	ldr	r3, [pc, #8]	; (800bc60 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	200011f8 	.word	0x200011f8
 800bc64:	0800ce60 	.word	0x0800ce60

0800bc68 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	6039      	str	r1, [r7, #0]
 800bc72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc74:	79fb      	ldrb	r3, [r7, #7]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d105      	bne.n	800bc86 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	4907      	ldr	r1, [pc, #28]	; (800bc9c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bc7e:	4808      	ldr	r0, [pc, #32]	; (800bca0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bc80:	f7ff fdbb 	bl	800b7fa <USBD_GetString>
 800bc84:	e004      	b.n	800bc90 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bc86:	683a      	ldr	r2, [r7, #0]
 800bc88:	4904      	ldr	r1, [pc, #16]	; (800bc9c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bc8a:	4805      	ldr	r0, [pc, #20]	; (800bca0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bc8c:	f7ff fdb5 	bl	800b7fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc90:	4b02      	ldr	r3, [pc, #8]	; (800bc9c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	200011f8 	.word	0x200011f8
 800bca0:	0800ce6c 	.word	0x0800ce6c

0800bca4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bcaa:	4b0f      	ldr	r3, [pc, #60]	; (800bce8 <Get_SerialNum+0x44>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bcb0:	4b0e      	ldr	r3, [pc, #56]	; (800bcec <Get_SerialNum+0x48>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bcb6:	4b0e      	ldr	r3, [pc, #56]	; (800bcf0 <Get_SerialNum+0x4c>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d009      	beq.n	800bcde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bcca:	2208      	movs	r2, #8
 800bccc:	4909      	ldr	r1, [pc, #36]	; (800bcf4 <Get_SerialNum+0x50>)
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f000 f814 	bl	800bcfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bcd4:	2204      	movs	r2, #4
 800bcd6:	4908      	ldr	r1, [pc, #32]	; (800bcf8 <Get_SerialNum+0x54>)
 800bcd8:	68b8      	ldr	r0, [r7, #8]
 800bcda:	f000 f80f 	bl	800bcfc <IntToUnicode>
  }
}
 800bcde:	bf00      	nop
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	1fff7590 	.word	0x1fff7590
 800bcec:	1fff7594 	.word	0x1fff7594
 800bcf0:	1fff7598 	.word	0x1fff7598
 800bcf4:	2000016a 	.word	0x2000016a
 800bcf8:	2000017a 	.word	0x2000017a

0800bcfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	4613      	mov	r3, r2
 800bd08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd0e:	2300      	movs	r3, #0
 800bd10:	75fb      	strb	r3, [r7, #23]
 800bd12:	e027      	b.n	800bd64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	0f1b      	lsrs	r3, r3, #28
 800bd18:	2b09      	cmp	r3, #9
 800bd1a:	d80b      	bhi.n	800bd34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	0f1b      	lsrs	r3, r3, #28
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	4619      	mov	r1, r3
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	440b      	add	r3, r1
 800bd2c:	3230      	adds	r2, #48	; 0x30
 800bd2e:	b2d2      	uxtb	r2, r2
 800bd30:	701a      	strb	r2, [r3, #0]
 800bd32:	e00a      	b.n	800bd4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	0f1b      	lsrs	r3, r3, #28
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	4619      	mov	r1, r3
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	440b      	add	r3, r1
 800bd44:	3237      	adds	r2, #55	; 0x37
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	011b      	lsls	r3, r3, #4
 800bd4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd50:	7dfb      	ldrb	r3, [r7, #23]
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	3301      	adds	r3, #1
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	4413      	add	r3, r2
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd5e:	7dfb      	ldrb	r3, [r7, #23]
 800bd60:	3301      	adds	r3, #1
 800bd62:	75fb      	strb	r3, [r7, #23]
 800bd64:	7dfa      	ldrb	r2, [r7, #23]
 800bd66:	79fb      	ldrb	r3, [r7, #7]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d3d3      	bcc.n	800bd14 <IntToUnicode+0x18>
  }
}
 800bd6c:	bf00      	nop
 800bd6e:	371c      	adds	r7, #28
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a0d      	ldr	r2, [pc, #52]	; (800bdbc <HAL_PCD_MspInit+0x44>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d113      	bne.n	800bdb2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bd8a:	4b0d      	ldr	r3, [pc, #52]	; (800bdc0 <HAL_PCD_MspInit+0x48>)
 800bd8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8e:	4a0c      	ldr	r2, [pc, #48]	; (800bdc0 <HAL_PCD_MspInit+0x48>)
 800bd90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bd94:	6593      	str	r3, [r2, #88]	; 0x58
 800bd96:	4b0a      	ldr	r3, [pc, #40]	; (800bdc0 <HAL_PCD_MspInit+0x48>)
 800bd98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd9e:	60fb      	str	r3, [r7, #12]
 800bda0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bda2:	2200      	movs	r2, #0
 800bda4:	2100      	movs	r1, #0
 800bda6:	2014      	movs	r0, #20
 800bda8:	f7f5 ffd9 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bdac:	2014      	movs	r0, #20
 800bdae:	f7f5 fff0 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bdb2:	bf00      	nop
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	40005c00 	.word	0x40005c00
 800bdc0:	40021000 	.word	0x40021000

0800bdc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4610      	mov	r0, r2
 800bddc:	f7fe fda0 	bl	800a920 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800bdfa:	78fa      	ldrb	r2, [r7, #3]
 800bdfc:	6879      	ldr	r1, [r7, #4]
 800bdfe:	4613      	mov	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	440b      	add	r3, r1
 800be08:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	78fb      	ldrb	r3, [r7, #3]
 800be10:	4619      	mov	r1, r3
 800be12:	f7fe fdd8 	bl	800a9c6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800be16:	bf00      	nop
 800be18:	3708      	adds	r7, #8
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b082      	sub	sp, #8
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	460b      	mov	r3, r1
 800be28:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800be30:	78fa      	ldrb	r2, [r7, #3]
 800be32:	6879      	ldr	r1, [r7, #4]
 800be34:	4613      	mov	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4413      	add	r3, r2
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	440b      	add	r3, r1
 800be3e:	333c      	adds	r3, #60	; 0x3c
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	78fb      	ldrb	r3, [r7, #3]
 800be44:	4619      	mov	r1, r3
 800be46:	f7fe fe21 	bl	800aa8c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800be4a:	bf00      	nop
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b082      	sub	sp, #8
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe ff25 	bl	800acb0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800be66:	bf00      	nop
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b084      	sub	sp, #16
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be76:	2301      	movs	r3, #1
 800be78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d001      	beq.n	800be86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be82:	f7f5 f8c3 	bl	800100c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be8c:	7bfa      	ldrb	r2, [r7, #15]
 800be8e:	4611      	mov	r1, r2
 800be90:	4618      	mov	r0, r3
 800be92:	f7fe fed2 	bl	800ac3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fe fe8b 	bl	800abb8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bea2:	bf00      	nop
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
	...

0800beac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fe fecd 	bl	800ac5a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	699b      	ldr	r3, [r3, #24]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d005      	beq.n	800bed4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bec8:	4b04      	ldr	r3, [pc, #16]	; (800bedc <HAL_PCD_SuspendCallback+0x30>)
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	4a03      	ldr	r2, [pc, #12]	; (800bedc <HAL_PCD_SuspendCallback+0x30>)
 800bece:	f043 0306 	orr.w	r3, r3, #6
 800bed2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	e000ed00 	.word	0xe000ed00

0800bee0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	699b      	ldr	r3, [r3, #24]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d007      	beq.n	800bf00 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bef0:	4b08      	ldr	r3, [pc, #32]	; (800bf14 <HAL_PCD_ResumeCallback+0x34>)
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	4a07      	ldr	r2, [pc, #28]	; (800bf14 <HAL_PCD_ResumeCallback+0x34>)
 800bef6:	f023 0306 	bic.w	r3, r3, #6
 800befa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800befc:	f000 f9fa 	bl	800c2f4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fe febc 	bl	800ac84 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	e000ed00 	.word	0xe000ed00

0800bf18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bf20:	4a2b      	ldr	r2, [pc, #172]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a29      	ldr	r2, [pc, #164]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bf30:	4b27      	ldr	r3, [pc, #156]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf32:	4a28      	ldr	r2, [pc, #160]	; (800bfd4 <USBD_LL_Init+0xbc>)
 800bf34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bf36:	4b26      	ldr	r3, [pc, #152]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf38:	2208      	movs	r2, #8
 800bf3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf3c:	4b24      	ldr	r3, [pc, #144]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf3e:	2202      	movs	r2, #2
 800bf40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf42:	4b23      	ldr	r3, [pc, #140]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf44:	2202      	movs	r2, #2
 800bf46:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bf48:	4b21      	ldr	r3, [pc, #132]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf4e:	4b20      	ldr	r3, [pc, #128]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bf54:	4b1e      	ldr	r3, [pc, #120]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf56:	2200      	movs	r2, #0
 800bf58:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bf5a:	4b1d      	ldr	r3, [pc, #116]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bf60:	481b      	ldr	r0, [pc, #108]	; (800bfd0 <USBD_LL_Init+0xb8>)
 800bf62:	f7f6 fba5 	bl	80026b0 <HAL_PCD_Init>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d001      	beq.n	800bf70 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bf6c:	f7f5 f84e 	bl	800100c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf76:	2318      	movs	r3, #24
 800bf78:	2200      	movs	r2, #0
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	f7f7 fe93 	bl	8003ca6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf86:	2358      	movs	r3, #88	; 0x58
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2180      	movs	r1, #128	; 0x80
 800bf8c:	f7f7 fe8b 	bl	8003ca6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf96:	23c0      	movs	r3, #192	; 0xc0
 800bf98:	2200      	movs	r2, #0
 800bf9a:	2181      	movs	r1, #129	; 0x81
 800bf9c:	f7f7 fe83 	bl	8003ca6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfa6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2101      	movs	r1, #1
 800bfae:	f7f7 fe7a 	bl	8003ca6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	2182      	movs	r1, #130	; 0x82
 800bfc0:	f7f7 fe71 	bl	8003ca6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	200013f8 	.word	0x200013f8
 800bfd4:	40005c00 	.word	0x40005c00

0800bfd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7f6 fc43 	bl	800287a <HAL_PCD_Start>
 800bff4:	4603      	mov	r3, r0
 800bff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 f980 	bl	800c300 <USBD_Get_USB_Status>
 800c000:	4603      	mov	r3, r0
 800c002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c004:	7bbb      	ldrb	r3, [r7, #14]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	4608      	mov	r0, r1
 800c018:	4611      	mov	r1, r2
 800c01a:	461a      	mov	r2, r3
 800c01c:	4603      	mov	r3, r0
 800c01e:	70fb      	strb	r3, [r7, #3]
 800c020:	460b      	mov	r3, r1
 800c022:	70bb      	strb	r3, [r7, #2]
 800c024:	4613      	mov	r3, r2
 800c026:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c036:	78bb      	ldrb	r3, [r7, #2]
 800c038:	883a      	ldrh	r2, [r7, #0]
 800c03a:	78f9      	ldrb	r1, [r7, #3]
 800c03c:	f7f6 fdb2 	bl	8002ba4 <HAL_PCD_EP_Open>
 800c040:	4603      	mov	r3, r0
 800c042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c044:	7bfb      	ldrb	r3, [r7, #15]
 800c046:	4618      	mov	r0, r3
 800c048:	f000 f95a 	bl	800c300 <USBD_Get_USB_Status>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c050:	7bbb      	ldrb	r3, [r7, #14]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b084      	sub	sp, #16
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	460b      	mov	r3, r1
 800c064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c074:	78fa      	ldrb	r2, [r7, #3]
 800c076:	4611      	mov	r1, r2
 800c078:	4618      	mov	r0, r3
 800c07a:	f7f6 fdf9 	bl	8002c70 <HAL_PCD_EP_Close>
 800c07e:	4603      	mov	r3, r0
 800c080:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c082:	7bfb      	ldrb	r3, [r7, #15]
 800c084:	4618      	mov	r0, r3
 800c086:	f000 f93b 	bl	800c300 <USBD_Get_USB_Status>
 800c08a:	4603      	mov	r3, r0
 800c08c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c08e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0b2:	78fa      	ldrb	r2, [r7, #3]
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7f6 feba 	bl	8002e30 <HAL_PCD_EP_SetStall>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0c0:	7bfb      	ldrb	r3, [r7, #15]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 f91c 	bl	800c300 <USBD_Get_USB_Status>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0f0:	78fa      	ldrb	r2, [r7, #3]
 800c0f2:	4611      	mov	r1, r2
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7f6 fefb 	bl	8002ef0 <HAL_PCD_EP_ClrStall>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
 800c100:	4618      	mov	r0, r3
 800c102:	f000 f8fd 	bl	800c300 <USBD_Get_USB_Status>
 800c106:	4603      	mov	r3, r0
 800c108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	460b      	mov	r3, r1
 800c11e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c126:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	da0c      	bge.n	800c14a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c136:	68f9      	ldr	r1, [r7, #12]
 800c138:	1c5a      	adds	r2, r3, #1
 800c13a:	4613      	mov	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4413      	add	r3, r2
 800c140:	00db      	lsls	r3, r3, #3
 800c142:	440b      	add	r3, r1
 800c144:	3302      	adds	r3, #2
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	e00b      	b.n	800c162 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c14a:	78fb      	ldrb	r3, [r7, #3]
 800c14c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c150:	68f9      	ldr	r1, [r7, #12]
 800c152:	4613      	mov	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4413      	add	r3, r2
 800c158:	00db      	lsls	r3, r3, #3
 800c15a:	440b      	add	r3, r1
 800c15c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c160:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c162:	4618      	mov	r0, r3
 800c164:	3714      	adds	r7, #20
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b084      	sub	sp, #16
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	460b      	mov	r3, r1
 800c178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c188:	78fa      	ldrb	r2, [r7, #3]
 800c18a:	4611      	mov	r1, r2
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7f6 fce4 	bl	8002b5a <HAL_PCD_SetAddress>
 800c192:	4603      	mov	r3, r0
 800c194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c196:	7bfb      	ldrb	r3, [r7, #15]
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 f8b1 	bl	800c300 <USBD_Get_USB_Status>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	607a      	str	r2, [r7, #4]
 800c1b6:	603b      	str	r3, [r7, #0]
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1ca:	7af9      	ldrb	r1, [r7, #11]
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	f7f6 fdeb 	bl	8002daa <HAL_PCD_EP_Transmit>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 f890 	bl	800c300 <USBD_Get_USB_Status>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b086      	sub	sp, #24
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	60f8      	str	r0, [r7, #12]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c202:	2300      	movs	r3, #0
 800c204:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c20c:	7af9      	ldrb	r1, [r7, #11]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	f7f6 fd75 	bl	8002d00 <HAL_PCD_EP_Receive>
 800c216:	4603      	mov	r3, r0
 800c218:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c21a:	7dfb      	ldrb	r3, [r7, #23]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 f86f 	bl	800c300 <USBD_Get_USB_Status>
 800c222:	4603      	mov	r3, r0
 800c224:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c226:	7dbb      	ldrb	r3, [r7, #22]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	460b      	mov	r3, r1
 800c23a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c242:	78fa      	ldrb	r2, [r7, #3]
 800c244:	4611      	mov	r1, r2
 800c246:	4618      	mov	r0, r3
 800c248:	f7f6 fd97 	bl	8002d7a <HAL_PCD_EP_GetRxCount>
 800c24c:	4603      	mov	r3, r0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c264:	78fb      	ldrb	r3, [r7, #3]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d002      	beq.n	800c270 <HAL_PCDEx_LPM_Callback+0x18>
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d013      	beq.n	800c296 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c26e:	e023      	b.n	800c2b8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d007      	beq.n	800c288 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c278:	f000 f83c 	bl	800c2f4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c27c:	4b10      	ldr	r3, [pc, #64]	; (800c2c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	4a0f      	ldr	r2, [pc, #60]	; (800c2c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c282:	f023 0306 	bic.w	r3, r3, #6
 800c286:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fe fcf8 	bl	800ac84 <USBD_LL_Resume>
    break;
 800c294:	e010      	b.n	800c2b8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fe fcdc 	bl	800ac5a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d005      	beq.n	800c2b6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2aa:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	4a04      	ldr	r2, [pc, #16]	; (800c2c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c2b0:	f043 0306 	orr.w	r3, r3, #6
 800c2b4:	6113      	str	r3, [r2, #16]
    break;
 800c2b6:	bf00      	nop
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	e000ed00 	.word	0xe000ed00

0800c2c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c2cc:	4b03      	ldr	r3, [pc, #12]	; (800c2dc <USBD_static_malloc+0x18>)
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	370c      	adds	r7, #12
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	20000210 	.word	0x20000210

0800c2e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]

}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c2f8:	f7f4 fe1f 	bl	8000f3a <SystemClock_Config>
}
 800c2fc:	bf00      	nop
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	4603      	mov	r3, r0
 800c308:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c30e:	79fb      	ldrb	r3, [r7, #7]
 800c310:	2b03      	cmp	r3, #3
 800c312:	d817      	bhi.n	800c344 <USBD_Get_USB_Status+0x44>
 800c314:	a201      	add	r2, pc, #4	; (adr r2, 800c31c <USBD_Get_USB_Status+0x1c>)
 800c316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c31a:	bf00      	nop
 800c31c:	0800c32d 	.word	0x0800c32d
 800c320:	0800c333 	.word	0x0800c333
 800c324:	0800c339 	.word	0x0800c339
 800c328:	0800c33f 	.word	0x0800c33f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c32c:	2300      	movs	r3, #0
 800c32e:	73fb      	strb	r3, [r7, #15]
    break;
 800c330:	e00b      	b.n	800c34a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c332:	2303      	movs	r3, #3
 800c334:	73fb      	strb	r3, [r7, #15]
    break;
 800c336:	e008      	b.n	800c34a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c338:	2301      	movs	r3, #1
 800c33a:	73fb      	strb	r3, [r7, #15]
    break;
 800c33c:	e005      	b.n	800c34a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c33e:	2303      	movs	r3, #3
 800c340:	73fb      	strb	r3, [r7, #15]
    break;
 800c342:	e002      	b.n	800c34a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c344:	2303      	movs	r3, #3
 800c346:	73fb      	strb	r3, [r7, #15]
    break;
 800c348:	bf00      	nop
  }
  return usb_status;
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <Init>:

#include "global_variables.h"
#include "spi.h"
#include "tim.h"

void Init(void) {
 800c358:	b5b0      	push	{r4, r5, r7, lr}
 800c35a:	b0c0      	sub	sp, #256	; 0x100
 800c35c:	af00      	add	r7, sp, #0
  float acc0beta[6] = {0, 0, 0,
 800c35e:	4b78      	ldr	r3, [pc, #480]	; (800c540 <Init+0x1e8>)
 800c360:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 800c364:	461d      	mov	r5, r3
 800c366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c36a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c36e:	e884 0003 	stmia.w	r4, {r0, r1}
      6.09e-005, 6.09e-005, 6.09e-005};
  float gyro0beta[3] = {0, 0, 0};
 800c372:	f04f 0300 	mov.w	r3, #0
 800c376:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c37a:	f04f 0300 	mov.w	r3, #0
 800c37e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c382:	f04f 0300 	mov.w	r3, #0
 800c386:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  float mag0beta[6] = {0, 0, 0,
 800c38a:	4b6e      	ldr	r3, [pc, #440]	; (800c544 <Init+0x1ec>)
 800c38c:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 800c390:	461d      	mov	r5, r3
 800c392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c396:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c39a:	e884 0003 	stmia.w	r4, {r0, r1}
      0.000517, 0.000517, 0.000517};
  //imu initialization
  ICM0.SPI_Bus = &hspi1;
 800c39e:	4b6a      	ldr	r3, [pc, #424]	; (800c548 <Init+0x1f0>)
 800c3a0:	4a6a      	ldr	r2, [pc, #424]	; (800c54c <Init+0x1f4>)
 800c3a2:	601a      	str	r2, [r3, #0]
  ICM0.CS_Port = CS_ICM0_GPIO_Port;
 800c3a4:	4b68      	ldr	r3, [pc, #416]	; (800c548 <Init+0x1f0>)
 800c3a6:	4a6a      	ldr	r2, [pc, #424]	; (800c550 <Init+0x1f8>)
 800c3a8:	605a      	str	r2, [r3, #4]
  ICM0.CS_Pin = CS_ICM0_Pin;
 800c3aa:	4b67      	ldr	r3, [pc, #412]	; (800c548 <Init+0x1f0>)
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	811a      	strh	r2, [r3, #8]
  ICM0.AccSens = Accelerometer_2G;
 800c3b0:	4b65      	ldr	r3, [pc, #404]	; (800c548 <Init+0x1f0>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	729a      	strb	r2, [r3, #10]
  ICM0.GyroSens = Gyroscope_250s;
 800c3b6:	4b64      	ldr	r3, [pc, #400]	; (800c548 <Init+0x1f0>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	72da      	strb	r2, [r3, #11]
  ICM0.GyroFilt = Gyroscope_176Hz;
 800c3bc:	4b62      	ldr	r3, [pc, #392]	; (800c548 <Init+0x1f0>)
 800c3be:	2201      	movs	r2, #1
 800c3c0:	731a      	strb	r2, [r3, #12]

  HAL_GPIO_WritePin(ICM0.CS_Port, ICM0.CS_Pin, GPIO_PIN_SET);
 800c3c2:	4b61      	ldr	r3, [pc, #388]	; (800c548 <Init+0x1f0>)
 800c3c4:	6858      	ldr	r0, [r3, #4]
 800c3c6:	4b60      	ldr	r3, [pc, #384]	; (800c548 <Init+0x1f0>)
 800c3c8:	891b      	ldrh	r3, [r3, #8]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	f7f6 f957 	bl	8002680 <HAL_GPIO_WritePin>

  HAL_Delay(100);
 800c3d2:	2064      	movs	r0, #100	; 0x64
 800c3d4:	f7f5 fbc6 	bl	8001b64 <HAL_Delay>
  while (ICM20602_Init(&ICM0, acc0beta, gyro0beta) != HAL_OK);
 800c3d8:	bf00      	nop
 800c3da:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800c3de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4858      	ldr	r0, [pc, #352]	; (800c548 <Init+0x1f0>)
 800c3e6:	f000 f8f3 	bl	800c5d0 <ICM20602_Init>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1f4      	bne.n	800c3da <Init+0x82>
//  while (MMC5983MA_Init(&MMC0, mag0beta) != HAL_OK);



  //kalman filter initialization
  float32_t var0 = 1e-6;//9e-7; //higher means trust gyro less
 800c3f0:	4b58      	ldr	r3, [pc, #352]	; (800c554 <Init+0x1fc>)
 800c3f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c3f6:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c3fa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c3fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c402:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
 800c406:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c40a:	eef1 7a67 	vneg.f32	s15, s15
 800c40e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 800c412:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c416:	eef1 7a67 	vneg.f32	s15, s15
 800c41a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 800c41e:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c422:	eef1 7a67 	vneg.f32	s15, s15
 800c426:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
                        -var0, 3*var0, -var0, -var0,
 800c42a:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c42e:	eef1 7a67 	vneg.f32	s15, s15
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c432:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
                        -var0, 3*var0, -var0, -var0,
 800c436:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c43a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c43e:	ee67 7a87 	vmul.f32	s15, s15, s14
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c442:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
                        -var0, 3*var0, -var0, -var0,
 800c446:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c44a:	eef1 7a67 	vneg.f32	s15, s15
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c44e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
                        -var0, 3*var0, -var0, -var0,
 800c452:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c456:	eef1 7a67 	vneg.f32	s15, s15
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c45a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
              -var0, -var0, 3*var0, -var0,
 800c45e:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c462:	eef1 7a67 	vneg.f32	s15, s15
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c466:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
              -var0, -var0, 3*var0, -var0,
 800c46a:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c46e:	eef1 7a67 	vneg.f32	s15, s15
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c472:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
              -var0, -var0, 3*var0, -var0,
 800c476:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c47a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c47e:	ee67 7a87 	vmul.f32	s15, s15, s14
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c482:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
              -var0, -var0, 3*var0, -var0,
 800c486:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c48a:	eef1 7a67 	vneg.f32	s15, s15
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c48e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
              -var0, -var0, -var0, 3*var0, }; //differs from paper
 800c492:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c496:	eef1 7a67 	vneg.f32	s15, s15
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c49a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
              -var0, -var0, -var0, 3*var0, }; //differs from paper
 800c49e:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c4a2:	eef1 7a67 	vneg.f32	s15, s15
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c4a6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
              -var0, -var0, -var0, 3*var0, }; //differs from paper
 800c4aa:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c4ae:	eef1 7a67 	vneg.f32	s15, s15
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c4b2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
              -var0, -var0, -var0, 3*var0, }; //differs from paper
 800c4b6:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800c4ba:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c4be:	ee67 7a87 	vmul.f32	s15, s15, s14
  float32_t Q0_vals[16] = { 3*var0, -var0, -var0, -var0,
 800c4c2:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
  float32_t R0_vals[16] = { 3, 0, 0, 0,//.2
 800c4c6:	4b24      	ldr	r3, [pc, #144]	; (800c558 <Init+0x200>)
 800c4c8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c4cc:	461d      	mov	r5, r3
 800c4ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c4de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
              0, 3, 0, 0,
              0, 0, 3, 0,
              0, 0, 0, 3 }; //differs from paper. Bigger numbers means trust acc/mag less
  float32_t P_post0_vals[16] = { 2, 0, 0, 0,
 800c4e2:	463b      	mov	r3, r7
 800c4e4:	4a1d      	ldr	r2, [pc, #116]	; (800c55c <Init+0x204>)
 800c4e6:	461c      	mov	r4, r3
 800c4e8:	4615      	mov	r5, r2
 800c4ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c4fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                 0, 2, 0, 0,
                 0, 0, 2, 0,
                 0, 0, 0, 2 };

  KalmanFilter_init(&KF0, Q0_vals, R0_vals, P_post0_vals, dt);
 800c4fe:	4b18      	ldr	r3, [pc, #96]	; (800c560 <Init+0x208>)
 800c500:	edd3 7a00 	vldr	s15, [r3]
 800c504:	463b      	mov	r3, r7
 800c506:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c50a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c50e:	eeb0 0a67 	vmov.f32	s0, s15
 800c512:	4814      	ldr	r0, [pc, #80]	; (800c564 <Init+0x20c>)
 800c514:	f000 fad6 	bl	800cac4 <KalmanFilter_init>


  //1 kHz interrupt timer initialization
  HAL_TIM_Base_Start_IT(&htim1);
 800c518:	4813      	ldr	r0, [pc, #76]	; (800c568 <Init+0x210>)
 800c51a:	f7f9 fc75 	bl	8005e08 <HAL_TIM_Base_Start_IT>

  //blinking leds
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800c51e:	2100      	movs	r1, #0
 800c520:	4812      	ldr	r0, [pc, #72]	; (800c56c <Init+0x214>)
 800c522:	f7f9 fd3d 	bl	8005fa0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 800c526:	2104      	movs	r1, #4
 800c528:	4811      	ldr	r0, [pc, #68]	; (800c570 <Init+0x218>)
 800c52a:	f7fa fe0b 	bl	8007144 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 800c52e:	2108      	movs	r1, #8
 800c530:	480f      	ldr	r0, [pc, #60]	; (800c570 <Init+0x218>)
 800c532:	f7fa fe07 	bl	8007144 <HAL_TIMEx_PWMN_Start>
}
 800c536:	bf00      	nop
 800c538:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bdb0      	pop	{r4, r5, r7, pc}
 800c540:	0800ce7c 	.word	0x0800ce7c
 800c544:	0800ce94 	.word	0x0800ce94
 800c548:	20001840 	.word	0x20001840
 800c54c:	20000434 	.word	0x20000434
 800c550:	48000400 	.word	0x48000400
 800c554:	358637bd 	.word	0x358637bd
 800c558:	0800ceac 	.word	0x0800ceac
 800c55c:	0800ceec 	.word	0x0800ceec
 800c560:	20000184 	.word	0x20000184
 800c564:	20001764 	.word	0x20001764
 800c568:	200005f0 	.word	0x200005f0
 800c56c:	200005a4 	.word	0x200005a4
 800c570:	20000558 	.word	0x20000558

0800c574 <HAL_TIM_PeriodElapsedCallback>:
#include "global_variables.h"
#include "tim.h"

volatile bool tim1_int = false;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) {
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a06      	ldr	r2, [pc, #24]	; (800c598 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d102      	bne.n	800c58a <HAL_TIM_PeriodElapsedCallback+0x16>
    tim1_int = true;
 800c584:	4b05      	ldr	r3, [pc, #20]	; (800c59c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800c586:	2201      	movs	r2, #1
 800c588:	701a      	strb	r2, [r3, #0]
  }
}
 800c58a:	bf00      	nop
 800c58c:	370c      	adds	r7, #12
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	200005f0 	.word	0x200005f0
 800c59c:	20000430 	.word	0x20000430

0800c5a0 <primary_loop>:

void primary_loop(void) {
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b088      	sub	sp, #32
 800c5a4:	af00      	add	r7, sp, #0
  if (tim1_int) {
 800c5a6:	4b08      	ldr	r3, [pc, #32]	; (800c5c8 <primary_loop+0x28>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d007      	beq.n	800c5c0 <primary_loop+0x20>
    tim1_int = false;
 800c5b0:	4b05      	ldr	r3, [pc, #20]	; (800c5c8 <primary_loop+0x28>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	701a      	strb	r2, [r3, #0]
    float IMU_floats[7];
    ICM20602_Read(&ICM0, IMU_floats);
 800c5b6:	1d3b      	adds	r3, r7, #4
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	4804      	ldr	r0, [pc, #16]	; (800c5cc <primary_loop+0x2c>)
 800c5bc:	f000 fa46 	bl	800ca4c <ICM20602_Read>
    //todo: continue here
  }
}
 800c5c0:	bf00      	nop
 800c5c2:	3720      	adds	r7, #32
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20000430 	.word	0x20000430
 800c5cc:	20001840 	.word	0x20001840

0800c5d0 <ICM20602_Init>:

#include "hal_ICM20602.h"
#include "spi_wrapper.h"
#include "various_functions.h"

HAL_StatusTypeDef ICM20602_Init(ICM20602* ICM, float* abeta, float* gbeta) {
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b08e      	sub	sp, #56	; 0x38
 800c5d4:	af02      	add	r7, sp, #8
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
  SPI_HandleTypeDef* SPI_Bus = ICM->SPI_Bus;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_TypeDef* CS_Port = ICM->CS_Port;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	623b      	str	r3, [r7, #32]
  uint16_t CS_Pin = ICM->CS_Pin;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	891b      	ldrh	r3, [r3, #8]
 800c5ec:	83fb      	strh	r3, [r7, #30]
  AccelerometerSensitivity AccSens = ICM->AccSens;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	7a9b      	ldrb	r3, [r3, #10]
 800c5f2:	777b      	strb	r3, [r7, #29]
  GyroscopeSensitivity GyroSens = ICM->GyroSens;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	7adb      	ldrb	r3, [r3, #11]
 800c5f8:	773b      	strb	r3, [r7, #28]
  GyroscopeFilter GyroFilt = ICM->GyroFilt;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	7b1b      	ldrb	r3, [r3, #12]
 800c5fe:	76fb      	strb	r3, [r7, #27]
  
  for (int i = 0; i<6; i++) {
 800c600:	2300      	movs	r3, #0
 800c602:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c604:	e00d      	b.n	800c622 <ICM20602_Init+0x52>
	  ICM->accbeta[i] = *(abeta+i);
 800c606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	68f9      	ldr	r1, [r7, #12]
 800c612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c614:	3304      	adds	r3, #4
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	440b      	add	r3, r1
 800c61a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i<6; i++) {
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	3301      	adds	r3, #1
 800c620:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	2b05      	cmp	r3, #5
 800c626:	ddee      	ble.n	800c606 <ICM20602_Init+0x36>
  }

  for (int i = 0; i<3; i++) {
 800c628:	2300      	movs	r3, #0
 800c62a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c62c:	e00d      	b.n	800c64a <ICM20602_Init+0x7a>
	  ICM->gyrobeta[i] = *(gbeta+i);
 800c62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	4413      	add	r3, r2
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	68f9      	ldr	r1, [r7, #12]
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	330a      	adds	r3, #10
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	440b      	add	r3, r1
 800c642:	601a      	str	r2, [r3, #0]
  for (int i = 0; i<3; i++) {
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	3301      	adds	r3, #1
 800c648:	62bb      	str	r3, [r7, #40]	; 0x28
 800c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	ddee      	ble.n	800c62e <ICM20602_Init+0x5e>
  }

  uint8_t aTxBuffer[2] = {0, 0};
 800c650:	2300      	movs	r3, #0
 800c652:	763b      	strb	r3, [r7, #24]
 800c654:	2300      	movs	r3, #0
 800c656:	767b      	strb	r3, [r7, #25]
  uint8_t aRxBuffer[2] = {0, 0};
 800c658:	2300      	movs	r3, #0
 800c65a:	753b      	strb	r3, [r7, #20]
 800c65c:	2300      	movs	r3, #0
 800c65e:	757b      	strb	r3, [r7, #21]
  
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 1, 5);
 800c660:	f107 0214 	add.w	r2, r7, #20
 800c664:	f107 0118 	add.w	r1, r7, #24
 800c668:	2305      	movs	r3, #5
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	2301      	movs	r3, #1
 800c66e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c670:	f7f8 fc09 	bl	8004e86 <HAL_SPI_TransmitReceive>
  
  
  aTxBuffer[0] = WhoAmI_Reg | SPIReadMask; //check WhoAmI
 800c674:	23f5      	movs	r3, #245	; 0xf5
 800c676:	763b      	strb	r3, [r7, #24]
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800c678:	8bfb      	ldrh	r3, [r7, #30]
 800c67a:	2200      	movs	r2, #0
 800c67c:	4619      	mov	r1, r3
 800c67e:	6a38      	ldr	r0, [r7, #32]
 800c680:	f7f5 fffe 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 2, 5);
 800c684:	f107 0214 	add.w	r2, r7, #20
 800c688:	f107 0118 	add.w	r1, r7, #24
 800c68c:	2305      	movs	r3, #5
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	2302      	movs	r3, #2
 800c692:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c694:	f7f8 fbf7 	bl	8004e86 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800c698:	8bfb      	ldrh	r3, [r7, #30]
 800c69a:	2201      	movs	r2, #1
 800c69c:	4619      	mov	r1, r3
 800c69e:	6a38      	ldr	r0, [r7, #32]
 800c6a0:	f7f5 ffee 	bl	8002680 <HAL_GPIO_WritePin>
  if (aRxBuffer[1] != WhoAmI_Value) {
 800c6a4:	7d7b      	ldrb	r3, [r7, #21]
 800c6a6:	2b12      	cmp	r3, #18
 800c6a8:	d001      	beq.n	800c6ae <ICM20602_Init+0xde>
    return HAL_ERROR;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e0fe      	b.n	800c8ac <ICM20602_Init+0x2dc>
  }
  
  
  aTxBuffer[0] = I2CEnable_Reg;
 800c6ae:	2370      	movs	r3, #112	; 0x70
 800c6b0:	763b      	strb	r3, [r7, #24]
  aTxBuffer[1] = I2C_Setting; //disable I2C
 800c6b2:	2340      	movs	r3, #64	; 0x40
 800c6b4:	767b      	strb	r3, [r7, #25]
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800c6b6:	8bfb      	ldrh	r3, [r7, #30]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	6a38      	ldr	r0, [r7, #32]
 800c6be:	f7f5 ffdf 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 2, 5);
 800c6c2:	f107 0214 	add.w	r2, r7, #20
 800c6c6:	f107 0118 	add.w	r1, r7, #24
 800c6ca:	2305      	movs	r3, #5
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	2302      	movs	r3, #2
 800c6d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6d2:	f7f8 fbd8 	bl	8004e86 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800c6d6:	8bfb      	ldrh	r3, [r7, #30]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6a38      	ldr	r0, [r7, #32]
 800c6de:	f7f5 ffcf 	bl	8002680 <HAL_GPIO_WritePin>
  
  aTxBuffer[0] = PwrMgmt1_Reg;
 800c6e2:	236b      	movs	r3, #107	; 0x6b
 800c6e4:	763b      	strb	r3, [r7, #24]
  aTxBuffer[1] = PwrMgmt1_Setting; //wake up device
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	767b      	strb	r3, [r7, #25]
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800c6ea:	8bfb      	ldrh	r3, [r7, #30]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6a38      	ldr	r0, [r7, #32]
 800c6f2:	f7f5 ffc5 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 2, 5);
 800c6f6:	f107 0214 	add.w	r2, r7, #20
 800c6fa:	f107 0118 	add.w	r1, r7, #24
 800c6fe:	2305      	movs	r3, #5
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	2302      	movs	r3, #2
 800c704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c706:	f7f8 fbbe 	bl	8004e86 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800c70a:	8bfb      	ldrh	r3, [r7, #30]
 800c70c:	2201      	movs	r2, #1
 800c70e:	4619      	mov	r1, r3
 800c710:	6a38      	ldr	r0, [r7, #32]
 800c712:	f7f5 ffb5 	bl	8002680 <HAL_GPIO_WritePin>
  
  aTxBuffer[0] = PwrMgmt2_Reg;
 800c716:	236c      	movs	r3, #108	; 0x6c
 800c718:	763b      	strb	r3, [r7, #24]
  aTxBuffer[1] = PwrMgmt2_Setting; //enable everything
 800c71a:	2300      	movs	r3, #0
 800c71c:	767b      	strb	r3, [r7, #25]
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800c71e:	8bfb      	ldrh	r3, [r7, #30]
 800c720:	2200      	movs	r2, #0
 800c722:	4619      	mov	r1, r3
 800c724:	6a38      	ldr	r0, [r7, #32]
 800c726:	f7f5 ffab 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 2, 5);
 800c72a:	f107 0214 	add.w	r2, r7, #20
 800c72e:	f107 0118 	add.w	r1, r7, #24
 800c732:	2305      	movs	r3, #5
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	2302      	movs	r3, #2
 800c738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c73a:	f7f8 fba4 	bl	8004e86 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800c73e:	8bfb      	ldrh	r3, [r7, #30]
 800c740:	2201      	movs	r2, #1
 800c742:	4619      	mov	r1, r3
 800c744:	6a38      	ldr	r0, [r7, #32]
 800c746:	f7f5 ff9b 	bl	8002680 <HAL_GPIO_WritePin>
  
  aTxBuffer[0] = Config_Reg;
 800c74a:	231a      	movs	r3, #26
 800c74c:	763b      	strb	r3, [r7, #24]
 // aTxBuffer[1] = Config_Setting; //dlpf (for gyro)
  aTxBuffer[1] = GyroFilt; //dlpf (for gyro)
 800c74e:	7efb      	ldrb	r3, [r7, #27]
 800c750:	767b      	strb	r3, [r7, #25]
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800c752:	8bfb      	ldrh	r3, [r7, #30]
 800c754:	2200      	movs	r2, #0
 800c756:	4619      	mov	r1, r3
 800c758:	6a38      	ldr	r0, [r7, #32]
 800c75a:	f7f5 ff91 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 2, 5);
 800c75e:	f107 0214 	add.w	r2, r7, #20
 800c762:	f107 0118 	add.w	r1, r7, #24
 800c766:	2305      	movs	r3, #5
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	2302      	movs	r3, #2
 800c76c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c76e:	f7f8 fb8a 	bl	8004e86 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800c772:	8bfb      	ldrh	r3, [r7, #30]
 800c774:	2201      	movs	r2, #1
 800c776:	4619      	mov	r1, r3
 800c778:	6a38      	ldr	r0, [r7, #32]
 800c77a:	f7f5 ff81 	bl	8002680 <HAL_GPIO_WritePin>

  aTxBuffer[0] = AccConfig2_Reg;
 800c77e:	231d      	movs	r3, #29
 800c780:	763b      	strb	r3, [r7, #24]
  aTxBuffer[1] = Acc_Config2_Setting; //dlpf (for acc)
 800c782:	2302      	movs	r3, #2
 800c784:	767b      	strb	r3, [r7, #25]
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800c786:	8bfb      	ldrh	r3, [r7, #30]
 800c788:	2200      	movs	r2, #0
 800c78a:	4619      	mov	r1, r3
 800c78c:	6a38      	ldr	r0, [r7, #32]
 800c78e:	f7f5 ff77 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 2, 5);
 800c792:	f107 0214 	add.w	r2, r7, #20
 800c796:	f107 0118 	add.w	r1, r7, #24
 800c79a:	2305      	movs	r3, #5
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	2302      	movs	r3, #2
 800c7a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7a2:	f7f8 fb70 	bl	8004e86 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800c7a6:	8bfb      	ldrh	r3, [r7, #30]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6a38      	ldr	r0, [r7, #32]
 800c7ae:	f7f5 ff67 	bl	8002680 <HAL_GPIO_WritePin>
  
  aTxBuffer[0] = GyroConfig_Reg | SPIReadMask;
 800c7b2:	239b      	movs	r3, #155	; 0x9b
 800c7b4:	763b      	strb	r3, [r7, #24]
  aTxBuffer[1] = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	767b      	strb	r3, [r7, #25]
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800c7ba:	8bfb      	ldrh	r3, [r7, #30]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6a38      	ldr	r0, [r7, #32]
 800c7c2:	f7f5 ff5d 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 2, 5);
 800c7c6:	f107 0214 	add.w	r2, r7, #20
 800c7ca:	f107 0118 	add.w	r1, r7, #24
 800c7ce:	2305      	movs	r3, #5
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7d6:	f7f8 fb56 	bl	8004e86 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800c7da:	8bfb      	ldrh	r3, [r7, #30]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6a38      	ldr	r0, [r7, #32]
 800c7e2:	f7f5 ff4d 	bl	8002680 <HAL_GPIO_WritePin>
  aTxBuffer[0] = GyroConfig_Reg;
 800c7e6:	231b      	movs	r3, #27
 800c7e8:	763b      	strb	r3, [r7, #24]
  aTxBuffer[1] = (aRxBuffer[1] & 0xE7) | (uint8_t)GyroSens << 3; //set FSR to +-250 dps
 800c7ea:	7d7b      	ldrb	r3, [r7, #21]
 800c7ec:	b25b      	sxtb	r3, r3
 800c7ee:	f023 0318 	bic.w	r3, r3, #24
 800c7f2:	b25a      	sxtb	r2, r3
 800c7f4:	7f3b      	ldrb	r3, [r7, #28]
 800c7f6:	00db      	lsls	r3, r3, #3
 800c7f8:	b25b      	sxtb	r3, r3
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	b25b      	sxtb	r3, r3
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	767b      	strb	r3, [r7, #25]
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800c802:	8bfb      	ldrh	r3, [r7, #30]
 800c804:	2200      	movs	r2, #0
 800c806:	4619      	mov	r1, r3
 800c808:	6a38      	ldr	r0, [r7, #32]
 800c80a:	f7f5 ff39 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 2, 5);
 800c80e:	f107 0214 	add.w	r2, r7, #20
 800c812:	f107 0118 	add.w	r1, r7, #24
 800c816:	2305      	movs	r3, #5
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	2302      	movs	r3, #2
 800c81c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c81e:	f7f8 fb32 	bl	8004e86 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800c822:	8bfb      	ldrh	r3, [r7, #30]
 800c824:	2201      	movs	r2, #1
 800c826:	4619      	mov	r1, r3
 800c828:	6a38      	ldr	r0, [r7, #32]
 800c82a:	f7f5 ff29 	bl	8002680 <HAL_GPIO_WritePin>
  
  aTxBuffer[0] = AccConfig_Reg | SPIReadMask;
 800c82e:	239c      	movs	r3, #156	; 0x9c
 800c830:	763b      	strb	r3, [r7, #24]
  aTxBuffer[1] = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	767b      	strb	r3, [r7, #25]
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800c836:	8bfb      	ldrh	r3, [r7, #30]
 800c838:	2200      	movs	r2, #0
 800c83a:	4619      	mov	r1, r3
 800c83c:	6a38      	ldr	r0, [r7, #32]
 800c83e:	f7f5 ff1f 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 2, 5);
 800c842:	f107 0214 	add.w	r2, r7, #20
 800c846:	f107 0118 	add.w	r1, r7, #24
 800c84a:	2305      	movs	r3, #5
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	2302      	movs	r3, #2
 800c850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c852:	f7f8 fb18 	bl	8004e86 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800c856:	8bfb      	ldrh	r3, [r7, #30]
 800c858:	2201      	movs	r2, #1
 800c85a:	4619      	mov	r1, r3
 800c85c:	6a38      	ldr	r0, [r7, #32]
 800c85e:	f7f5 ff0f 	bl	8002680 <HAL_GPIO_WritePin>
  aTxBuffer[0] = AccConfig_Reg;
 800c862:	231c      	movs	r3, #28
 800c864:	763b      	strb	r3, [r7, #24]
  aTxBuffer[1] = (aRxBuffer[1] & 0xE7) | (uint8_t)AccSens << 3; //set FSR to +-2 g
 800c866:	7d7b      	ldrb	r3, [r7, #21]
 800c868:	b25b      	sxtb	r3, r3
 800c86a:	f023 0318 	bic.w	r3, r3, #24
 800c86e:	b25a      	sxtb	r2, r3
 800c870:	7f7b      	ldrb	r3, [r7, #29]
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	b25b      	sxtb	r3, r3
 800c876:	4313      	orrs	r3, r2
 800c878:	b25b      	sxtb	r3, r3
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	767b      	strb	r3, [r7, #25]
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800c87e:	8bfb      	ldrh	r3, [r7, #30]
 800c880:	2200      	movs	r2, #0
 800c882:	4619      	mov	r1, r3
 800c884:	6a38      	ldr	r0, [r7, #32]
 800c886:	f7f5 fefb 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(SPI_Bus, (uint8_t*) &aTxBuffer, (uint8_t*) &aRxBuffer, 2, 5);
 800c88a:	f107 0214 	add.w	r2, r7, #20
 800c88e:	f107 0118 	add.w	r1, r7, #24
 800c892:	2305      	movs	r3, #5
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	2302      	movs	r3, #2
 800c898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c89a:	f7f8 faf4 	bl	8004e86 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 800c89e:	8bfb      	ldrh	r3, [r7, #30]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	6a38      	ldr	r0, [r7, #32]
 800c8a6:	f7f5 feeb 	bl	8002680 <HAL_GPIO_WritePin>
  
  return HAL_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3730      	adds	r7, #48	; 0x30
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <imu_reading_to_data>:

static void imu_reading_to_data(int16_t data_out[7], uint8_t reading[15]) {
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 7; i++) {
 800c8be:	2300      	movs	r3, #0
 800c8c0:	60fb      	str	r3, [r7, #12]
 800c8c2:	e018      	b.n	800c8f6 <imu_reading_to_data+0x42>
    *(data_out + i) = (int16_t) (*(reading+2*i+1) << 8 | *(reading+2*i+2));
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	021b      	lsls	r3, r3, #8
 800c8d2:	b219      	sxth	r1, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	005b      	lsls	r3, r3, #1
 800c8d8:	3302      	adds	r3, #2
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	4413      	add	r3, r2
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	b21a      	sxth	r2, r3
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	4403      	add	r3, r0
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	b212      	sxth	r2, r2
 800c8ee:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < 7; i++) {
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	60fb      	str	r3, [r7, #12]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2b06      	cmp	r3, #6
 800c8fa:	dde3      	ble.n	800c8c4 <imu_reading_to_data+0x10>
  }
}
 800c8fc:	bf00      	nop
 800c8fe:	3714      	adds	r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <imu_int_to_norm_float>:

// todo: don't normalize
static void imu_int_to_norm_float(ICM20602* ICM, int16_t* input, float* output) {
 800c908:	b590      	push	{r4, r7, lr}
 800c90a:	b089      	sub	sp, #36	; 0x24
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
  float* beta_acc = ICM->accbeta;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	3310      	adds	r3, #16
 800c918:	617b      	str	r3, [r7, #20]
  float* beta_gyro = ICM->gyrobeta;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	3328      	adds	r3, #40	; 0x28
 800c91e:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < 3; i++) {
 800c920:	2300      	movs	r3, #0
 800c922:	61fb      	str	r3, [r7, #28]
 800c924:	e023      	b.n	800c96e <imu_int_to_norm_float+0x66>
    // add offset, multiply by scale -> output in g's
    *(output + i) = (((float) (*(input + i))) - (*(beta_acc + i))) * (*(beta_acc + i + 3));
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	005b      	lsls	r3, r3, #1
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	4413      	add	r3, r2
 800c92e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c932:	ee07 3a90 	vmov	s15, r3
 800c936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	4413      	add	r3, r2
 800c942:	edd3 7a00 	vldr	s15, [r3]
 800c946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	3303      	adds	r3, #3
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	697a      	ldr	r2, [r7, #20]
 800c952:	4413      	add	r3, r2
 800c954:	edd3 7a00 	vldr	s15, [r3]
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	4413      	add	r3, r2
 800c960:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c964:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 3; i++) {
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	3301      	adds	r3, #1
 800c96c:	61fb      	str	r3, [r7, #28]
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	2b02      	cmp	r3, #2
 800c972:	ddd8      	ble.n	800c926 <imu_int_to_norm_float+0x1e>
  }
  vectNormalize(output, 3);
 800c974:	2103      	movs	r1, #3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f940 	bl	800cbfc <vectNormalize>

  *(output + 3) = (*(input + 3)) / 326.8 + 25; //degrees C
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	3306      	adds	r3, #6
 800c980:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c984:	4618      	mov	r0, r3
 800c986:	f7f3 fd99 	bl	80004bc <__aeabi_i2d>
 800c98a:	a32e      	add	r3, pc, #184	; (adr r3, 800ca44 <imu_int_to_norm_float+0x13c>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f7f3 ff28 	bl	80007e4 <__aeabi_ddiv>
 800c994:	4603      	mov	r3, r0
 800c996:	460c      	mov	r4, r1
 800c998:	4618      	mov	r0, r3
 800c99a:	4621      	mov	r1, r4
 800c99c:	f04f 0200 	mov.w	r2, #0
 800c9a0:	4b23      	ldr	r3, [pc, #140]	; (800ca30 <imu_int_to_norm_float+0x128>)
 800c9a2:	f7f3 fc3f 	bl	8000224 <__adddf3>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	4622      	mov	r2, r4
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f103 040c 	add.w	r4, r3, #12
 800c9b4:	4608      	mov	r0, r1
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	f7f3 fffc 	bl	80009b4 <__aeabi_d2f>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	6023      	str	r3, [r4, #0]

  for (int i = 4; i < 7; i++) {
 800c9c0:	2304      	movs	r3, #4
 800c9c2:	61bb      	str	r3, [r7, #24]
 800c9c4:	e02d      	b.n	800ca22 <imu_int_to_norm_float+0x11a>
    // scale to rad/sec (from 250d/s) and then add offset
    *(output + i) = ((float) (*(input + i))) / 32768 * 250 / 180 * PI  - (*(beta_gyro + i - 4));
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9d2:	ee07 3a90 	vmov	s15, r3
 800c9d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c9da:	eddf 6a16 	vldr	s13, [pc, #88]	; 800ca34 <imu_int_to_norm_float+0x12c>
 800c9de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c9e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800ca38 <imu_int_to_norm_float+0x130>
 800c9e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c9ea:	eddf 6a14 	vldr	s13, [pc, #80]	; 800ca3c <imu_int_to_norm_float+0x134>
 800c9ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c9f2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800ca40 <imu_int_to_norm_float+0x138>
 800c9f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ca00:	3b04      	subs	r3, #4
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	4413      	add	r3, r2
 800ca08:	edd3 7a00 	vldr	s15, [r3]
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	4413      	add	r3, r2
 800ca14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca18:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 4; i < 7; i++) {
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	61bb      	str	r3, [r7, #24]
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	2b06      	cmp	r3, #6
 800ca26:	ddce      	ble.n	800c9c6 <imu_int_to_norm_float+0xbe>
  }
}
 800ca28:	bf00      	nop
 800ca2a:	3724      	adds	r7, #36	; 0x24
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd90      	pop	{r4, r7, pc}
 800ca30:	40390000 	.word	0x40390000
 800ca34:	47000000 	.word	0x47000000
 800ca38:	437a0000 	.word	0x437a0000
 800ca3c:	43340000 	.word	0x43340000
 800ca40:	40490fdb 	.word	0x40490fdb
 800ca44:	cccccccd 	.word	0xcccccccd
 800ca48:	40746ccc 	.word	0x40746ccc

0800ca4c <ICM20602_Read>:

void ICM20602_Read(ICM20602* ICM, float IMU_floats[7]) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08e      	sub	sp, #56	; 0x38
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  uint8_t imu_Tx[15] = {0, 0, 0 ,0 ,0, 0, 0, 0 ,0 ,0, 0, 0, 0 ,0 ,0};
 800ca56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	605a      	str	r2, [r3, #4]
 800ca60:	609a      	str	r2, [r3, #8]
 800ca62:	f8c3 200b 	str.w	r2, [r3, #11]
  uint8_t imu_Rx[15] = {0, 0, 0 ,0 ,0, 0, 0, 0 ,0 ,0, 0, 0, 0 ,0 ,0};
 800ca66:	f107 0318 	add.w	r3, r7, #24
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	605a      	str	r2, [r3, #4]
 800ca70:	609a      	str	r2, [r3, #8]
 800ca72:	f8c3 200b 	str.w	r2, [r3, #11]
  int16_t IMU_data[7];

  imu_Tx[0] = FirstData_Reg | SPIReadMask;
 800ca76:	23bb      	movs	r3, #187	; 0xbb
 800ca78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  HAL_GPIO_WritePin(ICM->CS_Port, ICM->CS_Pin, GPIO_PIN_RESET);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6858      	ldr	r0, [r3, #4]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	891b      	ldrh	r3, [r3, #8]
 800ca84:	2200      	movs	r2, #0
 800ca86:	4619      	mov	r1, r3
 800ca88:	f7f5 fdfa 	bl	8002680 <HAL_GPIO_WritePin>
  SPI_TransmitReceive_DMA_Blocking(ICM->SPI_Bus, imu_Tx, imu_Rx, 15);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	f107 0218 	add.w	r2, r7, #24
 800ca94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ca98:	230f      	movs	r3, #15
 800ca9a:	f000 f8ff 	bl	800cc9c <SPI_TransmitReceive_DMA_Blocking>

  imu_reading_to_data(IMU_data, imu_Rx);
 800ca9e:	f107 0218 	add.w	r2, r7, #24
 800caa2:	f107 0308 	add.w	r3, r7, #8
 800caa6:	4611      	mov	r1, r2
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7ff ff03 	bl	800c8b4 <imu_reading_to_data>
  imu_int_to_norm_float(ICM, IMU_data, IMU_floats);
 800caae:	f107 0308 	add.w	r3, r7, #8
 800cab2:	683a      	ldr	r2, [r7, #0]
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7ff ff26 	bl	800c908 <imu_int_to_norm_float>
}
 800cabc:	bf00      	nop
 800cabe:	3738      	adds	r7, #56	; 0x38
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <KalmanFilter_init>:
  }
  quatProd(qa, qme, qa);
  vectNormalize(qa, 4);
}

void KalmanFilter_init(KalmanFilter* KF, float* Q_init_vals, float* R_init_vals, float* P_post_init_vals, float dt) {
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b088      	sub	sp, #32
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6178      	str	r0, [r7, #20]
 800cacc:	6139      	str	r1, [r7, #16]
 800cace:	60fa      	str	r2, [r7, #12]
 800cad0:	60bb      	str	r3, [r7, #8]
 800cad2:	ed87 0a01 	vstr	s0, [r7, #4]
	for (int i = 0; i < 16; i++) {
 800cad6:	2300      	movs	r3, #0
 800cad8:	61fb      	str	r3, [r7, #28]
 800cada:	e023      	b.n	800cb24 <KalmanFilter_init+0x60>
		KF->Q_vals[i] = *(Q_init_vals + i);
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	4413      	add	r3, r2
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	6979      	ldr	r1, [r7, #20]
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	3302      	adds	r3, #2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	440b      	add	r3, r1
 800caf0:	601a      	str	r2, [r3, #0]
		KF->R_vals[i] = *(R_init_vals + i);
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	4413      	add	r3, r2
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	6979      	ldr	r1, [r7, #20]
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	3314      	adds	r3, #20
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	440b      	add	r3, r1
 800cb06:	601a      	str	r2, [r3, #0]
		KF->P_post_vals[i] = *(P_post_init_vals + i);
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	4413      	add	r3, r2
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	6979      	ldr	r1, [r7, #20]
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	3326      	adds	r3, #38	; 0x26
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	440b      	add	r3, r1
 800cb1c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	3301      	adds	r3, #1
 800cb22:	61fb      	str	r3, [r7, #28]
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	2b0f      	cmp	r3, #15
 800cb28:	ddd8      	ble.n	800cadc <KalmanFilter_init+0x18>
	}
	KF->dt = dt;
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	arm_mat_init_f32(&(KF->Q), 4, 4, KF->Q_vals);
 800cb32:	6978      	ldr	r0, [r7, #20]
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	3308      	adds	r3, #8
 800cb38:	2204      	movs	r2, #4
 800cb3a:	2104      	movs	r1, #4
 800cb3c:	f000 f8da 	bl	800ccf4 <arm_mat_init_f32>
	arm_mat_init_f32(&(KF->R), 4, 4, KF->R_vals);
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	3350      	adds	r3, #80	; 0x50
 800cb4a:	2204      	movs	r2, #4
 800cb4c:	2104      	movs	r1, #4
 800cb4e:	f000 f8d1 	bl	800ccf4 <arm_mat_init_f32>
	arm_mat_init_f32(&(KF->P_post), 4, 4, KF->P_post_vals);
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	3398      	adds	r3, #152	; 0x98
 800cb5c:	2204      	movs	r2, #4
 800cb5e:	2104      	movs	r1, #4
 800cb60:	f000 f8c8 	bl	800ccf4 <arm_mat_init_f32>

}
 800cb64:	bf00      	nop
 800cb66:	3720      	adds	r7, #32
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <vectMag>:
  *(result+1) = -*(q+1);
  *(result+2) = -*(q+2);
  *(result+3) = -*(q+3);
}

float vectMag(float* vec, int len) {
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  float sum_sqrs = 0;
 800cb76:	f04f 0300 	mov.w	r3, #0
 800cb7a:	61fb      	str	r3, [r7, #28]
  for (int i = 0; i < len; i++) {
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	61bb      	str	r3, [r7, #24]
 800cb80:	e016      	b.n	800cbb0 <vectMag+0x44>
	  sum_sqrs += (*(vec+i))*(*(vec+i));
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	4413      	add	r3, r2
 800cb8a:	ed93 7a00 	vldr	s14, [r3]
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	4413      	add	r3, r2
 800cb96:	edd3 7a00 	vldr	s15, [r3]
 800cb9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb9e:	ed97 7a07 	vldr	s14, [r7, #28]
 800cba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cba6:	edc7 7a07 	vstr	s15, [r7, #28]
  for (int i = 0; i < len; i++) {
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	3301      	adds	r3, #1
 800cbae:	61bb      	str	r3, [r7, #24]
 800cbb0:	69ba      	ldr	r2, [r7, #24]
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	dbe4      	blt.n	800cb82 <vectMag+0x16>
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	617b      	str	r3, [r7, #20]
 800cbbc:	f107 030c 	add.w	r3, r7, #12
 800cbc0:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800cbc2:	edd7 7a05 	vldr	s15, [r7, #20]
 800cbc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbce:	db09      	blt.n	800cbe4 <vectMag+0x78>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800cbd0:	ed97 0a05 	vldr	s0, [r7, #20]
 800cbd4:	f000 f8c4 	bl	800cd60 <sqrtf>
 800cbd8:	eef0 7a40 	vmov.f32	s15, s0
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	edc3 7a00 	vstr	s15, [r3]
 800cbe2:	e003      	b.n	800cbec <vectMag+0x80>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	f04f 0200 	mov.w	r2, #0
 800cbea:	601a      	str	r2, [r3, #0]
  }
  float mag;
  arm_sqrt_f32(sum_sqrs, &mag);
  return mag;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	ee07 3a90 	vmov	s15, r3
}
 800cbf2:	eeb0 0a67 	vmov.f32	s0, s15
 800cbf6:	3720      	adds	r7, #32
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <vectNormalize>:

void vectNormalize(float* vec, int len) {
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  float mag = vectMag(vec, len);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff ffaf 	bl	800cb6c <vectMag>
 800cc0e:	ed87 0a02 	vstr	s0, [r7, #8]
  for (int i = 0; i < len; i++) {
 800cc12:	2300      	movs	r3, #0
 800cc14:	60fb      	str	r3, [r7, #12]
 800cc16:	e012      	b.n	800cc3e <vectNormalize+0x42>
    *(vec+i) = (*(vec+i))/mag;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	4413      	add	r3, r2
 800cc20:	edd3 6a00 	vldr	s13, [r3]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	ed97 7a02 	vldr	s14, [r7, #8]
 800cc30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc34:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < len; i++) {
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	60fb      	str	r3, [r7, #12]
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	dbe8      	blt.n	800cc18 <vectNormalize+0x1c>
  }
}
 800cc46:	bf00      	nop
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <HAL_SPI_TxRxCpltCallback>:

#include "spi_wrapper.h"

volatile bool SPI1_busy = false;

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi1) {
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a0d      	ldr	r2, [pc, #52]	; (800cc90 <HAL_SPI_TxRxCpltCallback+0x40>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d113      	bne.n	800cc88 <HAL_SPI_TxRxCpltCallback+0x38>
    HAL_GPIO_WritePin(CS_ICM0_GPIO_Port, CS_ICM0_Pin, GPIO_PIN_SET);
 800cc60:	2201      	movs	r2, #1
 800cc62:	2101      	movs	r1, #1
 800cc64:	480b      	ldr	r0, [pc, #44]	; (800cc94 <HAL_SPI_TxRxCpltCallback+0x44>)
 800cc66:	f7f5 fd0b 	bl	8002680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_FRAM0_GPIO_Port, CS_FRAM0_Pin, GPIO_PIN_SET);
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cc70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cc74:	f7f5 fd04 	bl	8002680 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_MMC0_GPIO_Port, CS_MMC0_Pin, GPIO_PIN_SET);
 800cc78:	2201      	movs	r2, #1
 800cc7a:	2180      	movs	r1, #128	; 0x80
 800cc7c:	4805      	ldr	r0, [pc, #20]	; (800cc94 <HAL_SPI_TxRxCpltCallback+0x44>)
 800cc7e:	f7f5 fcff 	bl	8002680 <HAL_GPIO_WritePin>
    SPI1_busy = false;
 800cc82:	4b05      	ldr	r3, [pc, #20]	; (800cc98 <HAL_SPI_TxRxCpltCallback+0x48>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	701a      	strb	r2, [r3, #0]
  }
}
 800cc88:	bf00      	nop
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	20000434 	.word	0x20000434
 800cc94:	48000400 	.word	0x48000400
 800cc98:	20000431 	.word	0x20000431

0800cc9c <SPI_TransmitReceive_DMA_Blocking>:

void SPI_TransmitReceive_DMA_Blocking(SPI_HandleTypeDef *hspi,
                                      uint8_t *pTxData,
                                      uint8_t *pRxData,
                                      uint16_t Size) {
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
 800cca8:	807b      	strh	r3, [r7, #2]
  volatile bool *SPI_busy;
  if (hspi == &hspi1) {
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	4a0f      	ldr	r2, [pc, #60]	; (800ccec <SPI_TransmitReceive_DMA_Blocking+0x50>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d117      	bne.n	800cce2 <SPI_TransmitReceive_DMA_Blocking+0x46>
    SPI_busy = &SPI1_busy;
 800ccb2:	4b0f      	ldr	r3, [pc, #60]	; (800ccf0 <SPI_TransmitReceive_DMA_Blocking+0x54>)
 800ccb4:	617b      	str	r3, [r7, #20]
  } else return;

  while(*SPI_busy);
 800ccb6:	bf00      	nop
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1fa      	bne.n	800ccb8 <SPI_TransmitReceive_DMA_Blocking+0x1c>
  *SPI_busy = true;
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive_DMA(hspi, pTxData, pRxData, Size);
 800ccc8:	887b      	ldrh	r3, [r7, #2]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	68b9      	ldr	r1, [r7, #8]
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f7f8 faec 	bl	80052ac <HAL_SPI_TransmitReceive_DMA>
  while(*SPI_busy);
 800ccd4:	bf00      	nop
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1fa      	bne.n	800ccd6 <SPI_TransmitReceive_DMA_Blocking+0x3a>
 800cce0:	e000      	b.n	800cce4 <SPI_TransmitReceive_DMA_Blocking+0x48>
  } else return;
 800cce2:	bf00      	nop
}
 800cce4:	3718      	adds	r7, #24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	20000434 	.word	0x20000434
 800ccf0:	20000431 	.word	0x20000431

0800ccf4 <arm_mat_init_f32>:
 800ccf4:	8001      	strh	r1, [r0, #0]
 800ccf6:	8042      	strh	r2, [r0, #2]
 800ccf8:	6043      	str	r3, [r0, #4]
 800ccfa:	4770      	bx	lr

0800ccfc <__errno>:
 800ccfc:	4b01      	ldr	r3, [pc, #4]	; (800cd04 <__errno+0x8>)
 800ccfe:	6818      	ldr	r0, [r3, #0]
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	20000188 	.word	0x20000188

0800cd08 <__libc_init_array>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	4e0d      	ldr	r6, [pc, #52]	; (800cd40 <__libc_init_array+0x38>)
 800cd0c:	4c0d      	ldr	r4, [pc, #52]	; (800cd44 <__libc_init_array+0x3c>)
 800cd0e:	1ba4      	subs	r4, r4, r6
 800cd10:	10a4      	asrs	r4, r4, #2
 800cd12:	2500      	movs	r5, #0
 800cd14:	42a5      	cmp	r5, r4
 800cd16:	d109      	bne.n	800cd2c <__libc_init_array+0x24>
 800cd18:	4e0b      	ldr	r6, [pc, #44]	; (800cd48 <__libc_init_array+0x40>)
 800cd1a:	4c0c      	ldr	r4, [pc, #48]	; (800cd4c <__libc_init_array+0x44>)
 800cd1c:	f000 f876 	bl	800ce0c <_init>
 800cd20:	1ba4      	subs	r4, r4, r6
 800cd22:	10a4      	asrs	r4, r4, #2
 800cd24:	2500      	movs	r5, #0
 800cd26:	42a5      	cmp	r5, r4
 800cd28:	d105      	bne.n	800cd36 <__libc_init_array+0x2e>
 800cd2a:	bd70      	pop	{r4, r5, r6, pc}
 800cd2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cd30:	4798      	blx	r3
 800cd32:	3501      	adds	r5, #1
 800cd34:	e7ee      	b.n	800cd14 <__libc_init_array+0xc>
 800cd36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cd3a:	4798      	blx	r3
 800cd3c:	3501      	adds	r5, #1
 800cd3e:	e7f2      	b.n	800cd26 <__libc_init_array+0x1e>
 800cd40:	0800cf6c 	.word	0x0800cf6c
 800cd44:	0800cf6c 	.word	0x0800cf6c
 800cd48:	0800cf6c 	.word	0x0800cf6c
 800cd4c:	0800cf70 	.word	0x0800cf70

0800cd50 <memset>:
 800cd50:	4402      	add	r2, r0
 800cd52:	4603      	mov	r3, r0
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d100      	bne.n	800cd5a <memset+0xa>
 800cd58:	4770      	bx	lr
 800cd5a:	f803 1b01 	strb.w	r1, [r3], #1
 800cd5e:	e7f9      	b.n	800cd54 <memset+0x4>

0800cd60 <sqrtf>:
 800cd60:	b510      	push	{r4, lr}
 800cd62:	ed2d 8b02 	vpush	{d8}
 800cd66:	b08a      	sub	sp, #40	; 0x28
 800cd68:	eeb0 8a40 	vmov.f32	s16, s0
 800cd6c:	f000 f848 	bl	800ce00 <__ieee754_sqrtf>
 800cd70:	4b21      	ldr	r3, [pc, #132]	; (800cdf8 <sqrtf+0x98>)
 800cd72:	f993 4000 	ldrsb.w	r4, [r3]
 800cd76:	1c63      	adds	r3, r4, #1
 800cd78:	d02c      	beq.n	800cdd4 <sqrtf+0x74>
 800cd7a:	eeb4 8a48 	vcmp.f32	s16, s16
 800cd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd82:	d627      	bvs.n	800cdd4 <sqrtf+0x74>
 800cd84:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8c:	d522      	bpl.n	800cdd4 <sqrtf+0x74>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	4b1a      	ldr	r3, [pc, #104]	; (800cdfc <sqrtf+0x9c>)
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	ee18 0a10 	vmov	r0, s16
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	9308      	str	r3, [sp, #32]
 800cd9e:	f7f3 fb9f 	bl	80004e0 <__aeabi_f2d>
 800cda2:	2200      	movs	r2, #0
 800cda4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cda8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdac:	2300      	movs	r3, #0
 800cdae:	b9ac      	cbnz	r4, 800cddc <sqrtf+0x7c>
 800cdb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cdb4:	4668      	mov	r0, sp
 800cdb6:	f000 f826 	bl	800ce06 <matherr>
 800cdba:	b1b8      	cbz	r0, 800cdec <sqrtf+0x8c>
 800cdbc:	9b08      	ldr	r3, [sp, #32]
 800cdbe:	b11b      	cbz	r3, 800cdc8 <sqrtf+0x68>
 800cdc0:	f7ff ff9c 	bl	800ccfc <__errno>
 800cdc4:	9b08      	ldr	r3, [sp, #32]
 800cdc6:	6003      	str	r3, [r0, #0]
 800cdc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdcc:	f7f3 fdf2 	bl	80009b4 <__aeabi_d2f>
 800cdd0:	ee00 0a10 	vmov	s0, r0
 800cdd4:	b00a      	add	sp, #40	; 0x28
 800cdd6:	ecbd 8b02 	vpop	{d8}
 800cdda:	bd10      	pop	{r4, pc}
 800cddc:	4610      	mov	r0, r2
 800cdde:	4619      	mov	r1, r3
 800cde0:	f7f3 fd00 	bl	80007e4 <__aeabi_ddiv>
 800cde4:	2c02      	cmp	r4, #2
 800cde6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cdea:	d1e3      	bne.n	800cdb4 <sqrtf+0x54>
 800cdec:	f7ff ff86 	bl	800ccfc <__errno>
 800cdf0:	2321      	movs	r3, #33	; 0x21
 800cdf2:	6003      	str	r3, [r0, #0]
 800cdf4:	e7e2      	b.n	800cdbc <sqrtf+0x5c>
 800cdf6:	bf00      	nop
 800cdf8:	200001ec 	.word	0x200001ec
 800cdfc:	0800cf5c 	.word	0x0800cf5c

0800ce00 <__ieee754_sqrtf>:
 800ce00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ce04:	4770      	bx	lr

0800ce06 <matherr>:
 800ce06:	2000      	movs	r0, #0
 800ce08:	4770      	bx	lr
	...

0800ce0c <_init>:
 800ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0e:	bf00      	nop
 800ce10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce12:	bc08      	pop	{r3}
 800ce14:	469e      	mov	lr, r3
 800ce16:	4770      	bx	lr

0800ce18 <_fini>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	bf00      	nop
 800ce1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1e:	bc08      	pop	{r3}
 800ce20:	469e      	mov	lr, r3
 800ce22:	4770      	bx	lr
