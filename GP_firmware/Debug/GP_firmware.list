
GP_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a77c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800a954  0800a954  0001a954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9dc  0800a9dc  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e4  0800a9e4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e4  0800a9e4  0001a9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e8  0800a9e8  0001a9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a9ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  20000184  0800ab70  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800ab70  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215ab  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f7d  00000000  00000000  0004175f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001868  00000000  00000000  000456e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  00046f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000222df  00000000  00000000  000485c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001758b  00000000  00000000  0006a8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc6ca  00000000  00000000  00081e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e4fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065fc  00000000  00000000  0014e578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a93c 	.word	0x0800a93c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800a93c 	.word	0x0800a93c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b49      	ldr	r3, [pc, #292]	; (8000654 <MX_GPIO_Init+0x13c>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a48      	ldr	r2, [pc, #288]	; (8000654 <MX_GPIO_Init+0x13c>)
 8000534:	f043 0320 	orr.w	r3, r3, #32
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b46      	ldr	r3, [pc, #280]	; (8000654 <MX_GPIO_Init+0x13c>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0320 	and.w	r3, r3, #32
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000546:	4b43      	ldr	r3, [pc, #268]	; (8000654 <MX_GPIO_Init+0x13c>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a42      	ldr	r2, [pc, #264]	; (8000654 <MX_GPIO_Init+0x13c>)
 800054c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b40      	ldr	r3, [pc, #256]	; (8000654 <MX_GPIO_Init+0x13c>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b3d      	ldr	r3, [pc, #244]	; (8000654 <MX_GPIO_Init+0x13c>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a3c      	ldr	r2, [pc, #240]	; (8000654 <MX_GPIO_Init+0x13c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b3a      	ldr	r3, [pc, #232]	; (8000654 <MX_GPIO_Init+0x13c>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	4b37      	ldr	r3, [pc, #220]	; (8000654 <MX_GPIO_Init+0x13c>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a36      	ldr	r2, [pc, #216]	; (8000654 <MX_GPIO_Init+0x13c>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b34      	ldr	r3, [pc, #208]	; (8000654 <MX_GPIO_Init+0x13c>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_ICM_Pin|CS_MMC_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2181      	movs	r1, #129	; 0x81
 8000592:	4831      	ldr	r0, [pc, #196]	; (8000658 <MX_GPIO_Init+0x140>)
 8000594:	f001 fa18 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_FRAM_GPIO_Port, CS_FRAM_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f001 fa11 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ac:	2303      	movs	r3, #3
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	4828      	ldr	r0, [pc, #160]	; (800065c <MX_GPIO_Init+0x144>)
 80005bc:	f000 ff88 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SWTCH0_Pin|BTN1_Pin|BTN2_Pin|BTN0_Pin;
 80005c0:	2317      	movs	r3, #23
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f000 ff7b 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_ICM_Pin|CS_MMC_Pin;
 80005da:	2381      	movs	r3, #129	; 0x81
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4819      	ldr	r0, [pc, #100]	; (8000658 <MX_GPIO_Init+0x140>)
 80005f2:	f000 ff6d 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_FRAM_Pin;
 80005f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_FRAM_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f000 ff5d 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061c:	2303      	movs	r3, #3
 800061e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062e:	f000 ff4f 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000638:	2303      	movs	r3, #3
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_GPIO_Init+0x140>)
 8000648:	f000 ff42 	bl	80014d0 <HAL_GPIO_Init>

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	48000400 	.word	0x48000400
 800065c:	48001800 	.word	0x48001800

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  BootLocation();
 8000664:	f000 f894 	bl	8000790 <BootLocation>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fdb1 	bl	80011ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f826 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f7ff ff52 	bl	8000518 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000674:	f000 f8fc 	bl	8000870 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000678:	f000 fc56 	bl	8000f28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800067c:	f000 fca0 	bl	8000fc0 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8000680:	f009 fc62 	bl	8009f48 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000684:	f000 f9f0 	bl	8000a68 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000688:	f000 fa58 	bl	8000b3c <MX_TIM4_Init>
  MX_TIM8_Init();
 800068c:	f000 fad0 	bl	8000c30 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000690:	4807      	ldr	r0, [pc, #28]	; (80006b0 <main+0x50>)
 8000692:	f003 fe75 	bl	8004380 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000696:	2100      	movs	r1, #0
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <main+0x54>)
 800069a:	f003 ff3d 	bl	8004518 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 800069e:	2104      	movs	r1, #4
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <main+0x58>)
 80006a2:	f005 f815 	bl	80056d0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80006a6:	2108      	movs	r1, #8
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <main+0x58>)
 80006aa:	f005 f811 	bl	80056d0 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <main+0x4e>
 80006b0:	200004c0 	.word	0x200004c0
 80006b4:	20000474 	.word	0x20000474
 80006b8:	20000428 	.word	0x20000428

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0a4      	sub	sp, #144	; 0x90
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006c6:	2238      	movs	r2, #56	; 0x38
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00a f92e 	bl	800a92c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2244      	movs	r2, #68	; 0x44
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00a f920 	bl	800a92c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f0:	f002 fcea 	bl	80030c8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	2303      	movs	r3, #3
 8000704:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000706:	2301      	movs	r3, #1
 8000708:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 36;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000716:	2306      	movs	r3, #6
 8000718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fe04 	bl	8003334 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000732:	f000 f895 	bl	8000860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800074e:	2104      	movs	r1, #4
 8000750:	4618      	mov	r0, r3
 8000752:	f003 f907 	bl	8003964 <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800075c:	f000 f880 	bl	8000860 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000760:	f242 0303 	movw	r3, #8195	; 0x2003
 8000764:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800076e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fb10 	bl	8003d9c <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000782:	f000 f86d 	bl	8000860 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3790      	adds	r7, #144	; 0x90
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <BootLocation>:

/* USER CODE BEGIN 4 */
void BootLocation(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <BootLocation+0x78>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <BootLocation+0x78>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <BootLocation+0x78>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = BTN0_Pin;
 80007bc:	2310      	movs	r3, #16
 80007be:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f000 fe7e 	bl	80014d0 <HAL_GPIO_Init>

	if (!HAL_GPIO_ReadPin(GPIOA, BTN0_Pin)) {
 80007d4:	2110      	movs	r1, #16
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f001 f8dd 	bl	8001998 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10c      	bne.n	80007fe <BootLocation+0x6e>
	  HAL_GPIO_DeInit(GPIOA, BTN0_Pin);
 80007e4:	2110      	movs	r1, #16
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f000 fff3 	bl	80017d4 <HAL_GPIO_DeInit>
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <BootLocation+0x78>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a05      	ldr	r2, [pc, #20]	; (8000808 <BootLocation+0x78>)
 80007f4:	f023 0301 	bic.w	r3, r3, #1
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
	  JumpToBootloader();
 80007fa:	f000 f807 	bl	800080c <JumpToBootloader>
	}
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <JumpToBootloader>:
/**
 * Function to perform jump to system memory boot from user application
 *
 * Call function when you want to jump to system memory
 */
void JumpToBootloader(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
   * Step: Set system memory address.
   *
   *       For STM32F429, system memory is on 0x1FFF 0000
   *       For other families, check AN2606 document table 110 with descriptions of memory addresses
   */
  volatile uint32_t addr = 0x1FFF0000;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <JumpToBootloader+0x48>)
 8000814:	607b      	str	r3, [r7, #4]
  /**
   * Step: Disable RCC, set it to default (after reset) settings
   *       Internal clock, no PLL, etc.
   */
#if defined(USE_HAL_DRIVER)
  HAL_RCC_DeInit();
 8000816:	f002 fd0b 	bl	8003230 <HAL_RCC_DeInit>
#endif /* defined(USE_STDPERIPH_DRIVER) */

  /**
   * Step: Disable systick timer and reset it to default values
   */
  SysTick->CTRL = 0;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <JumpToBootloader+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <JumpToBootloader+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <JumpToBootloader+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
   *       For STM32F0xx, CFGR1 register in SYSCFG is used (bits[1:0])
   *       For others, check family reference manual
   */
  //Remap by hand... {
#if defined(STM32G4)
  SYSCFG->MEMRMP = 0x01;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <JumpToBootloader+0x50>)
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]

  /**
   * Step: Set jump memory location for system memory
   *       Use address with 4 bytes offset which specifies jump location where program starts
   */
  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3304      	adds	r3, #4
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	60fb      	str	r3, [r7, #12]
   *       This step must be done last otherwise local variables in this function
   *       don't have proper value since stack pointer is located on different position
   *
   *       Set direct address location which specifies stack pointer in SRAM location
   */
  __set_MSP(*(uint32_t *)addr);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f383 8808 	msr	MSP, r3

  /**
   * Step: Actually call our function to jump to set location
   *       This will start system memory execution
   */
  SysMemBootJump();
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4798      	blx	r3

  /**
   * Step: Connect USB<->UART converter to dedicated USART pins and test
   *       and test with bootloader works with STM32 Flash Loader Demonstrator software
   */
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	1fff0000 	.word	0x1fff0000
 8000858:	e000e010 	.word	0xe000e010
 800085c:	40010000 	.word	0x40010000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_SPI1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_SPI1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_SPI1_Init+0x74>)
 800087c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_SPI1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_SPI1_Init+0x74>)
 800088a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800088e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_SPI1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_SPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_SPI1_Init+0x74>)
 800089e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008a6:	2218      	movs	r2, #24
 80008a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008be:	2207      	movs	r2, #7
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008d0:	f003 fc54 	bl	800417c <HAL_SPI_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f7ff ffc1 	bl	8000860 <Error_Handler>
  }

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200003c4 	.word	0x200003c4
 80008e8:	40013000 	.word	0x40013000

080008ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_SPI_MspInit+0x7c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d128      	bne.n	8000960 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_SPI_MspInit+0x80>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_SPI_MspInit+0x80>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800093e:	23e0      	movs	r3, #224	; 0xe0
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094e:	2305      	movs	r3, #5
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f000 fdb8 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40013000 	.word	0x40013000
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	; 0x60
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	; 0x58
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009a6:	f002 fc33 	bl	8003210 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0c:	f000 fc32 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <USB_LP_IRQHandler+0x10>)
 8000a1a:	f001 f8f4 	bl	8001c06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200012c8 	.word	0x200012c8

08000a28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a2e:	f003 fe73 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200004c0 	.word	0x200004c0

08000a3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <SystemInit+0x28>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <SystemInit+0x28>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SystemInit+0x28>)
 8000a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a56:	609a      	str	r2, [r3, #8]
#endif
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	; 0x50
 8000a6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2234      	movs	r2, #52	; 0x34
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f009 ff4c 	bl	800a92c <memset>

  htim1.Instance = TIM1;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000a96:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <MX_TIM1_Init+0xd0>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 143;
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000a9c:	228f      	movs	r2, #143	; 0x8f
 8000a9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 999;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000ab6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac2:	481c      	ldr	r0, [pc, #112]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000ac4:	f003 fc05 	bl	80042d2 <HAL_TIM_Base_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000ace:	f7ff fec7 	bl	8000860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000adc:	4619      	mov	r1, r3
 8000ade:	4815      	ldr	r0, [pc, #84]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000ae0:	f004 f8aa 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8000aea:	f7ff feb9 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000b02:	f004 fe99 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b0c:	f7ff fea8 	bl	8000860 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_TIM1_Init+0xcc>)
 8000b1e:	f004 ff0d 	bl	800593c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b28:	f7ff fe9a 	bl	8000860 <Error_Handler>
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3750      	adds	r7, #80	; 0x50
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200004c0 	.word	0x200004c0
 8000b38:	40012c00 	.word	0x40012c00

08000b3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000b70:	4a2e      	ldr	r2, [pc, #184]	; (8000c2c <MX_TIM4_Init+0xf0>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14399;
 8000b74:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000b76:	f643 023f 	movw	r2, #14399	; 0x383f
 8000b7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000b84:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b96:	4824      	ldr	r0, [pc, #144]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000b98:	f003 fb9b 	bl	80042d2 <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f7ff fe5d 	bl	8000860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481d      	ldr	r0, [pc, #116]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000bb4:	f004 f840 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000bbe:	f7ff fe4f 	bl	8000860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bc2:	4819      	ldr	r0, [pc, #100]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000bc4:	f003 fc46 	bl	8004454 <HAL_TIM_PWM_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000bce:	f7ff fe47 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4811      	ldr	r0, [pc, #68]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000be2:	f004 fe29 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000bec:	f7ff fe38 	bl	8000860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf0:	2360      	movs	r3, #96	; 0x60
 8000bf2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4999;
 8000bf4:	f241 3387 	movw	r3, #4999	; 0x1387
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	2200      	movs	r2, #0
 8000c06:	4619      	mov	r1, r3
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000c0a:	f003 ff05 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000c14:	f7ff fe24 	bl	8000860 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <MX_TIM4_Init+0xec>)
 8000c1a:	f000 f919 	bl	8000e50 <HAL_TIM_MspPostInit>

}
 8000c1e:	bf00      	nop
 8000c20:	3738      	adds	r7, #56	; 0x38
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000474 	.word	0x20000474
 8000c2c:	40000800 	.word	0x40000800

08000c30 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b09c      	sub	sp, #112	; 0x70
 8000c34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]
 8000c62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2234      	movs	r2, #52	; 0x34
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f009 fe5e 	bl	800a92c <memset>

  htim8.Instance = TIM8;
 8000c70:	4b4e      	ldr	r3, [pc, #312]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000c72:	4a4f      	ldr	r2, [pc, #316]	; (8000db0 <MX_TIM8_Init+0x180>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 14399;
 8000c76:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000c78:	f643 023f 	movw	r2, #14399	; 0x383f
 8000c7c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8000c84:	4b49      	ldr	r3, [pc, #292]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000c86:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c8a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b47      	ldr	r3, [pc, #284]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c92:	4b46      	ldr	r3, [pc, #280]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b44      	ldr	r3, [pc, #272]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c9e:	4843      	ldr	r0, [pc, #268]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000ca0:	f003 fb17 	bl	80042d2 <HAL_TIM_Base_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8000caa:	f7ff fdd9 	bl	8000860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cb4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cb8:	4619      	mov	r1, r3
 8000cba:	483c      	ldr	r0, [pc, #240]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000cbc:	f003 ffbc 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8000cc6:	f7ff fdcb 	bl	8000860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000cca:	4838      	ldr	r0, [pc, #224]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000ccc:	f003 fbc2 	bl	8004454 <HAL_TIM_PWM_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8000cd6:	f7ff fdc3 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ce6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cea:	4619      	mov	r1, r3
 8000cec:	482f      	ldr	r0, [pc, #188]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000cee:	f004 fda3 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8000cf8:	f7ff fdb2 	bl	8000860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfc:	2360      	movs	r3, #96	; 0x60
 8000cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 999;
 8000d00:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d06:	2300      	movs	r3, #0
 8000d08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d1e:	2204      	movs	r2, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4822      	ldr	r0, [pc, #136]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000d24:	f003 fe78 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 8000d2e:	f7ff fd97 	bl	8000860 <Error_Handler>
  }
  sConfigOC.Pulse = 1999;
 8000d32:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d3c:	2208      	movs	r2, #8
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481a      	ldr	r0, [pc, #104]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000d42:	f003 fe69 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000d4c:	f7ff fd88 	bl	8000860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000d8e:	f004 fdd5 	bl	800593c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM8_Init+0x16c>
  {
    Error_Handler();
 8000d98:	f7ff fd62 	bl	8000860 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <MX_TIM8_Init+0x17c>)
 8000d9e:	f000 f857 	bl	8000e50 <HAL_TIM_MspPostInit>

}
 8000da2:	bf00      	nop
 8000da4:	3770      	adds	r7, #112	; 0x70
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000428 	.word	0x20000428
 8000db0:	40013400 	.word	0x40013400

08000db4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <HAL_TIM_Base_MspInit+0x8c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d114      	bne.n	8000df0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_TIM_Base_MspInit+0x90>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	4a1e      	ldr	r2, [pc, #120]	; (8000e44 <HAL_TIM_Base_MspInit+0x90>)
 8000dcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_TIM_Base_MspInit+0x90>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2019      	movs	r0, #25
 8000de4:	f000 fb3f 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000de8:	2019      	movs	r0, #25
 8000dea:	f000 fb56 	bl	800149a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000dee:	e022      	b.n	8000e36 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <HAL_TIM_Base_MspInit+0x94>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10c      	bne.n	8000e14 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_TIM_Base_MspInit+0x90>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <HAL_TIM_Base_MspInit+0x90>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_TIM_Base_MspInit+0x90>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
}
 8000e12:	e010      	b.n	8000e36 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM8)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <HAL_TIM_Base_MspInit+0x98>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10b      	bne.n	8000e36 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_TIM_Base_MspInit+0x90>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_TIM_Base_MspInit+0x90>)
 8000e24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e28:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_TIM_Base_MspInit+0x90>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40012c00 	.word	0x40012c00
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40000800 	.word	0x40000800
 8000e4c:	40013400 	.word	0x40013400

08000e50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a2a      	ldr	r2, [pc, #168]	; (8000f18 <HAL_TIM_MspPostInit+0xc8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d11c      	bne.n	8000eac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <HAL_TIM_MspPostInit+0xcc>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a29      	ldr	r2, [pc, #164]	; (8000f1c <HAL_TIM_MspPostInit+0xcc>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <HAL_TIM_MspPostInit+0xcc>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = T4_1_LED2_Pin;
 8000e8a:	2340      	movs	r3, #64	; 0x40
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(T4_1_LED2_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481e      	ldr	r0, [pc, #120]	; (8000f20 <HAL_TIM_MspPostInit+0xd0>)
 8000ea6:	f000 fb13 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000eaa:	e030      	b.n	8000f0e <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM8)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <HAL_TIM_MspPostInit+0xd4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d12b      	bne.n	8000f0e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_TIM_MspPostInit+0xcc>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <HAL_TIM_MspPostInit+0xcc>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_TIM_MspPostInit+0xcc>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T8_2N_LED0_Pin;
 8000ece:	2310      	movs	r3, #16
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(T8_2N_LED0_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <HAL_TIM_MspPostInit+0xd0>)
 8000eea:	f000 faf1 	bl	80014d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = T8_3N_LED1_Pin;
 8000eee:	2320      	movs	r3, #32
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000efe:	2303      	movs	r3, #3
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(T8_3N_LED1_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_TIM_MspPostInit+0xd0>)
 8000f0a:	f000 fae1 	bl	80014d0 <HAL_GPIO_Init>
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40000800 	.word	0x40000800
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	40013400 	.word	0x40013400

08000f28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f2e:	4a23      	ldr	r2, [pc, #140]	; (8000fbc <MX_USART1_UART_Init+0x94>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f34:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f72:	f004 fdee 	bl	8005b52 <HAL_UART_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f7c:	f7ff fc70 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f84:	f005 fa81 	bl	800648a <HAL_UARTEx_SetTxFifoThreshold>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f8e:	f7ff fc67 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000f96:	f005 fab6 	bl	8006506 <HAL_UARTEx_SetRxFifoThreshold>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fa0:	f7ff fc5e 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_USART1_UART_Init+0x90>)
 8000fa6:	f005 fa37 	bl	8006418 <HAL_UARTEx_DisableFifoMode>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fb0:	f7ff fc56 	bl	8000860 <Error_Handler>
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000050c 	.word	0x2000050c
 8000fbc:	40013800 	.word	0x40013800

08000fc0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8000fc6:	4a23      	ldr	r2, [pc, #140]	; (8001054 <MX_USART2_UART_Init+0x94>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8000fcc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_USART2_UART_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001008:	4811      	ldr	r0, [pc, #68]	; (8001050 <MX_USART2_UART_Init+0x90>)
 800100a:	f004 fda2 	bl	8005b52 <HAL_UART_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001014:	f7ff fc24 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001018:	2100      	movs	r1, #0
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_USART2_UART_Init+0x90>)
 800101c:	f005 fa35 	bl	800648a <HAL_UARTEx_SetTxFifoThreshold>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001026:	f7ff fc1b 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <MX_USART2_UART_Init+0x90>)
 800102e:	f005 fa6a 	bl	8006506 <HAL_UARTEx_SetRxFifoThreshold>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001038:	f7ff fc12 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_USART2_UART_Init+0x90>)
 800103e:	f005 f9eb 	bl	8006418 <HAL_UARTEx_DisableFifoMode>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001048:	f7ff fc0a 	bl	8000860 <Error_Handler>
  }

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000598 	.word	0x20000598
 8001054:	40004400 	.word	0x40004400

08001058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	; 0x30
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a3d      	ldr	r2, [pc, #244]	; (800116c <HAL_UART_MspInit+0x114>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d12a      	bne.n	80010d0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <HAL_UART_MspInit+0x118>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	4a3c      	ldr	r2, [pc, #240]	; (8001170 <HAL_UART_MspInit+0x118>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6613      	str	r3, [r2, #96]	; 0x60
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_UART_MspInit+0x118>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	61bb      	str	r3, [r7, #24]
 8001090:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <HAL_UART_MspInit+0x118>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a36      	ldr	r2, [pc, #216]	; (8001170 <HAL_UART_MspInit+0x118>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <HAL_UART_MspInit+0x118>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010bc:	2307      	movs	r3, #7
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f000 fa01 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010ce:	e049      	b.n	8001164 <HAL_UART_MspInit+0x10c>
  else if(uartHandle->Instance==USART2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <HAL_UART_MspInit+0x11c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d144      	bne.n	8001164 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_UART_MspInit+0x118>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	4a24      	ldr	r2, [pc, #144]	; (8001170 <HAL_UART_MspInit+0x118>)
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	6593      	str	r3, [r2, #88]	; 0x58
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_UART_MspInit+0x118>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_UART_MspInit+0x118>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <HAL_UART_MspInit+0x118>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_UART_MspInit+0x118>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_UART_MspInit+0x118>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <HAL_UART_MspInit+0x118>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_UART_MspInit+0x118>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001122:	2308      	movs	r3, #8
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001132:	2307      	movs	r3, #7
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001140:	f000 f9c6 	bl	80014d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001144:	2308      	movs	r3, #8
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001154:	2307      	movs	r3, #7
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <HAL_UART_MspInit+0x120>)
 8001160:	f000 f9b6 	bl	80014d0 <HAL_GPIO_Init>
}
 8001164:	bf00      	nop
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40013800 	.word	0x40013800
 8001170:	40021000 	.word	0x40021000
 8001174:	40004400 	.word	0x40004400
 8001178:	48000400 	.word	0x48000400

0800117c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800117e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001182:	490e      	ldr	r1, [pc, #56]	; (80011bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001184:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <LoopForever+0xe>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001198:	4c0b      	ldr	r4, [pc, #44]	; (80011c8 <LoopForever+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a6:	f7ff fc49 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011aa:	f009 fb9b 	bl	800a8e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ae:	f7ff fa57 	bl	8000660 <main>

080011b2 <LoopForever>:

LoopForever:
    b LoopForever
 80011b2:	e7fe      	b.n	80011b2 <LoopForever>
  ldr   r0, =_estack
 80011b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80011c0:	0800a9ec 	.word	0x0800a9ec
  ldr r2, =_sbss
 80011c4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80011c8:	200015bc 	.word	0x200015bc

080011cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_2_IRQHandler>

080011ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f939 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f80e 	bl	8001200 <HAL_InitTick>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	e001      	b.n	80011f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f0:	f7ff fbbe 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f4:	79fb      	ldrb	r3, [r7, #7]

}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_InitTick+0x68>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d022      	beq.n	800125a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_InitTick+0x6c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_InitTick+0x68>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001220:	fbb1 f3f3 	udiv	r3, r1, r3
 8001224:	fbb2 f3f3 	udiv	r3, r2, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f944 	bl	80014b6 <HAL_SYSTICK_Config>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10f      	bne.n	8001254 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	d809      	bhi.n	800124e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123a:	2200      	movs	r2, #0
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	f04f 30ff 	mov.w	r0, #4294967295
 8001242:	f000 f910 	bl	8001466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_InitTick+0x70>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e007      	b.n	800125e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e004      	b.n	800125e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e001      	b.n	800125e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000008 	.word	0x20000008
 800126c:	20000000 	.word	0x20000000
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x1c>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x20>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4413      	add	r3, r2
 8001282:	4a03      	ldr	r2, [pc, #12]	; (8001290 <HAL_IncTick+0x1c>)
 8001284:	6013      	str	r3, [r2, #0]
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	20000624 	.word	0x20000624
 8001294:	20000008 	.word	0x20000008

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000624 	.word	0x20000624

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff40 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff90 	bl	80013a4 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5f 	bl	8001350 <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff33 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa4 	bl	800140c <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014de:	e15a      	b.n	8001796 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 814c 	beq.w	8001790 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d00b      	beq.n	8001518 <HAL_GPIO_Init+0x48>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800150c:	2b11      	cmp	r3, #17
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b12      	cmp	r3, #18
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 0201 	and.w	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0xea>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d123      	bne.n	8001602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3208      	adds	r2, #8
 80015c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	6939      	ldr	r1, [r7, #16]
 80015fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	2203      	movs	r2, #3
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0203 	and.w	r2, r3, #3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 80a6 	beq.w	8001790 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001644:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <HAL_GPIO_Init+0x2e4>)
 8001646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001648:	4a5a      	ldr	r2, [pc, #360]	; (80017b4 <HAL_GPIO_Init+0x2e4>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6613      	str	r3, [r2, #96]	; 0x60
 8001650:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <HAL_GPIO_Init+0x2e4>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165c:	4a56      	ldr	r2, [pc, #344]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001686:	d01f      	beq.n	80016c8 <HAL_GPIO_Init+0x1f8>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a4c      	ldr	r2, [pc, #304]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d019      	beq.n	80016c4 <HAL_GPIO_Init+0x1f4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a4b      	ldr	r2, [pc, #300]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d013      	beq.n	80016c0 <HAL_GPIO_Init+0x1f0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <HAL_GPIO_Init+0x2f4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d00d      	beq.n	80016bc <HAL_GPIO_Init+0x1ec>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a49      	ldr	r2, [pc, #292]	; (80017c8 <HAL_GPIO_Init+0x2f8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d007      	beq.n	80016b8 <HAL_GPIO_Init+0x1e8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a48      	ldr	r2, [pc, #288]	; (80017cc <HAL_GPIO_Init+0x2fc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d101      	bne.n	80016b4 <HAL_GPIO_Init+0x1e4>
 80016b0:	2305      	movs	r3, #5
 80016b2:	e00a      	b.n	80016ca <HAL_GPIO_Init+0x1fa>
 80016b4:	2306      	movs	r3, #6
 80016b6:	e008      	b.n	80016ca <HAL_GPIO_Init+0x1fa>
 80016b8:	2304      	movs	r3, #4
 80016ba:	e006      	b.n	80016ca <HAL_GPIO_Init+0x1fa>
 80016bc:	2303      	movs	r3, #3
 80016be:	e004      	b.n	80016ca <HAL_GPIO_Init+0x1fa>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x1fa>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_GPIO_Init+0x1fa>
 80016c8:	2300      	movs	r3, #0
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016da:	4937      	ldr	r1, [pc, #220]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016e8:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_GPIO_Init+0x300>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170c:	4a30      	ldr	r2, [pc, #192]	; (80017d0 <HAL_GPIO_Init+0x300>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001712:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_GPIO_Init+0x300>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001736:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <HAL_GPIO_Init+0x300>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_GPIO_Init+0x300>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001760:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <HAL_GPIO_Init+0x300>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_GPIO_Init+0x300>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800178a:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_GPIO_Init+0x300>)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f47f ae9d 	bne.w	80014e0 <HAL_GPIO_Init+0x10>
  }
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000c00 	.word	0x48000c00
 80017c8:	48001000 	.word	0x48001000
 80017cc:	48001400 	.word	0x48001400
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80017e2:	e0bd      	b.n	8001960 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80017e4:	2201      	movs	r2, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80b0 	beq.w	800195a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80017fa:	4a60      	ldr	r2, [pc, #384]	; (800197c <HAL_GPIO_DeInit+0x1a8>)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001822:	d01f      	beq.n	8001864 <HAL_GPIO_DeInit+0x90>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a56      	ldr	r2, [pc, #344]	; (8001980 <HAL_GPIO_DeInit+0x1ac>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d019      	beq.n	8001860 <HAL_GPIO_DeInit+0x8c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a55      	ldr	r2, [pc, #340]	; (8001984 <HAL_GPIO_DeInit+0x1b0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_DeInit+0x88>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_GPIO_DeInit+0x1b4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_DeInit+0x84>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a53      	ldr	r2, [pc, #332]	; (800198c <HAL_GPIO_DeInit+0x1b8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_DeInit+0x80>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_GPIO_DeInit+0x1bc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_DeInit+0x7c>
 800184c:	2305      	movs	r3, #5
 800184e:	e00a      	b.n	8001866 <HAL_GPIO_DeInit+0x92>
 8001850:	2306      	movs	r3, #6
 8001852:	e008      	b.n	8001866 <HAL_GPIO_DeInit+0x92>
 8001854:	2304      	movs	r3, #4
 8001856:	e006      	b.n	8001866 <HAL_GPIO_DeInit+0x92>
 8001858:	2303      	movs	r3, #3
 800185a:	e004      	b.n	8001866 <HAL_GPIO_DeInit+0x92>
 800185c:	2302      	movs	r3, #2
 800185e:	e002      	b.n	8001866 <HAL_GPIO_DeInit+0x92>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_DeInit+0x92>
 8001864:	2300      	movs	r3, #0
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	429a      	cmp	r2, r3
 8001874:	d132      	bne.n	80018dc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_GPIO_DeInit+0x1c0>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	4945      	ldr	r1, [pc, #276]	; (8001994 <HAL_GPIO_DeInit+0x1c0>)
 8001880:	4013      	ands	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001884:	4b43      	ldr	r3, [pc, #268]	; (8001994 <HAL_GPIO_DeInit+0x1c0>)
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	4941      	ldr	r1, [pc, #260]	; (8001994 <HAL_GPIO_DeInit+0x1c0>)
 800188e:	4013      	ands	r3, r2
 8001890:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001892:	4b40      	ldr	r3, [pc, #256]	; (8001994 <HAL_GPIO_DeInit+0x1c0>)
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	43db      	mvns	r3, r3
 800189a:	493e      	ldr	r1, [pc, #248]	; (8001994 <HAL_GPIO_DeInit+0x1c0>)
 800189c:	4013      	ands	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80018a0:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <HAL_GPIO_DeInit+0x1c0>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	493a      	ldr	r1, [pc, #232]	; (8001994 <HAL_GPIO_DeInit+0x1c0>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80018be:	4a2f      	ldr	r2, [pc, #188]	; (800197c <HAL_GPIO_DeInit+0x1a8>)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43da      	mvns	r2, r3
 80018ce:	482b      	ldr	r0, [pc, #172]	; (800197c <HAL_GPIO_DeInit+0x1a8>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	400a      	ands	r2, r1
 80018d6:	3302      	adds	r3, #2
 80018d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2103      	movs	r1, #3
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	08d2      	lsrs	r2, r2, #3
 8001910:	4019      	ands	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2103      	movs	r1, #3
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	401a      	ands	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	2101      	movs	r1, #1
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	401a      	ands	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2103      	movs	r1, #3
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	401a      	ands	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	609a      	str	r2, [r3, #8]
    }

    position++;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	f47f af3b 	bne.w	80017e4 <HAL_GPIO_DeInit+0x10>
  }
}
 800196e:	bf00      	nop
 8001970:	371c      	adds	r7, #28
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40010000 	.word	0x40010000
 8001980:	48000400 	.word	0x48000400
 8001984:	48000800 	.word	0x48000800
 8001988:	48000c00 	.word	0x48000c00
 800198c:	48001000 	.word	0x48001000
 8001990:	48001400 	.word	0x48001400
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e001      	b.n	80019ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	b08b      	sub	sp, #44	; 0x2c
 80019fc:	af06      	add	r7, sp, #24
 80019fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0d7      	b.n	8001bba <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f008 fc70 	bl	800a304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2203      	movs	r2, #3
 8001a28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 fe26 	bl	8006682 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e04c      	b.n	8001ad6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	b298      	uxth	r0, r3
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	3336      	adds	r3, #54	; 0x36
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3303      	adds	r3, #3
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3338      	adds	r3, #56	; 0x38
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	333c      	adds	r3, #60	; 0x3c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3340      	adds	r3, #64	; 0x40
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d3ad      	bcc.n	8001a3c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e044      	b.n	8001b70 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3b5      	bcc.n	8001ae6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	687e      	ldr	r6, [r7, #4]
 8001b82:	466d      	mov	r5, sp
 8001b84:	f106 0410 	add.w	r4, r6, #16
 8001b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	602b      	str	r3, [r5, #0]
 8001b90:	1d33      	adds	r3, r6, #4
 8001b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f004 fd8f 	bl	80066b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f001 fa5e 	bl	8003074 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bc2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_PCD_Start+0x16>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e012      	b.n	8001bfe <HAL_PCD_Start+0x3c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f004 fd35 	bl	8006654 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f006 fd21 	bl	8008636 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f006 fd26 	bl	8008664 <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c22:	d102      	bne.n	8001c2a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fb5b 	bl	80022e0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f006 fd18 	bl	8008664 <USB_ReadInterrupts>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3e:	d112      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c52:	b292      	uxth	r2, r2
 8001c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f008 fbce 	bl	800a3fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c5e:	2100      	movs	r1, #0
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f91e 	bl	8001ea2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f006 fcfa 	bl	8008664 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c7a:	d10b      	bne.n	8001c94 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f006 fce3 	bl	8008664 <USB_ReadInterrupts>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cbc:	b292      	uxth	r2, r2
 8001cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f006 fccc 	bl	8008664 <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd6:	d133      	bne.n	8001d40 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	b292      	uxth	r2, r2
 8001cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0208 	bic.w	r2, r2, #8
 8001d02:	b292      	uxth	r2, r2
 8001d04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f008 fd61 	bl	800a7e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f008 fba2 	bl	800a46c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f006 fc8d 	bl	8008664 <USB_ReadInterrupts>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d54:	d126      	bne.n	8001da4 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0208 	orr.w	r2, r2, #8
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d80:	b292      	uxth	r2, r2
 8001d82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0204 	orr.w	r2, r2, #4
 8001d98:	b292      	uxth	r2, r2
 8001d9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f008 fb4a 	bl	800a438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f006 fc5b 	bl	8008664 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	2b80      	cmp	r3, #128	; 0x80
 8001db6:	d13f      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d12b      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0204 	orr.w	r2, r2, #4
 8001dec:	b292      	uxth	r2, r2
 8001dee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0208 	orr.w	r2, r2, #8
 8001e04:	b292      	uxth	r2, r2
 8001e06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e28:	2101      	movs	r1, #1
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f008 fcda 	bl	800a7e4 <HAL_PCDEx_LPM_Callback>
 8001e30:	e002      	b.n	8001e38 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f008 fb00 	bl	800a438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f006 fc11 	bl	8008664 <USB_ReadInterrupts>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4c:	d10e      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e60:	b292      	uxth	r2, r2
 8001e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f008 fab9 	bl	800a3de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f006 fbf7 	bl	8008664 <USB_ReadInterrupts>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e80:	d10b      	bne.n	8001e9a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e94:	b292      	uxth	r2, r2
 8001e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_PCD_SetAddress+0x1a>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e013      	b.n	8001ee4 <HAL_PCD_SetAddress+0x42>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	78fa      	ldrb	r2, [r7, #3]
 8001ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f006 fb9a 	bl	800860e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	4608      	mov	r0, r1
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	70fb      	strb	r3, [r7, #3]
 8001efe:	460b      	mov	r3, r1
 8001f00:	803b      	strh	r3, [r7, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da0e      	bge.n	8001f30 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	705a      	strb	r2, [r3, #1]
 8001f2e:	e00e      	b.n	8001f4e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 0207 	and.w	r2, r3, #7
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f5a:	883a      	ldrh	r2, [r7, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	78ba      	ldrb	r2, [r7, #2]
 8001f64:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	785b      	ldrb	r3, [r3, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f78:	78bb      	ldrb	r3, [r7, #2]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d102      	bne.n	8001f84 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_PCD_EP_Open+0xa6>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e00e      	b.n	8001fb0 <HAL_PCD_EP_Open+0xc4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f004 fbab 	bl	80066fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001fae:	7afb      	ldrb	r3, [r7, #11]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	da0e      	bge.n	8001fea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
 8001fe8:	e00e      	b.n	8002008 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	f003 0207 	and.w	r2, r3, #7
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	b2da      	uxtb	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_PCD_EP_Close+0x6a>
 800201e:	2302      	movs	r3, #2
 8002020:	e00e      	b.n	8002040 <HAL_PCD_EP_Close+0x88>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fed1 	bl	8006dd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	460b      	mov	r3, r1
 8002056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002058:	7afb      	ldrb	r3, [r7, #11]
 800205a:	f003 0207 	and.w	r2, r3, #7
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2200      	movs	r2, #0
 8002086:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	b2da      	uxtb	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6979      	ldr	r1, [r7, #20]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f005 f884 	bl	80071b2 <USB_EPStartXfer>
 80020aa:	e005      	b.n	80020b8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6979      	ldr	r1, [r7, #20]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f005 f87d 	bl	80071b2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 0207 	and.w	r2, r3, #7
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80020e4:	681b      	ldr	r3, [r3, #0]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	460b      	mov	r3, r1
 8002100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002102:	7afb      	ldrb	r3, [r7, #11]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2201      	movs	r2, #1
 800213c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	b2da      	uxtb	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	2b00      	cmp	r3, #0
 8002152:	d106      	bne.n	8002162 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6979      	ldr	r1, [r7, #20]
 800215a:	4618      	mov	r0, r3
 800215c:	f005 f829 	bl	80071b2 <USB_EPStartXfer>
 8002160:	e005      	b.n	800216e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	4618      	mov	r0, r3
 800216a:	f005 f822 	bl	80071b2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 0207 	and.w	r2, r3, #7
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	429a      	cmp	r2, r3
 8002190:	d901      	bls.n	8002196 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e04c      	b.n	8002230 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da0e      	bge.n	80021bc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	705a      	strb	r2, [r3, #1]
 80021ba:	e00c      	b.n	80021d6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_PCD_EP_SetStall+0x7e>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e01c      	b.n	8002230 <HAL_PCD_EP_SetStall+0xb8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	4618      	mov	r0, r3
 8002206:	f006 f903 	bl	8008410 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	2b00      	cmp	r3, #0
 8002212:	d108      	bne.n	8002226 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f006 fa2f 	bl	8008684 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	f003 020f 	and.w	r2, r3, #15
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	429a      	cmp	r2, r3
 8002250:	d901      	bls.n	8002256 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e040      	b.n	80022d8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225a:	2b00      	cmp	r3, #0
 800225c:	da0e      	bge.n	800227c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	705a      	strb	r2, [r3, #1]
 800227a:	e00e      	b.n	800229a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	f003 0207 	and.w	r2, r3, #7
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_PCD_EP_ClrStall+0x82>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e00e      	b.n	80022d8 <HAL_PCD_EP_ClrStall+0xa0>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f006 f8f2 	bl	80084b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08e      	sub	sp, #56	; 0x38
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022e8:	e2d1      	b.n	800288e <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002300:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 8152 	bne.w	80025ae <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800230a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d150      	bne.n	80023b6 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002324:	81fb      	strh	r3, [r7, #14]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002334:	b29b      	uxth	r3, r3
 8002336:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3328      	adds	r3, #40	; 0x28
 800233c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	4413      	add	r3, r2
 8002358:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	441a      	add	r2, r3
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002374:	2100      	movs	r1, #0
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f008 f817 	bl	800a3aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8282 	beq.w	800288e <PCD_EP_ISR_Handler+0x5ae>
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 827d 	bne.w	800288e <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b292      	uxth	r2, r2
 80023a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023b4:	e26b      	b.n	800288e <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d032      	beq.n	8002436 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d8:	b29b      	uxth	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800240a:	b29b      	uxth	r3, r3
 800240c:	f006 f987 	bl	800871e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29a      	uxth	r2, r3
 8002418:	f640 738f 	movw	r3, #3983	; 0xf8f
 800241c:	4013      	ands	r3, r2
 800241e:	823b      	strh	r3, [r7, #16]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	8a3a      	ldrh	r2, [r7, #16]
 8002426:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800242a:	b292      	uxth	r2, r2
 800242c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f007 ff8e 	bl	800a350 <HAL_PCD_SetupStageCallback>
 8002434:	e22b      	b.n	800288e <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002436:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800243a:	2b00      	cmp	r3, #0
 800243c:	f280 8227 	bge.w	800288e <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29a      	uxth	r2, r3
 8002448:	f640 738f 	movw	r3, #3983	; 0xf8f
 800244c:	4013      	ands	r3, r2
 800244e:	83bb      	strh	r3, [r7, #28]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	8bba      	ldrh	r2, [r7, #28]
 8002456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800245a:	b292      	uxth	r2, r2
 800245c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002466:	b29b      	uxth	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	4413      	add	r3, r2
 8002478:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d019      	beq.n	80024c2 <PCD_EP_ISR_Handler+0x1e2>
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	6959      	ldr	r1, [r3, #20]
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f006 f939 	bl	800871e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	441a      	add	r2, r3
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024ba:	2100      	movs	r1, #0
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f007 ff59 	bl	800a374 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d112      	bne.n	8002510 <PCD_EP_ISR_Handler+0x230>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	801a      	strh	r2, [r3, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002508:	b29a      	uxth	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	e02f      	b.n	8002570 <PCD_EP_ISR_Handler+0x290>
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b3e      	cmp	r3, #62	; 0x3e
 8002516:	d813      	bhi.n	8002540 <PCD_EP_ISR_Handler+0x260>
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <PCD_EP_ISR_Handler+0x252>
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	3301      	adds	r3, #1
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	b29b      	uxth	r3, r3
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	b29a      	uxth	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	801a      	strh	r2, [r3, #0]
 800253e:	e017      	b.n	8002570 <PCD_EP_ISR_Handler+0x290>
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <PCD_EP_ISR_Handler+0x27a>
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	3b01      	subs	r3, #1
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	b29b      	uxth	r3, r3
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	b29b      	uxth	r3, r3
 8002562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800256a:	b29a      	uxth	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002580:	827b      	strh	r3, [r7, #18]
 8002582:	8a7b      	ldrh	r3, [r7, #18]
 8002584:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002588:	827b      	strh	r3, [r7, #18]
 800258a:	8a7b      	ldrh	r3, [r7, #18]
 800258c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002590:	827b      	strh	r3, [r7, #18]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	8a7b      	ldrh	r3, [r7, #18]
 8002598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800259c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	8013      	strh	r3, [r2, #0]
 80025ac:	e16f      	b.n	800288e <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f280 80e4 	bge.w	8002792 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025e0:	4013      	ands	r3, r2
 80025e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025f8:	b292      	uxth	r2, r2
 80025fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025fc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	7b1b      	ldrb	r3, [r3, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d120      	bne.n	800265c <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	4413      	add	r3, r2
 8002634:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800263e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002640:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8083 	beq.w	800274e <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	6959      	ldr	r1, [r3, #20]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	88da      	ldrh	r2, [r3, #6]
 8002654:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002656:	f006 f862 	bl	800871e <USB_ReadPMA>
 800265a:	e078      	b.n	800274e <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d108      	bne.n	8002676 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002664:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002666:	461a      	mov	r2, r3
 8002668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f91d 	bl	80028aa <HAL_PCD_EP_DB_Receive>
 8002670:	4603      	mov	r3, r0
 8002672:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002674:	e06b      	b.n	800274e <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800268c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002690:	847b      	strh	r3, [r7, #34]	; 0x22
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	441a      	add	r2, r3
 80026a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01f      	beq.n	8002710 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d028      	beq.n	800274e <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	6959      	ldr	r1, [r3, #20]
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	891a      	ldrh	r2, [r3, #8]
 8002708:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800270a:	f006 f808 	bl	800871e <USB_ReadPMA>
 800270e:	e01e      	b.n	800274e <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002718:	b29b      	uxth	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	4413      	add	r3, r2
 800272a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002734:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002736:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	6959      	ldr	r1, [r3, #20]
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	895a      	ldrh	r2, [r3, #10]
 8002748:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800274a:	f005 ffe8 	bl	800871e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002754:	441a      	add	r2, r3
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002760:	441a      	add	r2, r3
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <PCD_EP_ISR_Handler+0x498>
 800276e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	429a      	cmp	r2, r3
 8002776:	d206      	bcs.n	8002786 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f007 fdf8 	bl	800a374 <HAL_PCD_DataOutStageCallback>
 8002784:	e005      	b.n	8002792 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800278c:	4618      	mov	r0, r3
 800278e:	f004 fd10 	bl	80071b2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002792:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	d078      	beq.n	800288e <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 800279c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	843b      	strh	r3, [r7, #32]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	8c3b      	ldrh	r3, [r7, #32]
 80027dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	78db      	ldrb	r3, [r3, #3]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d108      	bne.n	8002802 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d144      	bne.n	8002882 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d13f      	bne.n	8002882 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280a:	b29b      	uxth	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	4413      	add	r3, r2
 800281c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002826:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	8bfb      	ldrh	r3, [r7, #30]
 800282e:	429a      	cmp	r2, r3
 8002830:	d906      	bls.n	8002840 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	8bfb      	ldrh	r3, [r7, #30]
 8002838:	1ad2      	subs	r2, r2, r3
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	619a      	str	r2, [r3, #24]
 800283e:	e002      	b.n	8002846 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	2200      	movs	r2, #0
 8002844:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f007 fda8 	bl	800a3aa <HAL_PCD_DataInStageCallback>
 800285a:	e018      	b.n	800288e <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	8bfb      	ldrh	r3, [r7, #30]
 8002862:	441a      	add	r2, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	8bfb      	ldrh	r3, [r7, #30]
 800286e:	441a      	add	r2, r3
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fc99 	bl	80071b2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002880:	e005      	b.n	800288e <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002882:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002884:	461a      	mov	r2, r3
 8002886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f917 	bl	8002abc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002896:	b29b      	uxth	r3, r3
 8002898:	b21b      	sxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	f6ff ad25 	blt.w	80022ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3738      	adds	r7, #56	; 0x38
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b088      	sub	sp, #32
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	4613      	mov	r3, r2
 80028b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d07c      	beq.n	80029bc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4413      	add	r3, r2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	8b7b      	ldrh	r3, [r7, #26]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d306      	bcc.n	8002900 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	8b7b      	ldrh	r3, [r7, #26]
 80028f8:	1ad2      	subs	r2, r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	619a      	str	r2, [r3, #24]
 80028fe:	e002      	b.n	8002906 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2200      	movs	r2, #0
 8002904:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d123      	bne.n	8002956 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002928:	833b      	strh	r3, [r7, #24]
 800292a:	8b3b      	ldrh	r3, [r7, #24]
 800292c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002930:	833b      	strh	r3, [r7, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	441a      	add	r2, r3
 8002940:	8b3b      	ldrh	r3, [r7, #24]
 8002942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800294a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002952:	b29b      	uxth	r3, r3
 8002954:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01f      	beq.n	80029a0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	82fb      	strh	r3, [r7, #22]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	8afb      	ldrh	r3, [r7, #22]
 800298c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800299c:	b29b      	uxth	r3, r3
 800299e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029a0:	8b7b      	ldrh	r3, [r7, #26]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8085 	beq.w	8002ab2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6959      	ldr	r1, [r3, #20]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	891a      	ldrh	r2, [r3, #8]
 80029b4:	8b7b      	ldrh	r3, [r7, #26]
 80029b6:	f005 feb2 	bl	800871e <USB_ReadPMA>
 80029ba:	e07a      	b.n	8002ab2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	8b7b      	ldrh	r3, [r7, #26]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d306      	bcc.n	80029fa <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	8b7b      	ldrh	r3, [r7, #26]
 80029f2:	1ad2      	subs	r2, r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	619a      	str	r2, [r3, #24]
 80029f8:	e002      	b.n	8002a00 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d123      	bne.n	8002a50 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	83fb      	strh	r3, [r7, #30]
 8002a24:	8bfb      	ldrh	r3, [r7, #30]
 8002a26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a2a:	83fb      	strh	r3, [r7, #30]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	8bfb      	ldrh	r3, [r7, #30]
 8002a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d11f      	bne.n	8002a9a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	83bb      	strh	r3, [r7, #28]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	441a      	add	r2, r3
 8002a84:	8bbb      	ldrh	r3, [r7, #28]
 8002a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a9a:	8b7b      	ldrh	r3, [r7, #26]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	6959      	ldr	r1, [r3, #20]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	895a      	ldrh	r2, [r3, #10]
 8002aac:	8b7b      	ldrh	r3, [r7, #26]
 8002aae:	f005 fe36 	bl	800871e <USB_ReadPMA>
    }
  }

  return count;
 8002ab2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b092      	sub	sp, #72	; 0x48
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8130 	beq.w	8002d36 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d906      	bls.n	8002b14 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b0c:	1ad2      	subs	r2, r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	619a      	str	r2, [r3, #24]
 8002b12:	e002      	b.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d12c      	bne.n	8002b7c <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	4619      	mov	r1, r3
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f007 fc3e 	bl	800a3aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 822d 	beq.w	8002f94 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	827b      	strh	r3, [r7, #18]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	441a      	add	r2, r3
 8002b64:	8a7b      	ldrh	r3, [r7, #18]
 8002b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	8013      	strh	r3, [r2, #0]
 8002b7a:	e20b      	b.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01f      	beq.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	441a      	add	r2, r3
 8002bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	f040 81e1 	bne.w	8002f94 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bd8:	441a      	add	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002be4:	441a      	add	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6a1a      	ldr	r2, [r3, #32]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d309      	bcc.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6a1a      	ldr	r2, [r3, #32]
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	1ad2      	subs	r2, r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	621a      	str	r2, [r3, #32]
 8002c08:	e014      	b.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002c12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c14:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c1e:	e009      	b.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2200      	movs	r2, #0
 8002c32:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d155      	bne.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4413      	add	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	00da      	lsls	r2, r3, #3
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d112      	bne.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	801a      	strh	r2, [r3, #0]
 8002c8e:	e047      	b.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x264>
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	2b3e      	cmp	r3, #62	; 0x3e
 8002c94:	d811      	bhi.n	8002cba <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	3301      	adds	r3, #1
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	029b      	lsls	r3, r3, #10
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	801a      	strh	r2, [r3, #0]
 8002cb8:	e032      	b.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x264>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x214>
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	029b      	lsls	r3, r3, #10
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	801a      	strh	r2, [r3, #0]
 8002ce6:	e01b      	b.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x264>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	785b      	ldrb	r3, [r3, #1]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d117      	bne.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x264>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	623b      	str	r3, [r7, #32]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	4413      	add	r3, r2
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	00da      	lsls	r2, r3, #3
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	4413      	add	r3, r2
 8002d12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	6959      	ldr	r1, [r3, #20]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	891a      	ldrh	r2, [r3, #8]
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f005 fcb4 	bl	800869c <USB_WritePMA>
 8002d34:	e12e      	b.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d5a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d306      	bcc.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d6c:	1ad2      	subs	r2, r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	619a      	str	r2, [r3, #24]
 8002d72:	e002      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2200      	movs	r2, #0
 8002d78:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d12c      	bne.n	8002ddc <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	4619      	mov	r1, r3
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f007 fb0e 	bl	800a3aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f040 80fd 	bne.w	8002f94 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	441a      	add	r2, r3
 8002dc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	8013      	strh	r3, [r2, #0]
 8002dda:	e0db      	b.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11f      	bne.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e00:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	f040 80b1 	bne.w	8002f94 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e38:	441a      	add	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e44:	441a      	add	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d309      	bcc.n	8002e6a <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	1ad2      	subs	r2, r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	621a      	str	r2, [r3, #32]
 8002e68:	e014      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002e72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e74:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e7e:	e009      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	785b      	ldrb	r3, [r3, #1]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d155      	bne.n	8002f4e <HAL_PCD_EP_DB_Transmit+0x492>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb6:	4413      	add	r3, r2
 8002eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	00da      	lsls	r2, r3, #3
 8002ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d112      	bne.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ede:	801a      	strh	r2, [r3, #0]
 8002ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef2:	801a      	strh	r2, [r3, #0]
 8002ef4:	e044      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8002efa:	d811      	bhi.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x464>
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x456>
 8002f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0e:	3301      	adds	r3, #1
 8002f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	029b      	lsls	r3, r3, #10
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	e02f      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f32:	3b01      	subs	r3, #1
 8002f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	029b      	lsls	r3, r3, #10
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4a:	801a      	strh	r2, [r3, #0]
 8002f4c:	e018      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	785b      	ldrb	r3, [r3, #1]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d114      	bne.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f64:	4413      	add	r3, r2
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	00da      	lsls	r2, r3, #3
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f70:	4413      	add	r3, r2
 8002f72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6959      	ldr	r1, [r3, #20]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	895a      	ldrh	r2, [r3, #10]
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f005 fb84 	bl	800869c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fae:	823b      	strh	r3, [r7, #16]
 8002fb0:	8a3b      	ldrh	r3, [r7, #16]
 8002fb2:	f083 0310 	eor.w	r3, r3, #16
 8002fb6:	823b      	strh	r3, [r7, #16]
 8002fb8:	8a3b      	ldrh	r3, [r7, #16]
 8002fba:	f083 0320 	eor.w	r3, r3, #32
 8002fbe:	823b      	strh	r3, [r7, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	8a3b      	ldrh	r3, [r7, #16]
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3748      	adds	r7, #72	; 0x48
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b087      	sub	sp, #28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	817b      	strh	r3, [r7, #10]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003000:	897b      	ldrh	r3, [r7, #10]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300c:	897b      	ldrh	r3, [r7, #10]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	e009      	b.n	8003038 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003024:	897a      	ldrh	r2, [r7, #10]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4413      	add	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003038:	893b      	ldrh	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d107      	bne.n	800304e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2200      	movs	r2, #0
 8003042:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	b29a      	uxth	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	80da      	strh	r2, [r3, #6]
 800304c:	e00b      	b.n	8003066 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2201      	movs	r2, #1
 8003052:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	b29a      	uxth	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0c1b      	lsrs	r3, r3, #16
 8003060:	b29a      	uxth	r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003098:	b29b      	uxth	r3, r3
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f043 0302 	orr.w	r3, r3, #2
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d141      	bne.n	800315a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030d6:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e2:	d131      	bne.n	8003148 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030e4:	4b47      	ldr	r3, [pc, #284]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ea:	4a46      	ldr	r2, [pc, #280]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030f4:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030fc:	4a41      	ldr	r2, [pc, #260]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003102:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003104:	4b40      	ldr	r3, [pc, #256]	; (8003208 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2232      	movs	r2, #50	; 0x32
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	4a3f      	ldr	r2, [pc, #252]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	0c9b      	lsrs	r3, r3, #18
 8003116:	3301      	adds	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800311a:	e002      	b.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3b01      	subs	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003122:	4b38      	ldr	r3, [pc, #224]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312e:	d102      	bne.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f2      	bne.n	800311c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d158      	bne.n	80031f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e057      	b.n	80031f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003148:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800314e:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003154:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003158:	e04d      	b.n	80031f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003160:	d141      	bne.n	80031e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003162:	4b28      	ldr	r3, [pc, #160]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316e:	d131      	bne.n	80031d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003176:	4a23      	ldr	r2, [pc, #140]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003180:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003188:	4a1e      	ldr	r2, [pc, #120]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800318e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2232      	movs	r2, #50	; 0x32
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	4a1c      	ldr	r2, [pc, #112]	; (800320c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	3301      	adds	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031a6:	e002      	b.n	80031ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ba:	d102      	bne.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f2      	bne.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d112      	bne.n	80031f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e011      	b.n	80031f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031e4:	e007      	b.n	80031f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031ee:	4a05      	ldr	r2, [pc, #20]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40007000 	.word	0x40007000
 8003208:	20000000 	.word	0x20000000
 800320c:	431bde83 	.word	0x431bde83

08003210 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800321a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800321e:	6093      	str	r3, [r2, #8]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40007000 	.word	0x40007000

08003230 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003236:	f7fe f82f 	bl	8001298 <HAL_GetTick>
 800323a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800323c:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a38      	ldr	r2, [pc, #224]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324a:	f7fe f825 	bl	8001298 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e05f      	b.n	800331c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800325c:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 8003268:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a2d      	ldr	r2, [pc, #180]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 800326e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003272:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003274:	f7fe f810 	bl	8001298 <HAL_GetTick>
 8003278:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 800327a:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 800327c:	2201      	movs	r2, #1
 800327e:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003282:	f7fe f809 	bl	8001298 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e041      	b.n	800331c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003298:	4b22      	ldr	r3, [pc, #136]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d1ee      	bne.n	8003282 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80032a4:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_RCC_DeInit+0xf8>)
 80032a6:	4a21      	ldr	r2, [pc, #132]	; (800332c <HAL_RCC_DeInit+0xfc>)
 80032a8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032aa:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_RCC_DeInit+0x100>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd ffa6 	bl	8001200 <HAL_InitTick>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e02e      	b.n	800331c <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80032be:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 80032c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032c4:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80032c6:	4b17      	ldr	r3, [pc, #92]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 80032c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032cc:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032ce:	f7fd ffe3 	bl	8001298 <HAL_GetTick>
 80032d2:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fd ffdf 	bl	8001298 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e019      	b.n	800331c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 80032f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032fa:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 800330c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <HAL_RCC_DeInit+0xf4>)
 8003312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003316:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000
 8003328:	20000000 	.word	0x20000000
 800332c:	00f42400 	.word	0x00f42400
 8003330:	20000004 	.word	0x20000004

08003334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e308      	b.n	8003958 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d075      	beq.n	800343e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003352:	4ba3      	ldr	r3, [pc, #652]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800335c:	4ba0      	ldr	r3, [pc, #640]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d102      	bne.n	8003372 <HAL_RCC_OscConfig+0x3e>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d002      	beq.n	8003378 <HAL_RCC_OscConfig+0x44>
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d10b      	bne.n	8003390 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	4b99      	ldr	r3, [pc, #612]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d05b      	beq.n	800343c <HAL_RCC_OscConfig+0x108>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d157      	bne.n	800343c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e2e3      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d106      	bne.n	80033a8 <HAL_RCC_OscConfig+0x74>
 800339a:	4b91      	ldr	r3, [pc, #580]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a90      	ldr	r2, [pc, #576]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e01d      	b.n	80033e4 <HAL_RCC_OscConfig+0xb0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x98>
 80033b2:	4b8b      	ldr	r3, [pc, #556]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a8a      	ldr	r2, [pc, #552]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a87      	ldr	r2, [pc, #540]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0xb0>
 80033cc:	4b84      	ldr	r3, [pc, #528]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a83      	ldr	r2, [pc, #524]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a80      	ldr	r2, [pc, #512]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd ff54 	bl	8001298 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fd ff50 	bl	8001298 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e2a8      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003406:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0xc0>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd ff40 	bl	8001298 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd ff3c 	bl	8001298 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e294      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800342e:	4b6c      	ldr	r3, [pc, #432]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0xe8>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d075      	beq.n	8003536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003454:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b0c      	cmp	r3, #12
 8003462:	d102      	bne.n	800346a <HAL_RCC_OscConfig+0x136>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d002      	beq.n	8003470 <HAL_RCC_OscConfig+0x13c>
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d11f      	bne.n	80034b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003470:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_OscConfig+0x154>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e267      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b55      	ldr	r3, [pc, #340]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	4952      	ldr	r1, [pc, #328]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800349c:	4b51      	ldr	r3, [pc, #324]	; (80035e4 <HAL_RCC_OscConfig+0x2b0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd fead 	bl	8001200 <HAL_InitTick>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d043      	beq.n	8003534 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e253      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d023      	beq.n	8003500 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b8:	4b49      	ldr	r3, [pc, #292]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a48      	ldr	r2, [pc, #288]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fee8 	bl	8001298 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034cc:	f7fd fee4 	bl	8001298 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e23c      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034de:	4b40      	ldr	r3, [pc, #256]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ea:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	061b      	lsls	r3, r3, #24
 80034f8:	4939      	ldr	r1, [pc, #228]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
 80034fe:	e01a      	b.n	8003536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a36      	ldr	r2, [pc, #216]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800350a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fd fec4 	bl	8001298 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003514:	f7fd fec0 	bl	8001298 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e218      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003526:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1e0>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d03c      	beq.n	80035bc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01c      	beq.n	8003584 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354a:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003550:	4a23      	ldr	r2, [pc, #140]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355a:	f7fd fe9d 	bl	8001298 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003562:	f7fd fe99 	bl	8001298 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e1f1      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0ef      	beq.n	8003562 <HAL_RCC_OscConfig+0x22e>
 8003582:	e01b      	b.n	80035bc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358a:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003594:	f7fd fe80 	bl	8001298 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359c:	f7fd fe7c 	bl	8001298 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e1d4      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ef      	bne.n	800359c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80ab 	beq.w	8003720 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ce:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_RCC_OscConfig+0x2b4>
 80035da:	2301      	movs	r3, #1
 80035dc:	e005      	b.n	80035ea <HAL_RCC_OscConfig+0x2b6>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	20000004 	.word	0x20000004
 80035e8:	2300      	movs	r3, #0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	4baf      	ldr	r3, [pc, #700]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	4aae      	ldr	r2, [pc, #696]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	; 0x58
 80035fa:	4bac      	ldr	r3, [pc, #688]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360a:	4ba9      	ldr	r3, [pc, #676]	; (80038b0 <HAL_RCC_OscConfig+0x57c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003616:	4ba6      	ldr	r3, [pc, #664]	; (80038b0 <HAL_RCC_OscConfig+0x57c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4aa5      	ldr	r2, [pc, #660]	; (80038b0 <HAL_RCC_OscConfig+0x57c>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fd fe39 	bl	8001298 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fd fe35 	bl	8001298 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e18d      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363c:	4b9c      	ldr	r3, [pc, #624]	; (80038b0 <HAL_RCC_OscConfig+0x57c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d108      	bne.n	8003662 <HAL_RCC_OscConfig+0x32e>
 8003650:	4b96      	ldr	r3, [pc, #600]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a95      	ldr	r2, [pc, #596]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003660:	e024      	b.n	80036ac <HAL_RCC_OscConfig+0x378>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b05      	cmp	r3, #5
 8003668:	d110      	bne.n	800368c <HAL_RCC_OscConfig+0x358>
 800366a:	4b90      	ldr	r3, [pc, #576]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	4a8e      	ldr	r2, [pc, #568]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800367a:	4b8c      	ldr	r3, [pc, #560]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	4a8a      	ldr	r2, [pc, #552]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800368a:	e00f      	b.n	80036ac <HAL_RCC_OscConfig+0x378>
 800368c:	4b87      	ldr	r3, [pc, #540]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	4a86      	ldr	r2, [pc, #536]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800369c:	4b83      	ldr	r3, [pc, #524]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	4a82      	ldr	r2, [pc, #520]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d016      	beq.n	80036e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fd fdf0 	bl	8001298 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fd fdec 	bl	8001298 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e142      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d2:	4b76      	ldr	r3, [pc, #472]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ed      	beq.n	80036bc <HAL_RCC_OscConfig+0x388>
 80036e0:	e015      	b.n	800370e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fd fdd9 	bl	8001298 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fd fdd5 	bl	8001298 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e12b      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003700:	4b6a      	ldr	r3, [pc, #424]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ed      	bne.n	80036ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800370e:	7ffb      	ldrb	r3, [r7, #31]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b65      	ldr	r3, [pc, #404]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	4a64      	ldr	r2, [pc, #400]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d03c      	beq.n	80037a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01c      	beq.n	800376e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003734:	4b5d      	ldr	r3, [pc, #372]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800373a:	4a5c      	ldr	r2, [pc, #368]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd fda8 	bl	8001298 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800374c:	f7fd fda4 	bl	8001298 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e0fc      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800375e:	4b53      	ldr	r3, [pc, #332]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ef      	beq.n	800374c <HAL_RCC_OscConfig+0x418>
 800376c:	e01b      	b.n	80037a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800376e:	4b4f      	ldr	r3, [pc, #316]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003774:	4a4d      	ldr	r2, [pc, #308]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377e:	f7fd fd8b 	bl	8001298 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003786:	f7fd fd87 	bl	8001298 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e0df      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003798:	4b44      	ldr	r3, [pc, #272]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800379a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1ef      	bne.n	8003786 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80d3 	beq.w	8003956 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037b0:	4b3e      	ldr	r3, [pc, #248]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	f000 808d 	beq.w	80038d8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d15a      	bne.n	800387c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a38      	ldr	r2, [pc, #224]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80037cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fd fd61 	bl	8001298 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037da:	f7fd fd5d 	bl	8001298 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0b5      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	4b2f      	ldr	r3, [pc, #188]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <HAL_RCC_OscConfig+0x580>)
 80037fe:	4013      	ands	r3, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6a11      	ldr	r1, [r2, #32]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003808:	3a01      	subs	r2, #1
 800380a:	0112      	lsls	r2, r2, #4
 800380c:	4311      	orrs	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003812:	0212      	lsls	r2, r2, #8
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800381a:	0852      	lsrs	r2, r2, #1
 800381c:	3a01      	subs	r2, #1
 800381e:	0552      	lsls	r2, r2, #21
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003826:	0852      	lsrs	r2, r2, #1
 8003828:	3a01      	subs	r2, #1
 800382a:	0652      	lsls	r2, r2, #25
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003832:	06d2      	lsls	r2, r2, #27
 8003834:	430a      	orrs	r2, r1
 8003836:	491d      	ldr	r1, [pc, #116]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003838:	4313      	orrs	r3, r2
 800383a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1a      	ldr	r2, [pc, #104]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003846:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003848:	4b18      	ldr	r3, [pc, #96]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a17      	ldr	r2, [pc, #92]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800384e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003852:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fd fd20 	bl	8001298 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385c:	f7fd fd1c 	bl	8001298 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e074      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x528>
 800387a:	e06c      	b.n	8003956 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003886:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003888:	4b08      	ldr	r3, [pc, #32]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a07      	ldr	r2, [pc, #28]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 800389a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800389e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd fcf8 	bl	8001298 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038aa:	e00e      	b.n	80038ca <HAL_RCC_OscConfig+0x596>
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40007000 	.word	0x40007000
 80038b4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd fcee 	bl	8001298 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e046      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ca:	4b25      	ldr	r3, [pc, #148]	; (8003960 <HAL_RCC_OscConfig+0x62c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x584>
 80038d6:	e03e      	b.n	8003956 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e039      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038e4:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <HAL_RCC_OscConfig+0x62c>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f003 0203 	and.w	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d12c      	bne.n	8003952 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	3b01      	subs	r3, #1
 8003904:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d123      	bne.n	8003952 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d11b      	bne.n	8003952 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d113      	bne.n	8003952 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d109      	bne.n	8003952 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	3b01      	subs	r3, #1
 800394c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000

08003964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e11e      	b.n	8003bba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b91      	ldr	r3, [pc, #580]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d910      	bls.n	80039ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b8e      	ldr	r3, [pc, #568]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 020f 	bic.w	r2, r3, #15
 8003992:	498c      	ldr	r1, [pc, #560]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b8a      	ldr	r3, [pc, #552]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e106      	b.n	8003bba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d073      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d129      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c0:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0f4      	b.n	8003bba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039d0:	f000 f99e 	bl	8003d10 <RCC_GetSysClockFreqFromPLLSource>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4a7c      	ldr	r2, [pc, #496]	; (8003bcc <HAL_RCC_ClockConfig+0x268>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d93f      	bls.n	8003a5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039de:	4b7a      	ldr	r3, [pc, #488]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d033      	beq.n	8003a5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d12f      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039fe:	4b72      	ldr	r3, [pc, #456]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a06:	4a70      	ldr	r2, [pc, #448]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e024      	b.n	8003a5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1c:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0c6      	b.n	8003bba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a2c:	4b66      	ldr	r3, [pc, #408]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0be      	b.n	8003bba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a3c:	f000 f8ce 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4a61      	ldr	r2, [pc, #388]	; (8003bcc <HAL_RCC_ClockConfig+0x268>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d909      	bls.n	8003a5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a4a:	4b5f      	ldr	r3, [pc, #380]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	4a5d      	ldr	r2, [pc, #372]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a5e:	4b5a      	ldr	r3, [pc, #360]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 0203 	bic.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4957      	ldr	r1, [pc, #348]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a70:	f7fd fc12 	bl	8001298 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7fd fc0e 	bl	8001298 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e095      	b.n	8003bba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	4b4e      	ldr	r3, [pc, #312]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 020c 	and.w	r2, r3, #12
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1eb      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d023      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab8:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a42      	ldr	r2, [pc, #264]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003abe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ac2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ad0:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ad8:	4a3b      	ldr	r2, [pc, #236]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ade:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae0:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4936      	ldr	r1, [pc, #216]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b80      	cmp	r3, #128	; 0x80
 8003af8:	d105      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003afa:	4b33      	ldr	r3, [pc, #204]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b06:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d21d      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b14:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f023 020f 	bic.w	r2, r3, #15
 8003b1c:	4929      	ldr	r1, [pc, #164]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b24:	f7fd fbb8 	bl	8001298 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fd fbb4 	bl	8001298 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e03b      	b.n	8003bba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1ed      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4917      	ldr	r1, [pc, #92]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490f      	ldr	r1, [pc, #60]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b8e:	f000 f825 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003b92:	4601      	mov	r1, r0
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_RCC_ClockConfig+0x264>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	4a0c      	ldr	r2, [pc, #48]	; (8003bd0 <HAL_RCC_ClockConfig+0x26c>)
 8003ba0:	5cd3      	ldrb	r3, [r2, r3]
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	fa21 f303 	lsr.w	r3, r1, r3
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <HAL_RCC_ClockConfig+0x270>)
 8003bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_RCC_ClockConfig+0x274>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fd fb24 	bl	8001200 <HAL_InitTick>
 8003bb8:	4603      	mov	r3, r0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40022000 	.word	0x40022000
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	04c4b400 	.word	0x04c4b400
 8003bd0:	0800a9ac 	.word	0x0800a9ac
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	20000004 	.word	0x20000004

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003be2:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d102      	bne.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bee:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	e047      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d102      	bne.n	8003c06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c00:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	e03e      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c06:	4b23      	ldr	r3, [pc, #140]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d136      	bne.n	8003c80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	3301      	adds	r3, #1
 8003c28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d10c      	bne.n	8003c4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c30:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c3a:	68d2      	ldr	r2, [r2, #12]
 8003c3c:	0a12      	lsrs	r2, r2, #8
 8003c3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	617b      	str	r3, [r7, #20]
      break;
 8003c48:	e00c      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	4a10      	ldr	r2, [pc, #64]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c54:	68d2      	ldr	r2, [r2, #12]
 8003c56:	0a12      	lsrs	r2, r2, #8
 8003c58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c5c:	fb02 f303 	mul.w	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]
      break;
 8003c62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0e5b      	lsrs	r3, r3, #25
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	e001      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c84:	693b      	ldr	r3, [r7, #16]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
 8003c98:	00f42400 	.word	0x00f42400
 8003c9c:	007a1200 	.word	0x007a1200

08003ca0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000000 	.word	0x20000000

08003cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cbc:	f7ff fff0 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4601      	mov	r1, r0
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	0800a9bc 	.word	0x0800a9bc

08003ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ce8:	f7ff ffda 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003cec:	4601      	mov	r1, r0
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0adb      	lsrs	r3, r3, #11
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	0800a9bc 	.word	0x0800a9bc

08003d10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d16:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d10c      	bne.n	8003d4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d34:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	4a14      	ldr	r2, [pc, #80]	; (8003d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d3e:	68d2      	ldr	r2, [r2, #12]
 8003d40:	0a12      	lsrs	r2, r2, #8
 8003d42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	617b      	str	r3, [r7, #20]
    break;
 8003d4c:	e00c      	b.n	8003d68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d4e:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d56:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d58:	68d2      	ldr	r2, [r2, #12]
 8003d5a:	0a12      	lsrs	r2, r2, #8
 8003d5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d60:	fb02 f303 	mul.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
    break;
 8003d66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	0e5b      	lsrs	r3, r3, #25
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	3301      	adds	r3, #1
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d82:	687b      	ldr	r3, [r7, #4]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40021000 	.word	0x40021000
 8003d94:	007a1200 	.word	0x007a1200
 8003d98:	00f42400 	.word	0x00f42400

08003d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003da4:	2300      	movs	r3, #0
 8003da6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003da8:	2300      	movs	r3, #0
 8003daa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8098 	beq.w	8003eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dbe:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10d      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	4b40      	ldr	r3, [pc, #256]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	4a3f      	ldr	r2, [pc, #252]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de2:	2301      	movs	r3, #1
 8003de4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de6:	4b3a      	ldr	r3, [pc, #232]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a39      	ldr	r2, [pc, #228]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003df2:	f7fd fa51 	bl	8001298 <HAL_GetTick>
 8003df6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df8:	e009      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fd fa4d 	bl	8001298 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d902      	bls.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	74fb      	strb	r3, [r7, #19]
        break;
 8003e0c:	e005      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e0e:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ef      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d159      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e20:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01e      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d019      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e3c:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e48:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e58:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e68:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fd fa0d 	bl	8001298 <HAL_GetTick>
 8003e7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e80:	e00b      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd fa09 	bl	8001298 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d902      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	74fb      	strb	r3, [r7, #19]
            break;
 8003e98:	e006      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0ec      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	4903      	ldr	r1, [pc, #12]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	74bb      	strb	r3, [r7, #18]
 8003eca:	e005      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed8:	7c7b      	ldrb	r3, [r7, #17]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d105      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ede:	4ba6      	ldr	r3, [pc, #664]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	4aa5      	ldr	r2, [pc, #660]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ef6:	4ba0      	ldr	r3, [pc, #640]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f023 0203 	bic.w	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	499c      	ldr	r1, [pc, #624]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f18:	4b97      	ldr	r3, [pc, #604]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f023 020c 	bic.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4994      	ldr	r1, [pc, #592]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f3a:	4b8f      	ldr	r3, [pc, #572]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	498b      	ldr	r1, [pc, #556]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f5c:	4b86      	ldr	r3, [pc, #536]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	4983      	ldr	r1, [pc, #524]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f7e:	4b7e      	ldr	r3, [pc, #504]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	497a      	ldr	r1, [pc, #488]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fa0:	4b75      	ldr	r3, [pc, #468]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	4972      	ldr	r1, [pc, #456]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fc2:	4b6d      	ldr	r3, [pc, #436]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	4969      	ldr	r1, [pc, #420]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fe4:	4b64      	ldr	r3, [pc, #400]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4961      	ldr	r1, [pc, #388]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004006:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	4958      	ldr	r1, [pc, #352]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d015      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004028:	4b53      	ldr	r3, [pc, #332]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	4950      	ldr	r1, [pc, #320]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004046:	d105      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004048:	4b4b      	ldr	r3, [pc, #300]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004052:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405c:	2b00      	cmp	r3, #0
 800405e:	d015      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004060:	4b45      	ldr	r3, [pc, #276]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	4942      	ldr	r1, [pc, #264]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407e:	d105      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004080:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a3c      	ldr	r2, [pc, #240]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d015      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004098:	4b37      	ldr	r3, [pc, #220]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4934      	ldr	r1, [pc, #208]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b6:	d105      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b8:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a2e      	ldr	r2, [pc, #184]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d015      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040d0:	4b29      	ldr	r3, [pc, #164]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	4926      	ldr	r1, [pc, #152]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ee:	d105      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f0:	4b21      	ldr	r3, [pc, #132]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a20      	ldr	r2, [pc, #128]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	4918      	ldr	r1, [pc, #96]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004126:	d105      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a12      	ldr	r2, [pc, #72]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004132:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	490a      	ldr	r1, [pc, #40]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800416c:	7cbb      	ldrb	r3, [r7, #18]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000

0800417c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e09d      	b.n	80042ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d108      	bne.n	80041a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419e:	d009      	beq.n	80041b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
 80041a6:	e005      	b.n	80041b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fc fb8c 	bl	80008ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041f4:	d902      	bls.n	80041fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e002      	b.n	8004202 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004200:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800420a:	d007      	beq.n	800421c <HAL_SPI_Init+0xa0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004214:	d002      	beq.n	800421c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	ea42 0103 	orr.w	r1, r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	0c1b      	lsrs	r3, r3, #16
 8004278:	f003 0204 	and.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004298:	ea42 0103 	orr.w	r1, r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e049      	b.n	8004378 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fc fd5b 	bl	8000db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f000 fd95 	bl	8004e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d001      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e04a      	b.n	800442e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a21      	ldr	r2, [pc, #132]	; (800443c <HAL_TIM_Base_Start_IT+0xbc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d018      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x6c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c2:	d013      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x6c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <HAL_TIM_Base_Start_IT+0xc0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00e      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x6c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <HAL_TIM_Base_Start_IT+0xc4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x6c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1a      	ldr	r2, [pc, #104]	; (8004448 <HAL_TIM_Base_Start_IT+0xc8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x6c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a19      	ldr	r2, [pc, #100]	; (800444c <HAL_TIM_Base_Start_IT+0xcc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d115      	bne.n	8004418 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	4b17      	ldr	r3, [pc, #92]	; (8004450 <HAL_TIM_Base_Start_IT+0xd0>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b06      	cmp	r3, #6
 80043fc:	d015      	beq.n	800442a <HAL_TIM_Base_Start_IT+0xaa>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004404:	d011      	beq.n	800442a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004416:	e008      	b.n	800442a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e000      	b.n	800442c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800
 8004448:	40013400 	.word	0x40013400
 800444c:	40014000 	.word	0x40014000
 8004450:	00010007 	.word	0x00010007

08004454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e049      	b.n	80044fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f841 	bl	8004502 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fcd4 	bl	8004e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d109      	bne.n	800453c <HAL_TIM_PWM_Start+0x24>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	bf14      	ite	ne
 8004534:	2301      	movne	r3, #1
 8004536:	2300      	moveq	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	e03c      	b.n	80045b6 <HAL_TIM_PWM_Start+0x9e>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b04      	cmp	r3, #4
 8004540:	d109      	bne.n	8004556 <HAL_TIM_PWM_Start+0x3e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	bf14      	ite	ne
 800454e:	2301      	movne	r3, #1
 8004550:	2300      	moveq	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	e02f      	b.n	80045b6 <HAL_TIM_PWM_Start+0x9e>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d109      	bne.n	8004570 <HAL_TIM_PWM_Start+0x58>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e022      	b.n	80045b6 <HAL_TIM_PWM_Start+0x9e>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b0c      	cmp	r3, #12
 8004574:	d109      	bne.n	800458a <HAL_TIM_PWM_Start+0x72>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2300      	moveq	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	e015      	b.n	80045b6 <HAL_TIM_PWM_Start+0x9e>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b10      	cmp	r3, #16
 800458e:	d109      	bne.n	80045a4 <HAL_TIM_PWM_Start+0x8c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e008      	b.n	80045b6 <HAL_TIM_PWM_Start+0x9e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	bf14      	ite	ne
 80045b0:	2301      	movne	r3, #1
 80045b2:	2300      	moveq	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e097      	b.n	80046ee <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Start+0xb6>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045cc:	e023      	b.n	8004616 <HAL_TIM_PWM_Start+0xfe>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d104      	bne.n	80045de <HAL_TIM_PWM_Start+0xc6>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045dc:	e01b      	b.n	8004616 <HAL_TIM_PWM_Start+0xfe>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_PWM_Start+0xd6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ec:	e013      	b.n	8004616 <HAL_TIM_PWM_Start+0xfe>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b0c      	cmp	r3, #12
 80045f2:	d104      	bne.n	80045fe <HAL_TIM_PWM_Start+0xe6>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045fc:	e00b      	b.n	8004616 <HAL_TIM_PWM_Start+0xfe>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b10      	cmp	r3, #16
 8004602:	d104      	bne.n	800460e <HAL_TIM_PWM_Start+0xf6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800460c:	e003      	b.n	8004616 <HAL_TIM_PWM_Start+0xfe>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2201      	movs	r2, #1
 800461c:	6839      	ldr	r1, [r7, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f001 f830 	bl	8005684 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a33      	ldr	r2, [pc, #204]	; (80046f8 <HAL_TIM_PWM_Start+0x1e0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_TIM_PWM_Start+0x13e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a32      	ldr	r2, [pc, #200]	; (80046fc <HAL_TIM_PWM_Start+0x1e4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_TIM_PWM_Start+0x13e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a30      	ldr	r2, [pc, #192]	; (8004700 <HAL_TIM_PWM_Start+0x1e8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_TIM_PWM_Start+0x13e>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2f      	ldr	r2, [pc, #188]	; (8004704 <HAL_TIM_PWM_Start+0x1ec>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIM_PWM_Start+0x13e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2d      	ldr	r2, [pc, #180]	; (8004708 <HAL_TIM_PWM_Start+0x1f0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_TIM_PWM_Start+0x142>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_TIM_PWM_Start+0x144>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800466e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <HAL_TIM_PWM_Start+0x1e0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d018      	beq.n	80046ac <HAL_TIM_PWM_Start+0x194>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004682:	d013      	beq.n	80046ac <HAL_TIM_PWM_Start+0x194>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a20      	ldr	r2, [pc, #128]	; (800470c <HAL_TIM_PWM_Start+0x1f4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_TIM_PWM_Start+0x194>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <HAL_TIM_PWM_Start+0x1f8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_TIM_PWM_Start+0x194>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a17      	ldr	r2, [pc, #92]	; (80046fc <HAL_TIM_PWM_Start+0x1e4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_TIM_PWM_Start+0x194>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a16      	ldr	r2, [pc, #88]	; (8004700 <HAL_TIM_PWM_Start+0x1e8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d115      	bne.n	80046d8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	4b18      	ldr	r3, [pc, #96]	; (8004714 <HAL_TIM_PWM_Start+0x1fc>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d015      	beq.n	80046ea <HAL_TIM_PWM_Start+0x1d2>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d011      	beq.n	80046ea <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d6:	e008      	b.n	80046ea <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e000      	b.n	80046ec <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	40013400 	.word	0x40013400
 8004700:	40014000 	.word	0x40014000
 8004704:	40014400 	.word	0x40014400
 8004708:	40014800 	.word	0x40014800
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800
 8004714:	00010007 	.word	0x00010007

08004718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d122      	bne.n	8004774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d11b      	bne.n	8004774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0202 	mvn.w	r2, #2
 8004744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fb52 	bl	8004e04 <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fb44 	bl	8004df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fb55 	bl	8004e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b04      	cmp	r3, #4
 8004780:	d122      	bne.n	80047c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b04      	cmp	r3, #4
 800478e:	d11b      	bne.n	80047c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0204 	mvn.w	r2, #4
 8004798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fb28 	bl	8004e04 <HAL_TIM_IC_CaptureCallback>
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fb1a 	bl	8004df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fb2b 	bl	8004e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d122      	bne.n	800481c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d11b      	bne.n	800481c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0208 	mvn.w	r2, #8
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2204      	movs	r2, #4
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fafe 	bl	8004e04 <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 faf0 	bl	8004df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fb01 	bl	8004e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b10      	cmp	r3, #16
 8004828:	d122      	bne.n	8004870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b10      	cmp	r3, #16
 8004836:	d11b      	bne.n	8004870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0210 	mvn.w	r2, #16
 8004840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2208      	movs	r2, #8
 8004846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fad4 	bl	8004e04 <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fac6 	bl	8004df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fad7 	bl	8004e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d10e      	bne.n	800489c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d107      	bne.n	800489c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0201 	mvn.w	r2, #1
 8004894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 faa0 	bl	8004ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b80      	cmp	r3, #128	; 0x80
 80048a8:	d10e      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f001 f8e4 	bl	8005a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	d10e      	bne.n	80048f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e2:	2b80      	cmp	r3, #128	; 0x80
 80048e4:	d107      	bne.n	80048f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f001 f8d7 	bl	8005aa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d10e      	bne.n	8004922 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d107      	bne.n	8004922 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800491a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fa85 	bl	8004e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b20      	cmp	r3, #32
 800492e:	d10e      	bne.n	800494e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b20      	cmp	r3, #32
 800493c:	d107      	bne.n	800494e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f06f 0220 	mvn.w	r2, #32
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 f897 	bl	8005a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495c:	d10f      	bne.n	800497e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496c:	d107      	bne.n	800497e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 f89d 	bl	8005ab8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800498c:	d10f      	bne.n	80049ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004998:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800499c:	d107      	bne.n	80049ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f001 f88f 	bl	8005acc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049bc:	d10f      	bne.n	80049de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049cc:	d107      	bne.n	80049de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f001 f881 	bl	8005ae0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ec:	d10f      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049fc:	d107      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f001 f873 	bl	8005af4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e0fd      	b.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b14      	cmp	r3, #20
 8004a3e:	f200 80f0 	bhi.w	8004c22 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a9d 	.word	0x08004a9d
 8004a4c:	08004c23 	.word	0x08004c23
 8004a50:	08004c23 	.word	0x08004c23
 8004a54:	08004c23 	.word	0x08004c23
 8004a58:	08004add 	.word	0x08004add
 8004a5c:	08004c23 	.word	0x08004c23
 8004a60:	08004c23 	.word	0x08004c23
 8004a64:	08004c23 	.word	0x08004c23
 8004a68:	08004b1f 	.word	0x08004b1f
 8004a6c:	08004c23 	.word	0x08004c23
 8004a70:	08004c23 	.word	0x08004c23
 8004a74:	08004c23 	.word	0x08004c23
 8004a78:	08004b5f 	.word	0x08004b5f
 8004a7c:	08004c23 	.word	0x08004c23
 8004a80:	08004c23 	.word	0x08004c23
 8004a84:	08004c23 	.word	0x08004c23
 8004a88:	08004ba1 	.word	0x08004ba1
 8004a8c:	08004c23 	.word	0x08004c23
 8004a90:	08004c23 	.word	0x08004c23
 8004a94:	08004c23 	.word	0x08004c23
 8004a98:	08004be1 	.word	0x08004be1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fa5c 	bl	8004f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0208 	orr.w	r2, r2, #8
 8004ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0204 	bic.w	r2, r2, #4
 8004ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6999      	ldr	r1, [r3, #24]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	619a      	str	r2, [r3, #24]
      break;
 8004ada:	e0a3      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 facc 	bl	8005080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6999      	ldr	r1, [r3, #24]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	021a      	lsls	r2, r3, #8
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	619a      	str	r2, [r3, #24]
      break;
 8004b1c:	e082      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fb35 	bl	8005194 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0208 	orr.w	r2, r2, #8
 8004b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0204 	bic.w	r2, r2, #4
 8004b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69d9      	ldr	r1, [r3, #28]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	61da      	str	r2, [r3, #28]
      break;
 8004b5c:	e062      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fb9d 	bl	80052a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69d9      	ldr	r1, [r3, #28]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	021a      	lsls	r2, r3, #8
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	61da      	str	r2, [r3, #28]
      break;
 8004b9e:	e041      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fc06 	bl	80053b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0208 	orr.w	r2, r2, #8
 8004bba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0204 	bic.w	r2, r2, #4
 8004bca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004bde:	e021      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fc4a 	bl	8005480 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bfa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c20:	e000      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004c22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop

08004c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIM_ConfigClockSource+0x18>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0b9      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x18c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b70      	cmp	r3, #112	; 0x70
 8004c8a:	d02e      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0xb2>
 8004c8c:	2b70      	cmp	r3, #112	; 0x70
 8004c8e:	d812      	bhi.n	8004cb6 <HAL_TIM_ConfigClockSource+0x7e>
 8004c90:	2b30      	cmp	r3, #48	; 0x30
 8004c92:	f000 8084 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x166>
 8004c96:	2b30      	cmp	r3, #48	; 0x30
 8004c98:	d806      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x70>
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d07f      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x166>
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d07d      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x166>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d07b      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ca6:	e084      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004ca8:	2b50      	cmp	r3, #80	; 0x50
 8004caa:	d048      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0x106>
 8004cac:	2b60      	cmp	r3, #96	; 0x60
 8004cae:	d056      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x126>
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d064      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x146>
      break;
 8004cb4:	e07d      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004cb6:	4a45      	ldr	r2, [pc, #276]	; (8004dcc <HAL_TIM_ConfigClockSource+0x194>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d070      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x166>
 8004cbc:	4a43      	ldr	r2, [pc, #268]	; (8004dcc <HAL_TIM_ConfigClockSource+0x194>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d809      	bhi.n	8004cd6 <HAL_TIM_ConfigClockSource+0x9e>
 8004cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc6:	d027      	beq.n	8004d18 <HAL_TIM_ConfigClockSource+0xe0>
 8004cc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ccc:	d067      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x166>
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd2:	d06d      	beq.n	8004db0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004cd4:	e06d      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004cd6:	4a3e      	ldr	r2, [pc, #248]	; (8004dd0 <HAL_TIM_ConfigClockSource+0x198>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d060      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x166>
 8004cdc:	4a3d      	ldr	r2, [pc, #244]	; (8004dd4 <HAL_TIM_ConfigClockSource+0x19c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d05d      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x166>
 8004ce2:	4a3d      	ldr	r2, [pc, #244]	; (8004dd8 <HAL_TIM_ConfigClockSource+0x1a0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d05a      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x166>
      break;
 8004ce8:	e063      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6899      	ldr	r1, [r3, #8]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f000 fca3 	bl	8005644 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	609a      	str	r2, [r3, #8]
      break;
 8004d16:	e04c      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6899      	ldr	r1, [r3, #8]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f000 fc8c 	bl	8005644 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d3a:	609a      	str	r2, [r3, #8]
      break;
 8004d3c:	e039      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 fbfe 	bl	800554c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2150      	movs	r1, #80	; 0x50
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fc57 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e029      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f000 fc1d 	bl	80055aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2160      	movs	r1, #96	; 0x60
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fc47 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e019      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f000 fbde 	bl	800554c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2140      	movs	r1, #64	; 0x40
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fc37 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8004d9c:	e009      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f000 fc2e 	bl	800560a <TIM_ITRx_SetConfig>
        break;
 8004dae:	e000      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8004db0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	00100020 	.word	0x00100020
 8004dd0:	00100040 	.word	0x00100040
 8004dd4:	00100070 	.word	0x00100070
 8004dd8:	00100030 	.word	0x00100030

08004ddc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3c      	ldr	r2, [pc, #240]	; (8004f44 <TIM_Base_SetConfig+0x104>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00f      	beq.n	8004e78 <TIM_Base_SetConfig+0x38>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5e:	d00b      	beq.n	8004e78 <TIM_Base_SetConfig+0x38>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a39      	ldr	r2, [pc, #228]	; (8004f48 <TIM_Base_SetConfig+0x108>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d007      	beq.n	8004e78 <TIM_Base_SetConfig+0x38>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a38      	ldr	r2, [pc, #224]	; (8004f4c <TIM_Base_SetConfig+0x10c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <TIM_Base_SetConfig+0x38>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a37      	ldr	r2, [pc, #220]	; (8004f50 <TIM_Base_SetConfig+0x110>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d108      	bne.n	8004e8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2d      	ldr	r2, [pc, #180]	; (8004f44 <TIM_Base_SetConfig+0x104>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01b      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e98:	d017      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <TIM_Base_SetConfig+0x108>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a29      	ldr	r2, [pc, #164]	; (8004f4c <TIM_Base_SetConfig+0x10c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a28      	ldr	r2, [pc, #160]	; (8004f50 <TIM_Base_SetConfig+0x110>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <TIM_Base_SetConfig+0x114>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <TIM_Base_SetConfig+0x118>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0x8a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <TIM_Base_SetConfig+0x11c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <TIM_Base_SetConfig+0x104>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00f      	beq.n	8004f28 <TIM_Base_SetConfig+0xe8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a11      	ldr	r2, [pc, #68]	; (8004f50 <TIM_Base_SetConfig+0x110>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <TIM_Base_SetConfig+0xe8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a10      	ldr	r2, [pc, #64]	; (8004f54 <TIM_Base_SetConfig+0x114>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <TIM_Base_SetConfig+0xe8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <TIM_Base_SetConfig+0x118>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_Base_SetConfig+0xe8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a0e      	ldr	r2, [pc, #56]	; (8004f5c <TIM_Base_SetConfig+0x11c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d103      	bne.n	8004f30 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	615a      	str	r2, [r3, #20]
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40013400 	.word	0x40013400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40014400 	.word	0x40014400
 8004f5c:	40014800 	.word	0x40014800

08004f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f023 0302 	bic.w	r3, r3, #2
 8004fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a2c      	ldr	r2, [pc, #176]	; (800506c <TIM_OC1_SetConfig+0x10c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00f      	beq.n	8004fe0 <TIM_OC1_SetConfig+0x80>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <TIM_OC1_SetConfig+0x110>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <TIM_OC1_SetConfig+0x80>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <TIM_OC1_SetConfig+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <TIM_OC1_SetConfig+0x80>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a29      	ldr	r2, [pc, #164]	; (8005078 <TIM_OC1_SetConfig+0x118>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_OC1_SetConfig+0x80>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a28      	ldr	r2, [pc, #160]	; (800507c <TIM_OC1_SetConfig+0x11c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10c      	bne.n	8004ffa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0308 	bic.w	r3, r3, #8
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 0304 	bic.w	r3, r3, #4
 8004ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1b      	ldr	r2, [pc, #108]	; (800506c <TIM_OC1_SetConfig+0x10c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_OC1_SetConfig+0xc2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <TIM_OC1_SetConfig+0x110>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_OC1_SetConfig+0xc2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a19      	ldr	r2, [pc, #100]	; (8005074 <TIM_OC1_SetConfig+0x114>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_OC1_SetConfig+0xc2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a18      	ldr	r2, [pc, #96]	; (8005078 <TIM_OC1_SetConfig+0x118>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_OC1_SetConfig+0xc2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a17      	ldr	r2, [pc, #92]	; (800507c <TIM_OC1_SetConfig+0x11c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d111      	bne.n	8005046 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	621a      	str	r2, [r3, #32]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	40012c00 	.word	0x40012c00
 8005070:	40013400 	.word	0x40013400
 8005074:	40014000 	.word	0x40014000
 8005078:	40014400 	.word	0x40014400
 800507c:	40014800 	.word	0x40014800

08005080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0210 	bic.w	r2, r3, #16
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f023 0320 	bic.w	r3, r3, #32
 80050ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a28      	ldr	r2, [pc, #160]	; (8005180 <TIM_OC2_SetConfig+0x100>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC2_SetConfig+0x6c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a27      	ldr	r2, [pc, #156]	; (8005184 <TIM_OC2_SetConfig+0x104>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10d      	bne.n	8005108 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <TIM_OC2_SetConfig+0x100>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00f      	beq.n	8005130 <TIM_OC2_SetConfig+0xb0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <TIM_OC2_SetConfig+0x104>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_OC2_SetConfig+0xb0>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <TIM_OC2_SetConfig+0x108>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_OC2_SetConfig+0xb0>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a1a      	ldr	r2, [pc, #104]	; (800518c <TIM_OC2_SetConfig+0x10c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC2_SetConfig+0xb0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a19      	ldr	r2, [pc, #100]	; (8005190 <TIM_OC2_SetConfig+0x110>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d113      	bne.n	8005158 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40013400 	.word	0x40013400
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800

08005194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a27      	ldr	r2, [pc, #156]	; (8005290 <TIM_OC3_SetConfig+0xfc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_OC3_SetConfig+0x6a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a26      	ldr	r2, [pc, #152]	; (8005294 <TIM_OC3_SetConfig+0x100>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d10d      	bne.n	800521a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <TIM_OC3_SetConfig+0xfc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00f      	beq.n	8005242 <TIM_OC3_SetConfig+0xae>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <TIM_OC3_SetConfig+0x100>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_OC3_SetConfig+0xae>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1a      	ldr	r2, [pc, #104]	; (8005298 <TIM_OC3_SetConfig+0x104>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_OC3_SetConfig+0xae>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a19      	ldr	r2, [pc, #100]	; (800529c <TIM_OC3_SetConfig+0x108>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC3_SetConfig+0xae>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <TIM_OC3_SetConfig+0x10c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d113      	bne.n	800526a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	621a      	str	r2, [r3, #32]
}
 8005284:	bf00      	nop
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40013400 	.word	0x40013400
 8005298:	40014000 	.word	0x40014000
 800529c:	40014400 	.word	0x40014400
 80052a0:	40014800 	.word	0x40014800

080052a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	031b      	lsls	r3, r3, #12
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <TIM_OC4_SetConfig+0x100>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_OC4_SetConfig+0x6c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a27      	ldr	r2, [pc, #156]	; (80053a8 <TIM_OC4_SetConfig+0x104>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10d      	bne.n	800532c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	031b      	lsls	r3, r3, #12
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800532a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <TIM_OC4_SetConfig+0x100>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00f      	beq.n	8005354 <TIM_OC4_SetConfig+0xb0>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <TIM_OC4_SetConfig+0x104>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_OC4_SetConfig+0xb0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a1b      	ldr	r2, [pc, #108]	; (80053ac <TIM_OC4_SetConfig+0x108>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_OC4_SetConfig+0xb0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <TIM_OC4_SetConfig+0x10c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_OC4_SetConfig+0xb0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <TIM_OC4_SetConfig+0x110>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d113      	bne.n	800537c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005362:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	019b      	lsls	r3, r3, #6
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	019b      	lsls	r3, r3, #6
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40013400 	.word	0x40013400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800

080053b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a17      	ldr	r2, [pc, #92]	; (800546c <TIM_OC5_SetConfig+0xb4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00f      	beq.n	8005432 <TIM_OC5_SetConfig+0x7a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a16      	ldr	r2, [pc, #88]	; (8005470 <TIM_OC5_SetConfig+0xb8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00b      	beq.n	8005432 <TIM_OC5_SetConfig+0x7a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <TIM_OC5_SetConfig+0xbc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d007      	beq.n	8005432 <TIM_OC5_SetConfig+0x7a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a14      	ldr	r2, [pc, #80]	; (8005478 <TIM_OC5_SetConfig+0xc0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d003      	beq.n	8005432 <TIM_OC5_SetConfig+0x7a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a13      	ldr	r2, [pc, #76]	; (800547c <TIM_OC5_SetConfig+0xc4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d109      	bne.n	8005446 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005438:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	621a      	str	r2, [r3, #32]
}
 8005460:	bf00      	nop
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40013400 	.word	0x40013400
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400
 800547c:	40014800 	.word	0x40014800

08005480 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	051b      	lsls	r3, r3, #20
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a18      	ldr	r2, [pc, #96]	; (8005538 <TIM_OC6_SetConfig+0xb8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00f      	beq.n	80054fc <TIM_OC6_SetConfig+0x7c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a17      	ldr	r2, [pc, #92]	; (800553c <TIM_OC6_SetConfig+0xbc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00b      	beq.n	80054fc <TIM_OC6_SetConfig+0x7c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a16      	ldr	r2, [pc, #88]	; (8005540 <TIM_OC6_SetConfig+0xc0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d007      	beq.n	80054fc <TIM_OC6_SetConfig+0x7c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <TIM_OC6_SetConfig+0xc4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC6_SetConfig+0x7c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a14      	ldr	r2, [pc, #80]	; (8005548 <TIM_OC6_SetConfig+0xc8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d109      	bne.n	8005510 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005502:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	029b      	lsls	r3, r3, #10
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40012c00 	.word	0x40012c00
 800553c:	40013400 	.word	0x40013400
 8005540:	40014000 	.word	0x40014000
 8005544:	40014400 	.word	0x40014400
 8005548:	40014800 	.word	0x40014800

0800554c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f023 0201 	bic.w	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 030a 	bic.w	r3, r3, #10
 8005588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0210 	bic.w	r2, r3, #16
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	031b      	lsls	r3, r3, #12
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	f043 0307 	orr.w	r3, r3, #7
 8005630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	609a      	str	r2, [r3, #8]
}
 8005638:	bf00      	nop
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800565e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	021a      	lsls	r2, r3, #8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	431a      	orrs	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4313      	orrs	r3, r2
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	609a      	str	r2, [r3, #8]
}
 8005678:	bf00      	nop
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2201      	movs	r2, #1
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a1a      	ldr	r2, [r3, #32]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	401a      	ands	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a1a      	ldr	r2, [r3, #32]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	431a      	orrs	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d109      	bne.n	80056f4 <HAL_TIMEx_PWMN_Start+0x24>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	bf14      	ite	ne
 80056ec:	2301      	movne	r3, #1
 80056ee:	2300      	moveq	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	e022      	b.n	800573a <HAL_TIMEx_PWMN_Start+0x6a>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d109      	bne.n	800570e <HAL_TIMEx_PWMN_Start+0x3e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b01      	cmp	r3, #1
 8005704:	bf14      	ite	ne
 8005706:	2301      	movne	r3, #1
 8005708:	2300      	moveq	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	e015      	b.n	800573a <HAL_TIMEx_PWMN_Start+0x6a>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b08      	cmp	r3, #8
 8005712:	d109      	bne.n	8005728 <HAL_TIMEx_PWMN_Start+0x58>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e008      	b.n	800573a <HAL_TIMEx_PWMN_Start+0x6a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	bf14      	ite	ne
 8005734:	2301      	movne	r3, #1
 8005736:	2300      	moveq	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e069      	b.n	8005816 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <HAL_TIMEx_PWMN_Start+0x82>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005750:	e013      	b.n	800577a <HAL_TIMEx_PWMN_Start+0xaa>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d104      	bne.n	8005762 <HAL_TIMEx_PWMN_Start+0x92>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005760:	e00b      	b.n	800577a <HAL_TIMEx_PWMN_Start+0xaa>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d104      	bne.n	8005772 <HAL_TIMEx_PWMN_Start+0xa2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005770:	e003      	b.n	800577a <HAL_TIMEx_PWMN_Start+0xaa>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2204      	movs	r2, #4
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 f9c0 	bl	8005b08 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005796:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a20      	ldr	r2, [pc, #128]	; (8005820 <HAL_TIMEx_PWMN_Start+0x150>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_TIMEx_PWMN_Start+0x104>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057aa:	d013      	beq.n	80057d4 <HAL_TIMEx_PWMN_Start+0x104>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <HAL_TIMEx_PWMN_Start+0x154>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_TIMEx_PWMN_Start+0x104>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_TIMEx_PWMN_Start+0x158>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_TIMEx_PWMN_Start+0x104>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a19      	ldr	r2, [pc, #100]	; (800582c <HAL_TIMEx_PWMN_Start+0x15c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_TIMEx_PWMN_Start+0x104>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_TIMEx_PWMN_Start+0x160>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d115      	bne.n	8005800 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <HAL_TIMEx_PWMN_Start+0x164>)
 80057dc:	4013      	ands	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b06      	cmp	r3, #6
 80057e4:	d015      	beq.n	8005812 <HAL_TIMEx_PWMN_Start+0x142>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ec:	d011      	beq.n	8005812 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fe:	e008      	b.n	8005812 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e000      	b.n	8005814 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40013400 	.word	0x40013400
 8005830:	40014000 	.word	0x40014000
 8005834:	00010007 	.word	0x00010007

08005838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800584c:	2302      	movs	r3, #2
 800584e:	e065      	b.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2c      	ldr	r2, [pc, #176]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2b      	ldr	r2, [pc, #172]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d108      	bne.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800588a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800589c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1b      	ldr	r2, [pc, #108]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d018      	beq.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c6:	d013      	beq.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a18      	ldr	r2, [pc, #96]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00e      	beq.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a17      	ldr	r2, [pc, #92]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a12      	ldr	r2, [pc, #72]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10c      	bne.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40013400 	.word	0x40013400
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40014000 	.word	0x40014000

0800593c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005954:	2302      	movs	r3, #2
 8005956:	e087      	b.n	8005a68 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a27      	ldr	r2, [pc, #156]	; (8005a74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a25      	ldr	r2, [pc, #148]	; (8005a78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d106      	bne.n	80059f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d126      	bne.n	8005a56 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a12:	051b      	lsls	r3, r3, #20
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a0e      	ldr	r2, [pc, #56]	; (8005a74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a0d      	ldr	r2, [pc, #52]	; (8005a78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d106      	bne.n	8005a56 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40013400 	.word	0x40013400

08005a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1a      	ldr	r2, [r3, #32]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1a      	ldr	r2, [r3, #32]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b40:	431a      	orrs	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e042      	b.n	8005bea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb fa6e 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2224      	movs	r2, #36	; 0x24
 8005b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f82d 	bl	8005bf4 <UART_SetConfig>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e022      	b.n	8005bea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fac9 	bl	8006144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0201 	orr.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fb50 	bl	8006288 <UART_CheckIdleState>
 8005be8:	4603      	mov	r3, r0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005bf8:	b088      	sub	sp, #32
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4bb0      	ldr	r3, [pc, #704]	; (8005eec <UART_SetConfig+0x2f8>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	69f9      	ldr	r1, [r7, #28]
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4aa5      	ldr	r2, [pc, #660]	; (8005ef0 <UART_SetConfig+0x2fc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6812      	ldr	r2, [r2, #0]
 8005c7a:	69f9      	ldr	r1, [r7, #28]
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	f023 010f 	bic.w	r1, r3, #15
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a96      	ldr	r2, [pc, #600]	; (8005ef4 <UART_SetConfig+0x300>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d121      	bne.n	8005ce4 <UART_SetConfig+0xf0>
 8005ca0:	4b95      	ldr	r3, [pc, #596]	; (8005ef8 <UART_SetConfig+0x304>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d816      	bhi.n	8005cdc <UART_SetConfig+0xe8>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0xc0>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005cc5 	.word	0x08005cc5
 8005cb8:	08005cd1 	.word	0x08005cd1
 8005cbc:	08005ccb 	.word	0x08005ccb
 8005cc0:	08005cd7 	.word	0x08005cd7
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	76fb      	strb	r3, [r7, #27]
 8005cc8:	e0be      	b.n	8005e48 <UART_SetConfig+0x254>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	76fb      	strb	r3, [r7, #27]
 8005cce:	e0bb      	b.n	8005e48 <UART_SetConfig+0x254>
 8005cd0:	2304      	movs	r3, #4
 8005cd2:	76fb      	strb	r3, [r7, #27]
 8005cd4:	e0b8      	b.n	8005e48 <UART_SetConfig+0x254>
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	76fb      	strb	r3, [r7, #27]
 8005cda:	e0b5      	b.n	8005e48 <UART_SetConfig+0x254>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	76fb      	strb	r3, [r7, #27]
 8005ce0:	bf00      	nop
 8005ce2:	e0b1      	b.n	8005e48 <UART_SetConfig+0x254>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a84      	ldr	r2, [pc, #528]	; (8005efc <UART_SetConfig+0x308>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d134      	bne.n	8005d58 <UART_SetConfig+0x164>
 8005cee:	4b82      	ldr	r3, [pc, #520]	; (8005ef8 <UART_SetConfig+0x304>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b0c      	cmp	r3, #12
 8005cfa:	d829      	bhi.n	8005d50 <UART_SetConfig+0x15c>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <UART_SetConfig+0x110>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005d51 	.word	0x08005d51
 8005d0c:	08005d51 	.word	0x08005d51
 8005d10:	08005d51 	.word	0x08005d51
 8005d14:	08005d45 	.word	0x08005d45
 8005d18:	08005d51 	.word	0x08005d51
 8005d1c:	08005d51 	.word	0x08005d51
 8005d20:	08005d51 	.word	0x08005d51
 8005d24:	08005d3f 	.word	0x08005d3f
 8005d28:	08005d51 	.word	0x08005d51
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d51 	.word	0x08005d51
 8005d34:	08005d4b 	.word	0x08005d4b
 8005d38:	2300      	movs	r3, #0
 8005d3a:	76fb      	strb	r3, [r7, #27]
 8005d3c:	e084      	b.n	8005e48 <UART_SetConfig+0x254>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	76fb      	strb	r3, [r7, #27]
 8005d42:	e081      	b.n	8005e48 <UART_SetConfig+0x254>
 8005d44:	2304      	movs	r3, #4
 8005d46:	76fb      	strb	r3, [r7, #27]
 8005d48:	e07e      	b.n	8005e48 <UART_SetConfig+0x254>
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	76fb      	strb	r3, [r7, #27]
 8005d4e:	e07b      	b.n	8005e48 <UART_SetConfig+0x254>
 8005d50:	2310      	movs	r3, #16
 8005d52:	76fb      	strb	r3, [r7, #27]
 8005d54:	bf00      	nop
 8005d56:	e077      	b.n	8005e48 <UART_SetConfig+0x254>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a68      	ldr	r2, [pc, #416]	; (8005f00 <UART_SetConfig+0x30c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d120      	bne.n	8005da4 <UART_SetConfig+0x1b0>
 8005d62:	4b65      	ldr	r3, [pc, #404]	; (8005ef8 <UART_SetConfig+0x304>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	d00f      	beq.n	8005d90 <UART_SetConfig+0x19c>
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	d802      	bhi.n	8005d7a <UART_SetConfig+0x186>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <UART_SetConfig+0x190>
 8005d78:	e010      	b.n	8005d9c <UART_SetConfig+0x1a8>
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d005      	beq.n	8005d8a <UART_SetConfig+0x196>
 8005d7e:	2b30      	cmp	r3, #48	; 0x30
 8005d80:	d009      	beq.n	8005d96 <UART_SetConfig+0x1a2>
 8005d82:	e00b      	b.n	8005d9c <UART_SetConfig+0x1a8>
 8005d84:	2300      	movs	r3, #0
 8005d86:	76fb      	strb	r3, [r7, #27]
 8005d88:	e05e      	b.n	8005e48 <UART_SetConfig+0x254>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	76fb      	strb	r3, [r7, #27]
 8005d8e:	e05b      	b.n	8005e48 <UART_SetConfig+0x254>
 8005d90:	2304      	movs	r3, #4
 8005d92:	76fb      	strb	r3, [r7, #27]
 8005d94:	e058      	b.n	8005e48 <UART_SetConfig+0x254>
 8005d96:	2308      	movs	r3, #8
 8005d98:	76fb      	strb	r3, [r7, #27]
 8005d9a:	e055      	b.n	8005e48 <UART_SetConfig+0x254>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	76fb      	strb	r3, [r7, #27]
 8005da0:	bf00      	nop
 8005da2:	e051      	b.n	8005e48 <UART_SetConfig+0x254>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a56      	ldr	r2, [pc, #344]	; (8005f04 <UART_SetConfig+0x310>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d120      	bne.n	8005df0 <UART_SetConfig+0x1fc>
 8005dae:	4b52      	ldr	r3, [pc, #328]	; (8005ef8 <UART_SetConfig+0x304>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005db8:	2b40      	cmp	r3, #64	; 0x40
 8005dba:	d00f      	beq.n	8005ddc <UART_SetConfig+0x1e8>
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d802      	bhi.n	8005dc6 <UART_SetConfig+0x1d2>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <UART_SetConfig+0x1dc>
 8005dc4:	e010      	b.n	8005de8 <UART_SetConfig+0x1f4>
 8005dc6:	2b80      	cmp	r3, #128	; 0x80
 8005dc8:	d005      	beq.n	8005dd6 <UART_SetConfig+0x1e2>
 8005dca:	2bc0      	cmp	r3, #192	; 0xc0
 8005dcc:	d009      	beq.n	8005de2 <UART_SetConfig+0x1ee>
 8005dce:	e00b      	b.n	8005de8 <UART_SetConfig+0x1f4>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	76fb      	strb	r3, [r7, #27]
 8005dd4:	e038      	b.n	8005e48 <UART_SetConfig+0x254>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	76fb      	strb	r3, [r7, #27]
 8005dda:	e035      	b.n	8005e48 <UART_SetConfig+0x254>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	76fb      	strb	r3, [r7, #27]
 8005de0:	e032      	b.n	8005e48 <UART_SetConfig+0x254>
 8005de2:	2308      	movs	r3, #8
 8005de4:	76fb      	strb	r3, [r7, #27]
 8005de6:	e02f      	b.n	8005e48 <UART_SetConfig+0x254>
 8005de8:	2310      	movs	r3, #16
 8005dea:	76fb      	strb	r3, [r7, #27]
 8005dec:	bf00      	nop
 8005dee:	e02b      	b.n	8005e48 <UART_SetConfig+0x254>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a3e      	ldr	r2, [pc, #248]	; (8005ef0 <UART_SetConfig+0x2fc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d124      	bne.n	8005e44 <UART_SetConfig+0x250>
 8005dfa:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <UART_SetConfig+0x304>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e08:	d012      	beq.n	8005e30 <UART_SetConfig+0x23c>
 8005e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0e:	d802      	bhi.n	8005e16 <UART_SetConfig+0x222>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <UART_SetConfig+0x230>
 8005e14:	e012      	b.n	8005e3c <UART_SetConfig+0x248>
 8005e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e1a:	d006      	beq.n	8005e2a <UART_SetConfig+0x236>
 8005e1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e20:	d009      	beq.n	8005e36 <UART_SetConfig+0x242>
 8005e22:	e00b      	b.n	8005e3c <UART_SetConfig+0x248>
 8005e24:	2300      	movs	r3, #0
 8005e26:	76fb      	strb	r3, [r7, #27]
 8005e28:	e00e      	b.n	8005e48 <UART_SetConfig+0x254>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	76fb      	strb	r3, [r7, #27]
 8005e2e:	e00b      	b.n	8005e48 <UART_SetConfig+0x254>
 8005e30:	2304      	movs	r3, #4
 8005e32:	76fb      	strb	r3, [r7, #27]
 8005e34:	e008      	b.n	8005e48 <UART_SetConfig+0x254>
 8005e36:	2308      	movs	r3, #8
 8005e38:	76fb      	strb	r3, [r7, #27]
 8005e3a:	e005      	b.n	8005e48 <UART_SetConfig+0x254>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	76fb      	strb	r3, [r7, #27]
 8005e40:	bf00      	nop
 8005e42:	e001      	b.n	8005e48 <UART_SetConfig+0x254>
 8005e44:	2310      	movs	r3, #16
 8005e46:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a28      	ldr	r2, [pc, #160]	; (8005ef0 <UART_SetConfig+0x2fc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	f040 80a1 	bne.w	8005f96 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e54:	7efb      	ldrb	r3, [r7, #27]
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d823      	bhi.n	8005ea2 <UART_SetConfig+0x2ae>
 8005e5a:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <UART_SetConfig+0x26c>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005ea3 	.word	0x08005ea3
 8005e68:	08005e8d 	.word	0x08005e8d
 8005e6c:	08005ea3 	.word	0x08005ea3
 8005e70:	08005e93 	.word	0x08005e93
 8005e74:	08005ea3 	.word	0x08005ea3
 8005e78:	08005ea3 	.word	0x08005ea3
 8005e7c:	08005ea3 	.word	0x08005ea3
 8005e80:	08005e9b 	.word	0x08005e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e84:	f7fd ff18 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 8005e88:	6178      	str	r0, [r7, #20]
        break;
 8005e8a:	e00f      	b.n	8005eac <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e8c:	4b1e      	ldr	r3, [pc, #120]	; (8005f08 <UART_SetConfig+0x314>)
 8005e8e:	617b      	str	r3, [r7, #20]
        break;
 8005e90:	e00c      	b.n	8005eac <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e92:	f7fd fea3 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8005e96:	6178      	str	r0, [r7, #20]
        break;
 8005e98:	e008      	b.n	8005eac <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9e:	617b      	str	r3, [r7, #20]
        break;
 8005ea0:	e004      	b.n	8005eac <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	76bb      	strb	r3, [r7, #26]
        break;
 8005eaa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8130 	beq.w	8006114 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	4a14      	ldr	r2, [pc, #80]	; (8005f0c <UART_SetConfig+0x318>)
 8005eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	4413      	add	r3, r2
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d305      	bcc.n	8005ee4 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d915      	bls.n	8005f10 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	76bb      	strb	r3, [r7, #26]
 8005ee8:	e114      	b.n	8006114 <UART_SetConfig+0x520>
 8005eea:	bf00      	nop
 8005eec:	cfff69f3 	.word	0xcfff69f3
 8005ef0:	40008000 	.word	0x40008000
 8005ef4:	40013800 	.word	0x40013800
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40004400 	.word	0x40004400
 8005f00:	40004800 	.word	0x40004800
 8005f04:	40004c00 	.word	0x40004c00
 8005f08:	00f42400 	.word	0x00f42400
 8005f0c:	0800a9c4 	.word	0x0800a9c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f04f 0100 	mov.w	r1, #0
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	4a87      	ldr	r2, [pc, #540]	; (800613c <UART_SetConfig+0x548>)
 8005f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f04f 0400 	mov.w	r4, #0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4623      	mov	r3, r4
 8005f2c:	f7fa f974 	bl	8000218 <__aeabi_uldivmod>
 8005f30:	4603      	mov	r3, r0
 8005f32:	460c      	mov	r4, r1
 8005f34:	4619      	mov	r1, r3
 8005f36:	4622      	mov	r2, r4
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	f04f 0400 	mov.w	r4, #0
 8005f40:	0214      	lsls	r4, r2, #8
 8005f42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f46:	020b      	lsls	r3, r1, #8
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6852      	ldr	r2, [r2, #4]
 8005f4c:	0852      	lsrs	r2, r2, #1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	eb13 0b01 	adds.w	fp, r3, r1
 8005f58:	eb44 0c02 	adc.w	ip, r4, r2
 8005f5c:	4658      	mov	r0, fp
 8005f5e:	4661      	mov	r1, ip
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f04f 0400 	mov.w	r4, #0
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4623      	mov	r3, r4
 8005f6c:	f7fa f954 	bl	8000218 <__aeabi_uldivmod>
 8005f70:	4603      	mov	r3, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f7c:	d308      	bcc.n	8005f90 <UART_SetConfig+0x39c>
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f84:	d204      	bcs.n	8005f90 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	60da      	str	r2, [r3, #12]
 8005f8e:	e0c1      	b.n	8006114 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	76bb      	strb	r3, [r7, #26]
 8005f94:	e0be      	b.n	8006114 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f9e:	d164      	bne.n	800606a <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8005fa0:	7efb      	ldrb	r3, [r7, #27]
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d827      	bhi.n	8005ff6 <UART_SetConfig+0x402>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <UART_SetConfig+0x3b8>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fd1 	.word	0x08005fd1
 8005fb0:	08005fd9 	.word	0x08005fd9
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	08005ff7 	.word	0x08005ff7
 8005fbc:	08005fe7 	.word	0x08005fe7
 8005fc0:	08005ff7 	.word	0x08005ff7
 8005fc4:	08005ff7 	.word	0x08005ff7
 8005fc8:	08005ff7 	.word	0x08005ff7
 8005fcc:	08005fef 	.word	0x08005fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd0:	f7fd fe72 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 8005fd4:	6178      	str	r0, [r7, #20]
        break;
 8005fd6:	e013      	b.n	8006000 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd8:	f7fd fe84 	bl	8003ce4 <HAL_RCC_GetPCLK2Freq>
 8005fdc:	6178      	str	r0, [r7, #20]
        break;
 8005fde:	e00f      	b.n	8006000 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe0:	4b57      	ldr	r3, [pc, #348]	; (8006140 <UART_SetConfig+0x54c>)
 8005fe2:	617b      	str	r3, [r7, #20]
        break;
 8005fe4:	e00c      	b.n	8006000 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe6:	f7fd fdf9 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8005fea:	6178      	str	r0, [r7, #20]
        break;
 8005fec:	e008      	b.n	8006000 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff2:	617b      	str	r3, [r7, #20]
        break;
 8005ff4:	e004      	b.n	8006000 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	76bb      	strb	r3, [r7, #26]
        break;
 8005ffe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 8086 	beq.w	8006114 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	4a4b      	ldr	r2, [pc, #300]	; (800613c <UART_SetConfig+0x548>)
 800600e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006012:	461a      	mov	r2, r3
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	fbb3 f3f2 	udiv	r3, r3, r2
 800601a:	005a      	lsls	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	085b      	lsrs	r3, r3, #1
 8006022:	441a      	add	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	fbb2 f3f3 	udiv	r3, r2, r3
 800602c:	b29b      	uxth	r3, r3
 800602e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b0f      	cmp	r3, #15
 8006034:	d916      	bls.n	8006064 <UART_SetConfig+0x470>
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603c:	d212      	bcs.n	8006064 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f023 030f 	bic.w	r3, r3, #15
 8006046:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	085b      	lsrs	r3, r3, #1
 800604c:	b29b      	uxth	r3, r3
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	b29a      	uxth	r2, r3
 8006054:	89fb      	ldrh	r3, [r7, #14]
 8006056:	4313      	orrs	r3, r2
 8006058:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	89fa      	ldrh	r2, [r7, #14]
 8006060:	60da      	str	r2, [r3, #12]
 8006062:	e057      	b.n	8006114 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	76bb      	strb	r3, [r7, #26]
 8006068:	e054      	b.n	8006114 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800606a:	7efb      	ldrb	r3, [r7, #27]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d828      	bhi.n	80060c2 <UART_SetConfig+0x4ce>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0x484>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060a5 	.word	0x080060a5
 8006080:	080060ad 	.word	0x080060ad
 8006084:	080060c3 	.word	0x080060c3
 8006088:	080060b3 	.word	0x080060b3
 800608c:	080060c3 	.word	0x080060c3
 8006090:	080060c3 	.word	0x080060c3
 8006094:	080060c3 	.word	0x080060c3
 8006098:	080060bb 	.word	0x080060bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800609c:	f7fd fe0c 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 80060a0:	6178      	str	r0, [r7, #20]
        break;
 80060a2:	e013      	b.n	80060cc <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a4:	f7fd fe1e 	bl	8003ce4 <HAL_RCC_GetPCLK2Freq>
 80060a8:	6178      	str	r0, [r7, #20]
        break;
 80060aa:	e00f      	b.n	80060cc <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ac:	4b24      	ldr	r3, [pc, #144]	; (8006140 <UART_SetConfig+0x54c>)
 80060ae:	617b      	str	r3, [r7, #20]
        break;
 80060b0:	e00c      	b.n	80060cc <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b2:	f7fd fd93 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 80060b6:	6178      	str	r0, [r7, #20]
        break;
 80060b8:	e008      	b.n	80060cc <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060be:	617b      	str	r3, [r7, #20]
        break;
 80060c0:	e004      	b.n	80060cc <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	76bb      	strb	r3, [r7, #26]
        break;
 80060ca:	bf00      	nop
    }

    if (pclk != 0U)
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d020      	beq.n	8006114 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	4a19      	ldr	r2, [pc, #100]	; (800613c <UART_SetConfig+0x548>)
 80060d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060dc:	461a      	mov	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	085b      	lsrs	r3, r3, #1
 80060ea:	441a      	add	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	2b0f      	cmp	r3, #15
 80060fc:	d908      	bls.n	8006110 <UART_SetConfig+0x51c>
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006104:	d204      	bcs.n	8006110 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	60da      	str	r2, [r3, #12]
 800610e:	e001      	b.n	8006114 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006130:	7ebb      	ldrb	r3, [r7, #26]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800613c:	0800a9c4 	.word	0x0800a9c4
 8006140:	00f42400 	.word	0x00f42400

08006144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01a      	beq.n	800625a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006242:	d10a      	bne.n	800625a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	605a      	str	r2, [r3, #4]
  }
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af02      	add	r7, sp, #8
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006298:	f7fa fffe 	bl	8001298 <HAL_GetTick>
 800629c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d10e      	bne.n	80062ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f82c 	bl	8006318 <UART_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e022      	b.n	8006310 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d10e      	bne.n	80062f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f816 	bl	8006318 <UART_WaitOnFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e00c      	b.n	8006310 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006328:	e062      	b.n	80063f0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d05e      	beq.n	80063f0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006332:	f7fa ffb1 	bl	8001298 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	429a      	cmp	r2, r3
 8006340:	d302      	bcc.n	8006348 <UART_WaitOnFlagUntilTimeout+0x30>
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d11d      	bne.n	8006384 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006356:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0201 	bic.w	r2, r2, #1
 8006366:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e045      	b.n	8006410 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d02e      	beq.n	80063f0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a0:	d126      	bne.n	80063f0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0201 	bic.w	r2, r2, #1
 80063ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2220      	movs	r2, #32
 80063e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e00f      	b.n	8006410 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4013      	ands	r3, r2
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	bf0c      	ite	eq
 8006400:	2301      	moveq	r3, #1
 8006402:	2300      	movne	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	429a      	cmp	r2, r3
 800640c:	d08d      	beq.n	800632a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_UARTEx_DisableFifoMode+0x16>
 800642a:	2302      	movs	r3, #2
 800642c:	e027      	b.n	800647e <HAL_UARTEx_DisableFifoMode+0x66>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2224      	movs	r2, #36	; 0x24
 800643a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0201 	bic.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800645c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800649e:	2302      	movs	r3, #2
 80064a0:	e02d      	b.n	80064fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2224      	movs	r2, #36	; 0x24
 80064ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0201 	bic.w	r2, r2, #1
 80064c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f850 	bl	8006584 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800651a:	2302      	movs	r3, #2
 800651c:	e02d      	b.n	800657a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2224      	movs	r2, #36	; 0x24
 800652a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f812 	bl	8006584 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b089      	sub	sp, #36	; 0x24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800658c:	4a2f      	ldr	r2, [pc, #188]	; (800664c <UARTEx_SetNbDataToProcess+0xc8>)
 800658e:	f107 0314 	add.w	r3, r7, #20
 8006592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006596:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800659a:	4a2d      	ldr	r2, [pc, #180]	; (8006650 <UARTEx_SetNbDataToProcess+0xcc>)
 800659c:	f107 030c 	add.w	r3, r7, #12
 80065a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065a4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d108      	bne.n	80065c2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065c0:	e03d      	b.n	800663e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065c2:	2308      	movs	r3, #8
 80065c4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065c6:	2308      	movs	r3, #8
 80065c8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	0e5b      	lsrs	r3, r3, #25
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	0f5b      	lsrs	r3, r3, #29
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ea:	7fbb      	ldrb	r3, [r7, #30]
 80065ec:	7f3a      	ldrb	r2, [r7, #28]
 80065ee:	f107 0120 	add.w	r1, r7, #32
 80065f2:	440a      	add	r2, r1
 80065f4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80065f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065fc:	7f3a      	ldrb	r2, [r7, #28]
 80065fe:	f107 0120 	add.w	r1, r7, #32
 8006602:	440a      	add	r2, r1
 8006604:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006608:	fb93 f3f2 	sdiv	r3, r3, r2
 800660c:	b29a      	uxth	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006614:	7ffb      	ldrb	r3, [r7, #31]
 8006616:	7f7a      	ldrb	r2, [r7, #29]
 8006618:	f107 0120 	add.w	r1, r7, #32
 800661c:	440a      	add	r2, r1
 800661e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006622:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006626:	7f7a      	ldrb	r2, [r7, #29]
 8006628:	f107 0120 	add.w	r1, r7, #32
 800662c:	440a      	add	r2, r1
 800662e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006632:	fb93 f3f2 	sdiv	r3, r3, r2
 8006636:	b29a      	uxth	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800663e:	bf00      	nop
 8006640:	3724      	adds	r7, #36	; 0x24
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	0800a954 	.word	0x0800a954
 8006650:	0800a95c 	.word	0x0800a95c

08006654 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006664:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006668:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	b29a      	uxth	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800668a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800668e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	b29b      	uxth	r3, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	b29b      	uxth	r3, r3
 80066a0:	4013      	ands	r3, r2
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80066b8:	b084      	sub	sp, #16
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	f107 0014 	add.w	r0, r7, #20
 80066c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	b004      	add	sp, #16
 80066f8:	4770      	bx	lr
	...

080066fc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b09b      	sub	sp, #108	; 0x6c
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800671e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006722:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	78db      	ldrb	r3, [r3, #3]
 800672a:	2b03      	cmp	r3, #3
 800672c:	d81f      	bhi.n	800676e <USB_ActivateEndpoint+0x72>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <USB_ActivateEndpoint+0x38>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006745 	.word	0x08006745
 8006738:	08006761 	.word	0x08006761
 800673c:	08006777 	.word	0x08006777
 8006740:	08006753 	.word	0x08006753
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006744:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800674c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006750:	e012      	b.n	8006778 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006752:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006756:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800675a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800675e:	e00b      	b.n	8006778 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006760:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006764:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006768:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800676c:	e004      	b.n	8006778 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006774:	e000      	b.n	8006778 <USB_ActivateEndpoint+0x7c>
      break;
 8006776:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	441a      	add	r2, r3
 8006782:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800678a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800678e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006796:	b29b      	uxth	r3, r3
 8006798:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	b21b      	sxth	r3, r3
 80067aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b2:	b21a      	sxth	r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	b21b      	sxth	r3, r3
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b21b      	sxth	r3, r3
 80067be:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	441a      	add	r2, r3
 80067cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80067d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	7b1b      	ldrb	r3, [r3, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f040 8149 	bne.w	8006a80 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 8084 	beq.w	8006900 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006802:	b29b      	uxth	r3, r3
 8006804:	461a      	mov	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4413      	add	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	00da      	lsls	r2, r3, #3
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800681a:	613b      	str	r3, [r7, #16]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	88db      	ldrh	r3, [r3, #6]
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	b29b      	uxth	r3, r3
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	81fb      	strh	r3, [r7, #14]
 800683a:	89fb      	ldrh	r3, [r7, #14]
 800683c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01b      	beq.n	800687c <USB_ActivateEndpoint+0x180>
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	81bb      	strh	r3, [r7, #12]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	441a      	add	r2, r3
 8006866:	89bb      	ldrh	r3, [r7, #12]
 8006868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006878:	b29b      	uxth	r3, r3
 800687a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	78db      	ldrb	r3, [r3, #3]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d020      	beq.n	80068c6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689a:	813b      	strh	r3, [r7, #8]
 800689c:	893b      	ldrh	r3, [r7, #8]
 800689e:	f083 0320 	eor.w	r3, r3, #32
 80068a2:	813b      	strh	r3, [r7, #8]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	893b      	ldrh	r3, [r7, #8]
 80068b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8013      	strh	r3, [r2, #0]
 80068c4:	e27f      	b.n	8006dc6 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068dc:	817b      	strh	r3, [r7, #10]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	441a      	add	r2, r3
 80068e8:	897b      	ldrh	r3, [r7, #10]
 80068ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	8013      	strh	r3, [r2, #0]
 80068fe:	e262      	b.n	8006dc6 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690a:	b29b      	uxth	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	4413      	add	r3, r2
 8006912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	00da      	lsls	r2, r3, #3
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	4413      	add	r3, r2
 800691e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	88db      	ldrh	r3, [r3, #6]
 8006928:	085b      	lsrs	r3, r3, #1
 800692a:	b29b      	uxth	r3, r3
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693e:	b29b      	uxth	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	4413      	add	r3, r2
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	00da      	lsls	r2, r3, #3
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	4413      	add	r3, r2
 8006952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006956:	623b      	str	r3, [r7, #32]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d112      	bne.n	8006986 <USB_ActivateEndpoint+0x28a>
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800696a:	b29a      	uxth	r2, r3
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	801a      	strh	r2, [r3, #0]
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800697a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800697e:	b29a      	uxth	r2, r3
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	801a      	strh	r2, [r3, #0]
 8006984:	e02f      	b.n	80069e6 <USB_ActivateEndpoint+0x2ea>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b3e      	cmp	r3, #62	; 0x3e
 800698c:	d813      	bhi.n	80069b6 <USB_ActivateEndpoint+0x2ba>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	663b      	str	r3, [r7, #96]	; 0x60
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <USB_ActivateEndpoint+0x2ac>
 80069a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069a4:	3301      	adds	r3, #1
 80069a6:	663b      	str	r3, [r7, #96]	; 0x60
 80069a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	029b      	lsls	r3, r3, #10
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	e017      	b.n	80069e6 <USB_ActivateEndpoint+0x2ea>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	663b      	str	r3, [r7, #96]	; 0x60
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <USB_ActivateEndpoint+0x2d4>
 80069ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069cc:	3b01      	subs	r3, #1
 80069ce:	663b      	str	r3, [r7, #96]	; 0x60
 80069d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	029b      	lsls	r3, r3, #10
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	83fb      	strh	r3, [r7, #30]
 80069f4:	8bfb      	ldrh	r3, [r7, #30]
 80069f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01b      	beq.n	8006a36 <USB_ActivateEndpoint+0x33a>
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a14:	83bb      	strh	r3, [r7, #28]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	441a      	add	r2, r3
 8006a20:	8bbb      	ldrh	r3, [r7, #28]
 8006a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4c:	837b      	strh	r3, [r7, #26]
 8006a4e:	8b7b      	ldrh	r3, [r7, #26]
 8006a50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a54:	837b      	strh	r3, [r7, #26]
 8006a56:	8b7b      	ldrh	r3, [r7, #26]
 8006a58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a5c:	837b      	strh	r3, [r7, #26]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	8b7b      	ldrh	r3, [r7, #26]
 8006a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	8013      	strh	r3, [r2, #0]
 8006a7e:	e1a2      	b.n	8006dc6 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a96:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	441a      	add	r2, r3
 8006aa4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006acc:	4413      	add	r3, r2
 8006ace:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	00da      	lsls	r2, r3, #3
 8006ad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ade:	657b      	str	r3, [r7, #84]	; 0x54
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	891b      	ldrh	r3, [r3, #8]
 8006ae4:	085b      	lsrs	r3, r3, #1
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aee:	801a      	strh	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	653b      	str	r3, [r7, #80]	; 0x50
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b00:	4413      	add	r3, r2
 8006b02:	653b      	str	r3, [r7, #80]	; 0x50
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	00da      	lsls	r2, r3, #3
 8006b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	895b      	ldrh	r3, [r3, #10]
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 8091 	bne.w	8006c50 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006b3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01b      	beq.n	8006b7e <USB_ActivateEndpoint+0x482>
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	441a      	add	r2, r3
 8006b68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	873b      	strh	r3, [r7, #56]	; 0x38
 8006b8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01b      	beq.n	8006bce <USB_ActivateEndpoint+0x4d2>
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bac:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	441a      	add	r2, r3
 8006bb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006be6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006be8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006bec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006bee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006bf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bf4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2c:	867b      	strh	r3, [r7, #50]	; 0x32
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	8013      	strh	r3, [r2, #0]
 8006c4e:	e0ba      	b.n	8006dc6 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006c60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01d      	beq.n	8006ca8 <USB_ActivateEndpoint+0x5ac>
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006cb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01d      	beq.n	8006d00 <USB_ActivateEndpoint+0x604>
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	441a      	add	r2, r3
 8006ce8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	78db      	ldrb	r3, [r3, #3]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d024      	beq.n	8006d52 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006d26:	f083 0320 	eor.w	r3, r3, #32
 8006d2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	8013      	strh	r3, [r2, #0]
 8006d50:	e01d      	b.n	8006d8e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	441a      	add	r2, r3
 8006d76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	441a      	add	r2, r3
 8006db0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006dc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	376c      	adds	r7, #108	; 0x6c
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop

08006dd8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b08d      	sub	sp, #52	; 0x34
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	7b1b      	ldrb	r3, [r3, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f040 808e 	bne.w	8006f08 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	785b      	ldrb	r3, [r3, #1]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d044      	beq.n	8006e7e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	81bb      	strh	r3, [r7, #12]
 8006e02:	89bb      	ldrh	r3, [r7, #12]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01b      	beq.n	8006e44 <USB_DeactivateEndpoint+0x6c>
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	817b      	strh	r3, [r7, #10]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	441a      	add	r2, r3
 8006e2e:	897b      	ldrh	r3, [r7, #10]
 8006e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5a:	813b      	strh	r3, [r7, #8]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	893b      	ldrh	r3, [r7, #8]
 8006e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	8013      	strh	r3, [r2, #0]
 8006e7c:	e192      	b.n	80071a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	827b      	strh	r3, [r7, #18]
 8006e8c:	8a7b      	ldrh	r3, [r7, #18]
 8006e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d01b      	beq.n	8006ece <USB_DeactivateEndpoint+0xf6>
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eac:	823b      	strh	r3, [r7, #16]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	8a3b      	ldrh	r3, [r7, #16]
 8006eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee4:	81fb      	strh	r3, [r7, #14]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	441a      	add	r2, r3
 8006ef0:	89fb      	ldrh	r3, [r7, #14]
 8006ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	8013      	strh	r3, [r2, #0]
 8006f06:	e14d      	b.n	80071a4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f040 80a5 	bne.w	800705c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	843b      	strh	r3, [r7, #32]
 8006f20:	8c3b      	ldrh	r3, [r7, #32]
 8006f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d01b      	beq.n	8006f62 <USB_DeactivateEndpoint+0x18a>
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f40:	83fb      	strh	r3, [r7, #30]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	441a      	add	r2, r3
 8006f4c:	8bfb      	ldrh	r3, [r7, #30]
 8006f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	83bb      	strh	r3, [r7, #28]
 8006f70:	8bbb      	ldrh	r3, [r7, #28]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d01b      	beq.n	8006fb2 <USB_DeactivateEndpoint+0x1da>
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f90:	837b      	strh	r3, [r7, #26]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	441a      	add	r2, r3
 8006f9c:	8b7b      	ldrh	r3, [r7, #26]
 8006f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006faa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc8:	833b      	strh	r3, [r7, #24]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	441a      	add	r2, r3
 8006fd4:	8b3b      	ldrh	r3, [r7, #24]
 8006fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007000:	82fb      	strh	r3, [r7, #22]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	441a      	add	r2, r3
 800700c:	8afb      	ldrh	r3, [r7, #22]
 800700e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800701a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701e:	b29b      	uxth	r3, r3
 8007020:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	b29b      	uxth	r3, r3
 8007030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007038:	82bb      	strh	r3, [r7, #20]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	441a      	add	r2, r3
 8007044:	8abb      	ldrh	r3, [r7, #20]
 8007046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007056:	b29b      	uxth	r3, r3
 8007058:	8013      	strh	r3, [r2, #0]
 800705a:	e0a3      	b.n	80071a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800706a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800706c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01b      	beq.n	80070ac <USB_DeactivateEndpoint+0x2d4>
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	441a      	add	r2, r3
 8007096:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80070ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01b      	beq.n	80070fc <USB_DeactivateEndpoint+0x324>
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	853b      	strh	r3, [r7, #40]	; 0x28
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80070e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	441a      	add	r2, r3
 800711e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800712c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007130:	b29b      	uxth	r3, r3
 8007132:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29b      	uxth	r3, r3
 8007142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800714a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007168:	b29b      	uxth	r3, r3
 800716a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007182:	847b      	strh	r3, [r7, #34]	; 0x22
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	441a      	add	r2, r3
 800718e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800719c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3734      	adds	r7, #52	; 0x34
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b0c4      	sub	sp, #272	; 0x110
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	1d3b      	adds	r3, r7, #4
 80071ba:	6018      	str	r0, [r3, #0]
 80071bc:	463b      	mov	r3, r7
 80071be:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071c0:	463b      	mov	r3, r7
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	785b      	ldrb	r3, [r3, #1]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	f040 8566 	bne.w	8007c98 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80071cc:	463b      	mov	r3, r7
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	463b      	mov	r3, r7
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d905      	bls.n	80071e8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80071dc:	463b      	mov	r3, r7
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80071e6:	e004      	b.n	80071f2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80071e8:	463b      	mov	r3, r7
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80071f2:	463b      	mov	r3, r7
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	7b1b      	ldrb	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d12c      	bne.n	8007256 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80071fc:	463b      	mov	r3, r7
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6959      	ldr	r1, [r3, #20]
 8007202:	463b      	mov	r3, r7
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	88da      	ldrh	r2, [r3, #6]
 8007208:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800720c:	b29b      	uxth	r3, r3
 800720e:	1d38      	adds	r0, r7, #4
 8007210:	6800      	ldr	r0, [r0, #0]
 8007212:	f001 fa43 	bl	800869c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007216:	1d3b      	adds	r3, r7, #4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	1d3b      	adds	r3, r7, #4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007224:	b29b      	uxth	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4413      	add	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	463b      	mov	r3, r7
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	00da      	lsls	r2, r3, #3
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4413      	add	r3, r2
 800723a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800723e:	f107 0310 	add.w	r3, r7, #16
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007248:	b29a      	uxth	r2, r3
 800724a:	f107 0310 	add.w	r3, r7, #16
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	f000 bcec 	b.w	8007c2e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007256:	463b      	mov	r3, r7
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	78db      	ldrb	r3, [r3, #3]
 800725c:	2b02      	cmp	r3, #2
 800725e:	f040 8356 	bne.w	800790e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007262:	463b      	mov	r3, r7
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6a1a      	ldr	r2, [r3, #32]
 8007268:	463b      	mov	r3, r7
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	429a      	cmp	r2, r3
 8007270:	f240 82fa 	bls.w	8007868 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007274:	1d3b      	adds	r3, r7, #4
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	463b      	mov	r3, r7
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	463b      	mov	r3, r7
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	441a      	add	r2, r3
 80072a0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80072a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80072b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80072b8:	463b      	mov	r3, r7
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6a1a      	ldr	r2, [r3, #32]
 80072c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072cc:	1ad2      	subs	r2, r2, r3
 80072ce:	463b      	mov	r3, r7
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072d4:	1d3b      	adds	r3, r7, #4
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	463b      	mov	r3, r7
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 815e 	beq.w	80075ac <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072f0:	1d3b      	adds	r3, r7, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
 80072f6:	463b      	mov	r3, r7
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d164      	bne.n	80073ca <USB_EPStartXfer+0x218>
 8007300:	1d3b      	adds	r3, r7, #4
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007306:	1d3b      	adds	r3, r7, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730e:	b29b      	uxth	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007314:	4413      	add	r3, r2
 8007316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007318:	463b      	mov	r3, r7
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	00da      	lsls	r2, r3, #3
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	4413      	add	r3, r2
 8007324:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007328:	62bb      	str	r3, [r7, #40]	; 0x28
 800732a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800732e:	2b00      	cmp	r3, #0
 8007330:	d112      	bne.n	8007358 <USB_EPStartXfer+0x1a6>
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800733c:	b29a      	uxth	r2, r3
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007350:	b29a      	uxth	r2, r3
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	e054      	b.n	8007402 <USB_EPStartXfer+0x250>
 8007358:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800735c:	2b3e      	cmp	r3, #62	; 0x3e
 800735e:	d817      	bhi.n	8007390 <USB_EPStartXfer+0x1de>
 8007360:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007364:	085b      	lsrs	r3, r3, #1
 8007366:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800736a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <USB_EPStartXfer+0x1ce>
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737a:	3301      	adds	r3, #1
 800737c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007384:	b29b      	uxth	r3, r3
 8007386:	029b      	lsls	r3, r3, #10
 8007388:	b29a      	uxth	r2, r3
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	801a      	strh	r2, [r3, #0]
 800738e:	e038      	b.n	8007402 <USB_EPStartXfer+0x250>
 8007390:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800739a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800739e:	f003 031f 	and.w	r3, r3, #31
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d104      	bne.n	80073b0 <USB_EPStartXfer+0x1fe>
 80073a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073aa:	3b01      	subs	r3, #1
 80073ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80073b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	029b      	lsls	r3, r3, #10
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	801a      	strh	r2, [r3, #0]
 80073c8:	e01b      	b.n	8007402 <USB_EPStartXfer+0x250>
 80073ca:	463b      	mov	r3, r7
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	785b      	ldrb	r3, [r3, #1]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d116      	bne.n	8007402 <USB_EPStartXfer+0x250>
 80073d4:	1d3b      	adds	r3, r7, #4
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073dc:	b29b      	uxth	r3, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e2:	4413      	add	r3, r2
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
 80073e6:	463b      	mov	r3, r7
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	00da      	lsls	r2, r3, #3
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	4413      	add	r3, r2
 80073f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073f6:	633b      	str	r3, [r7, #48]	; 0x30
 80073f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007402:	463b      	mov	r3, r7
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	895b      	ldrh	r3, [r3, #10]
 8007408:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800740c:	463b      	mov	r3, r7
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6959      	ldr	r1, [r3, #20]
 8007412:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007416:	b29b      	uxth	r3, r3
 8007418:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800741c:	1d38      	adds	r0, r7, #4
 800741e:	6800      	ldr	r0, [r0, #0]
 8007420:	f001 f93c 	bl	800869c <USB_WritePMA>
            ep->xfer_buff += len;
 8007424:	463b      	mov	r3, r7
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695a      	ldr	r2, [r3, #20]
 800742a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800742e:	441a      	add	r2, r3
 8007430:	463b      	mov	r3, r7
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007436:	463b      	mov	r3, r7
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6a1a      	ldr	r2, [r3, #32]
 800743c:	463b      	mov	r3, r7
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	429a      	cmp	r2, r3
 8007444:	d90e      	bls.n	8007464 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8007446:	463b      	mov	r3, r7
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8007450:	463b      	mov	r3, r7
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6a1a      	ldr	r2, [r3, #32]
 8007456:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800745a:	1ad2      	subs	r2, r2, r3
 800745c:	463b      	mov	r3, r7
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	621a      	str	r2, [r3, #32]
 8007462:	e008      	b.n	8007476 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007464:	463b      	mov	r3, r7
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800746e:	463b      	mov	r3, r7
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2200      	movs	r2, #0
 8007474:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007476:	463b      	mov	r3, r7
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	785b      	ldrb	r3, [r3, #1]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d164      	bne.n	800754a <USB_EPStartXfer+0x398>
 8007480:	1d3b      	adds	r3, r7, #4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	1d3b      	adds	r3, r7, #4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800748e:	b29b      	uxth	r3, r3
 8007490:	461a      	mov	r2, r3
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	61fb      	str	r3, [r7, #28]
 8007498:	463b      	mov	r3, r7
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	00da      	lsls	r2, r3, #3
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4413      	add	r3, r2
 80074a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d112      	bne.n	80074d8 <USB_EPStartXfer+0x326>
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074bc:	b29a      	uxth	r2, r3
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	801a      	strh	r2, [r3, #0]
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	801a      	strh	r2, [r3, #0]
 80074d6:	e057      	b.n	8007588 <USB_EPStartXfer+0x3d6>
 80074d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074dc:	2b3e      	cmp	r3, #62	; 0x3e
 80074de:	d817      	bhi.n	8007510 <USB_EPStartXfer+0x35e>
 80074e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074e4:	085b      	lsrs	r3, r3, #1
 80074e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80074ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <USB_EPStartXfer+0x34e>
 80074f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80074fa:	3301      	adds	r3, #1
 80074fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007500:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007504:	b29b      	uxth	r3, r3
 8007506:	029b      	lsls	r3, r3, #10
 8007508:	b29a      	uxth	r2, r3
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	e03b      	b.n	8007588 <USB_EPStartXfer+0x3d6>
 8007510:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800751a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800751e:	f003 031f 	and.w	r3, r3, #31
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <USB_EPStartXfer+0x37e>
 8007526:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800752a:	3b01      	subs	r3, #1
 800752c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007530:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007534:	b29b      	uxth	r3, r3
 8007536:	029b      	lsls	r3, r3, #10
 8007538:	b29b      	uxth	r3, r3
 800753a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007542:	b29a      	uxth	r2, r3
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	e01e      	b.n	8007588 <USB_EPStartXfer+0x3d6>
 800754a:	463b      	mov	r3, r7
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d119      	bne.n	8007588 <USB_EPStartXfer+0x3d6>
 8007554:	1d3b      	adds	r3, r7, #4
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
 800755a:	1d3b      	adds	r3, r7, #4
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007562:	b29b      	uxth	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	4413      	add	r3, r2
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
 800756c:	463b      	mov	r3, r7
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	00da      	lsls	r2, r3, #3
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	4413      	add	r3, r2
 8007578:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800757c:	623b      	str	r3, [r7, #32]
 800757e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007582:	b29a      	uxth	r2, r3
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007588:	463b      	mov	r3, r7
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	891b      	ldrh	r3, [r3, #8]
 800758e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6959      	ldr	r1, [r3, #20]
 8007598:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800759c:	b29b      	uxth	r3, r3
 800759e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80075a2:	1d38      	adds	r0, r7, #4
 80075a4:	6800      	ldr	r0, [r0, #0]
 80075a6:	f001 f879 	bl	800869c <USB_WritePMA>
 80075aa:	e340      	b.n	8007c2e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075ac:	463b      	mov	r3, r7
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	785b      	ldrb	r3, [r3, #1]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d164      	bne.n	8007680 <USB_EPStartXfer+0x4ce>
 80075b6:	1d3b      	adds	r3, r7, #4
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075bc:	1d3b      	adds	r3, r7, #4
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ca:	4413      	add	r3, r2
 80075cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ce:	463b      	mov	r3, r7
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	00da      	lsls	r2, r3, #3
 80075d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d8:	4413      	add	r3, r2
 80075da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075de:	64bb      	str	r3, [r7, #72]	; 0x48
 80075e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d112      	bne.n	800760e <USB_EPStartXfer+0x45c>
 80075e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007606:	b29a      	uxth	r2, r3
 8007608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	e057      	b.n	80076be <USB_EPStartXfer+0x50c>
 800760e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007612:	2b3e      	cmp	r3, #62	; 0x3e
 8007614:	d817      	bhi.n	8007646 <USB_EPStartXfer+0x494>
 8007616:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007620:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d004      	beq.n	8007636 <USB_EPStartXfer+0x484>
 800762c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007630:	3301      	adds	r3, #1
 8007632:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800763a:	b29b      	uxth	r3, r3
 800763c:	029b      	lsls	r3, r3, #10
 800763e:	b29a      	uxth	r2, r3
 8007640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007642:	801a      	strh	r2, [r3, #0]
 8007644:	e03b      	b.n	80076be <USB_EPStartXfer+0x50c>
 8007646:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800764a:	095b      	lsrs	r3, r3, #5
 800764c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007654:	f003 031f 	and.w	r3, r3, #31
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <USB_EPStartXfer+0x4b4>
 800765c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007660:	3b01      	subs	r3, #1
 8007662:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800766a:	b29b      	uxth	r3, r3
 800766c:	029b      	lsls	r3, r3, #10
 800766e:	b29b      	uxth	r3, r3
 8007670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007678:	b29a      	uxth	r2, r3
 800767a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e01e      	b.n	80076be <USB_EPStartXfer+0x50c>
 8007680:	463b      	mov	r3, r7
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d119      	bne.n	80076be <USB_EPStartXfer+0x50c>
 800768a:	1d3b      	adds	r3, r7, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	657b      	str	r3, [r7, #84]	; 0x54
 8007690:	1d3b      	adds	r3, r7, #4
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007698:	b29b      	uxth	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800769e:	4413      	add	r3, r2
 80076a0:	657b      	str	r3, [r7, #84]	; 0x54
 80076a2:	463b      	mov	r3, r7
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	00da      	lsls	r2, r3, #3
 80076aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ac:	4413      	add	r3, r2
 80076ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076b2:	653b      	str	r3, [r7, #80]	; 0x50
 80076b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076be:	463b      	mov	r3, r7
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	891b      	ldrh	r3, [r3, #8]
 80076c4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076c8:	463b      	mov	r3, r7
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6959      	ldr	r1, [r3, #20]
 80076ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80076d8:	1d38      	adds	r0, r7, #4
 80076da:	6800      	ldr	r0, [r0, #0]
 80076dc:	f000 ffde 	bl	800869c <USB_WritePMA>
            ep->xfer_buff += len;
 80076e0:	463b      	mov	r3, r7
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695a      	ldr	r2, [r3, #20]
 80076e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076ea:	441a      	add	r2, r3
 80076ec:	463b      	mov	r3, r7
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076f2:	463b      	mov	r3, r7
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6a1a      	ldr	r2, [r3, #32]
 80076f8:	463b      	mov	r3, r7
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d90e      	bls.n	8007720 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8007702:	463b      	mov	r3, r7
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800770c:	463b      	mov	r3, r7
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6a1a      	ldr	r2, [r3, #32]
 8007712:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007716:	1ad2      	subs	r2, r2, r3
 8007718:	463b      	mov	r3, r7
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	621a      	str	r2, [r3, #32]
 800771e:	e008      	b.n	8007732 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8007720:	463b      	mov	r3, r7
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800772a:	463b      	mov	r3, r7
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2200      	movs	r2, #0
 8007730:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007732:	1d3b      	adds	r3, r7, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	647b      	str	r3, [r7, #68]	; 0x44
 8007738:	463b      	mov	r3, r7
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d164      	bne.n	800780c <USB_EPStartXfer+0x65a>
 8007742:	1d3b      	adds	r3, r7, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007748:	1d3b      	adds	r3, r7, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007750:	b29b      	uxth	r3, r3
 8007752:	461a      	mov	r2, r3
 8007754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007756:	4413      	add	r3, r2
 8007758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800775a:	463b      	mov	r3, r7
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	00da      	lsls	r2, r3, #3
 8007762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007764:	4413      	add	r3, r2
 8007766:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800776a:	63bb      	str	r3, [r7, #56]	; 0x38
 800776c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007770:	2b00      	cmp	r3, #0
 8007772:	d112      	bne.n	800779a <USB_EPStartXfer+0x5e8>
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800777e:	b29a      	uxth	r2, r3
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	801a      	strh	r2, [r3, #0]
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800778e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007792:	b29a      	uxth	r2, r3
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	e054      	b.n	8007844 <USB_EPStartXfer+0x692>
 800779a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800779e:	2b3e      	cmp	r3, #62	; 0x3e
 80077a0:	d817      	bhi.n	80077d2 <USB_EPStartXfer+0x620>
 80077a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <USB_EPStartXfer+0x610>
 80077b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077bc:	3301      	adds	r3, #1
 80077be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	029b      	lsls	r3, r3, #10
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	e038      	b.n	8007844 <USB_EPStartXfer+0x692>
 80077d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077d6:	095b      	lsrs	r3, r3, #5
 80077d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077e0:	f003 031f 	and.w	r3, r3, #31
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <USB_EPStartXfer+0x640>
 80077e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077ec:	3b01      	subs	r3, #1
 80077ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	029b      	lsls	r3, r3, #10
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007804:	b29a      	uxth	r2, r3
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	e01b      	b.n	8007844 <USB_EPStartXfer+0x692>
 800780c:	463b      	mov	r3, r7
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d116      	bne.n	8007844 <USB_EPStartXfer+0x692>
 8007816:	1d3b      	adds	r3, r7, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781e:	b29b      	uxth	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007824:	4413      	add	r3, r2
 8007826:	647b      	str	r3, [r7, #68]	; 0x44
 8007828:	463b      	mov	r3, r7
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	00da      	lsls	r2, r3, #3
 8007830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007832:	4413      	add	r3, r2
 8007834:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007838:	643b      	str	r3, [r7, #64]	; 0x40
 800783a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800783e:	b29a      	uxth	r2, r3
 8007840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007842:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007844:	463b      	mov	r3, r7
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	895b      	ldrh	r3, [r3, #10]
 800784a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800784e:	463b      	mov	r3, r7
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6959      	ldr	r1, [r3, #20]
 8007854:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007858:	b29b      	uxth	r3, r3
 800785a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800785e:	1d38      	adds	r0, r7, #4
 8007860:	6800      	ldr	r0, [r0, #0]
 8007862:	f000 ff1b 	bl	800869c <USB_WritePMA>
 8007866:	e1e2      	b.n	8007c2e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8007868:	463b      	mov	r3, r7
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007872:	1d3b      	adds	r3, r7, #4
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	463b      	mov	r3, r7
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007890:	1d3b      	adds	r3, r7, #4
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	463b      	mov	r3, r7
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	441a      	add	r2, r3
 800789e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80078a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078b6:	1d3b      	adds	r3, r7, #4
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	663b      	str	r3, [r7, #96]	; 0x60
 80078bc:	1d3b      	adds	r3, r7, #4
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078ca:	4413      	add	r3, r2
 80078cc:	663b      	str	r3, [r7, #96]	; 0x60
 80078ce:	463b      	mov	r3, r7
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	00da      	lsls	r2, r3, #3
 80078d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078d8:	4413      	add	r3, r2
 80078da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078ea:	463b      	mov	r3, r7
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	891b      	ldrh	r3, [r3, #8]
 80078f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078f4:	463b      	mov	r3, r7
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6959      	ldr	r1, [r3, #20]
 80078fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007904:	1d38      	adds	r0, r7, #4
 8007906:	6800      	ldr	r0, [r0, #0]
 8007908:	f000 fec8 	bl	800869c <USB_WritePMA>
 800790c:	e18f      	b.n	8007c2e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800790e:	1d3b      	adds	r3, r7, #4
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	463b      	mov	r3, r7
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 808f 	beq.w	8007a48 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800792a:	1d3b      	adds	r3, r7, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007930:	463b      	mov	r3, r7
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d164      	bne.n	8007a04 <USB_EPStartXfer+0x852>
 800793a:	1d3b      	adds	r3, r7, #4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	673b      	str	r3, [r7, #112]	; 0x70
 8007940:	1d3b      	adds	r3, r7, #4
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007948:	b29b      	uxth	r3, r3
 800794a:	461a      	mov	r2, r3
 800794c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800794e:	4413      	add	r3, r2
 8007950:	673b      	str	r3, [r7, #112]	; 0x70
 8007952:	463b      	mov	r3, r7
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	00da      	lsls	r2, r3, #3
 800795a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800795c:	4413      	add	r3, r2
 800795e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007964:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007968:	2b00      	cmp	r3, #0
 800796a:	d112      	bne.n	8007992 <USB_EPStartXfer+0x7e0>
 800796c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	b29b      	uxth	r3, r3
 8007972:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007976:	b29a      	uxth	r2, r3
 8007978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798a:	b29a      	uxth	r2, r3
 800798c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798e:	801a      	strh	r2, [r3, #0]
 8007990:	e054      	b.n	8007a3c <USB_EPStartXfer+0x88a>
 8007992:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007996:	2b3e      	cmp	r3, #62	; 0x3e
 8007998:	d817      	bhi.n	80079ca <USB_EPStartXfer+0x818>
 800799a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800799e:	085b      	lsrs	r3, r3, #1
 80079a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80079a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <USB_EPStartXfer+0x808>
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b4:	3301      	adds	r3, #1
 80079b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80079ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079be:	b29b      	uxth	r3, r3
 80079c0:	029b      	lsls	r3, r3, #10
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	e038      	b.n	8007a3c <USB_EPStartXfer+0x88a>
 80079ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079ce:	095b      	lsrs	r3, r3, #5
 80079d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80079d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <USB_EPStartXfer+0x838>
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e4:	3b01      	subs	r3, #1
 80079e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80079ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	029b      	lsls	r3, r3, #10
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	e01b      	b.n	8007a3c <USB_EPStartXfer+0x88a>
 8007a04:	463b      	mov	r3, r7
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d116      	bne.n	8007a3c <USB_EPStartXfer+0x88a>
 8007a0e:	1d3b      	adds	r3, r7, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a1c:	4413      	add	r3, r2
 8007a1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a20:	463b      	mov	r3, r7
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	00da      	lsls	r2, r3, #3
 8007a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a30:	677b      	str	r3, [r7, #116]	; 0x74
 8007a32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007a3c:	463b      	mov	r3, r7
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	895b      	ldrh	r3, [r3, #10]
 8007a42:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8007a46:	e097      	b.n	8007b78 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a48:	463b      	mov	r3, r7
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	785b      	ldrb	r3, [r3, #1]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d168      	bne.n	8007b24 <USB_EPStartXfer+0x972>
 8007a52:	1d3b      	adds	r3, r7, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a5a:	1d3b      	adds	r3, r7, #4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a70:	463b      	mov	r3, r7
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	00da      	lsls	r2, r3, #3
 8007a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d112      	bne.n	8007ab2 <USB_EPStartXfer+0x900>
 8007a8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a9a:	801a      	strh	r2, [r3, #0]
 8007a9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007aae:	801a      	strh	r2, [r3, #0]
 8007ab0:	e05d      	b.n	8007b6e <USB_EPStartXfer+0x9bc>
 8007ab2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ab6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ab8:	d817      	bhi.n	8007aea <USB_EPStartXfer+0x938>
 8007aba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007abe:	085b      	lsrs	r3, r3, #1
 8007ac0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ac4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <USB_EPStartXfer+0x928>
 8007ad0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ada:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	029b      	lsls	r3, r3, #10
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ae6:	801a      	strh	r2, [r3, #0]
 8007ae8:	e041      	b.n	8007b6e <USB_EPStartXfer+0x9bc>
 8007aea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007aee:	095b      	lsrs	r3, r3, #5
 8007af0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007af4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007af8:	f003 031f 	and.w	r3, r3, #31
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d104      	bne.n	8007b0a <USB_EPStartXfer+0x958>
 8007b00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b04:	3b01      	subs	r3, #1
 8007b06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	029b      	lsls	r3, r3, #10
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	e024      	b.n	8007b6e <USB_EPStartXfer+0x9bc>
 8007b24:	463b      	mov	r3, r7
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d11f      	bne.n	8007b6e <USB_EPStartXfer+0x9bc>
 8007b2e:	1d3b      	adds	r3, r7, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b36:	1d3b      	adds	r3, r7, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b46:	4413      	add	r3, r2
 8007b48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	00da      	lsls	r2, r3, #3
 8007b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b58:	4413      	add	r3, r2
 8007b5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b6e:	463b      	mov	r3, r7
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	891b      	ldrh	r3, [r3, #8]
 8007b74:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b78:	463b      	mov	r3, r7
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6959      	ldr	r1, [r3, #20]
 8007b7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007b88:	1d38      	adds	r0, r7, #4
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	f000 fd86 	bl	800869c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007b90:	463b      	mov	r3, r7
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	785b      	ldrb	r3, [r3, #1]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d122      	bne.n	8007be0 <USB_EPStartXfer+0xa2e>
 8007b9a:	1d3b      	adds	r3, r7, #4
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007bb8:	1d3b      	adds	r3, r7, #4
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	463b      	mov	r3, r7
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	441a      	add	r2, r3
 8007bc6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	8013      	strh	r3, [r2, #0]
 8007bde:	e026      	b.n	8007c2e <USB_EPStartXfer+0xa7c>
 8007be0:	463b      	mov	r3, r7
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d121      	bne.n	8007c2e <USB_EPStartXfer+0xa7c>
 8007bea:	1d3b      	adds	r3, r7, #4
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	463b      	mov	r3, r7
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c04:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007c08:	1d3b      	adds	r3, r7, #4
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	441a      	add	r2, r3
 8007c16:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007c2e:	1d3b      	adds	r3, r7, #4
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	463b      	mov	r3, r7
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	f107 020e 	add.w	r2, r7, #14
 8007c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c4c:	8013      	strh	r3, [r2, #0]
 8007c4e:	f107 030e 	add.w	r3, r7, #14
 8007c52:	f107 020e 	add.w	r2, r7, #14
 8007c56:	8812      	ldrh	r2, [r2, #0]
 8007c58:	f082 0210 	eor.w	r2, r2, #16
 8007c5c:	801a      	strh	r2, [r3, #0]
 8007c5e:	f107 030e 	add.w	r3, r7, #14
 8007c62:	f107 020e 	add.w	r2, r7, #14
 8007c66:	8812      	ldrh	r2, [r2, #0]
 8007c68:	f082 0220 	eor.w	r2, r2, #32
 8007c6c:	801a      	strh	r2, [r3, #0]
 8007c6e:	1d3b      	adds	r3, r7, #4
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	463b      	mov	r3, r7
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	441a      	add	r2, r3
 8007c7c:	f107 030e 	add.w	r3, r7, #14
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]
 8007c96:	e3b5      	b.n	8008404 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007c98:	463b      	mov	r3, r7
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	7b1b      	ldrb	r3, [r3, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 8090 	bne.w	8007dc4 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8007ca4:	463b      	mov	r3, r7
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	463b      	mov	r3, r7
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d90e      	bls.n	8007cd2 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	699a      	ldr	r2, [r3, #24]
 8007cc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cc8:	1ad2      	subs	r2, r2, r3
 8007cca:	463b      	mov	r3, r7
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	619a      	str	r2, [r3, #24]
 8007cd0:	e008      	b.n	8007ce4 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8007cd2:	463b      	mov	r3, r7
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8007cdc:	463b      	mov	r3, r7
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007ce4:	1d3b      	adds	r3, r7, #4
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cec:	1d3b      	adds	r3, r7, #4
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d02:	463b      	mov	r3, r7
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	00da      	lsls	r2, r3, #3
 8007d0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d0e:	4413      	add	r3, r2
 8007d10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d116      	bne.n	8007d4e <USB_EPStartXfer+0xb9c>
 8007d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d32:	801a      	strh	r2, [r3, #0]
 8007d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	e32c      	b.n	80083a8 <USB_EPStartXfer+0x11f6>
 8007d4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d52:	2b3e      	cmp	r3, #62	; 0x3e
 8007d54:	d818      	bhi.n	8007d88 <USB_EPStartXfer+0xbd6>
 8007d56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d004      	beq.n	8007d76 <USB_EPStartXfer+0xbc4>
 8007d6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d70:	3301      	adds	r3, #1
 8007d72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	029b      	lsls	r3, r3, #10
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d84:	801a      	strh	r2, [r3, #0]
 8007d86:	e30f      	b.n	80083a8 <USB_EPStartXfer+0x11f6>
 8007d88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d96:	f003 031f 	and.w	r3, r3, #31
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d104      	bne.n	8007da8 <USB_EPStartXfer+0xbf6>
 8007d9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007da2:	3b01      	subs	r3, #1
 8007da4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007da8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	029b      	lsls	r3, r3, #10
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	e2f1      	b.n	80083a8 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007dc4:	463b      	mov	r3, r7
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	78db      	ldrb	r3, [r3, #3]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	f040 818f 	bne.w	80080ee <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007dd0:	463b      	mov	r3, r7
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	785b      	ldrb	r3, [r3, #1]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d175      	bne.n	8007ec6 <USB_EPStartXfer+0xd14>
 8007dda:	1d3b      	adds	r3, r7, #4
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007de2:	1d3b      	adds	r3, r7, #4
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007df2:	4413      	add	r3, r2
 8007df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007df8:	463b      	mov	r3, r7
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	00da      	lsls	r2, r3, #3
 8007e00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e04:	4413      	add	r3, r2
 8007e06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e0e:	463b      	mov	r3, r7
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d116      	bne.n	8007e46 <USB_EPStartXfer+0xc94>
 8007e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e2a:	801a      	strh	r2, [r3, #0]
 8007e2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	e065      	b.n	8007f12 <USB_EPStartXfer+0xd60>
 8007e46:	463b      	mov	r3, r7
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e4e:	d81a      	bhi.n	8007e86 <USB_EPStartXfer+0xcd4>
 8007e50:	463b      	mov	r3, r7
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	085b      	lsrs	r3, r3, #1
 8007e58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <USB_EPStartXfer+0xcc2>
 8007e6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e6e:	3301      	adds	r3, #1
 8007e70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	029b      	lsls	r3, r3, #10
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e82:	801a      	strh	r2, [r3, #0]
 8007e84:	e045      	b.n	8007f12 <USB_EPStartXfer+0xd60>
 8007e86:	463b      	mov	r3, r7
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e92:	463b      	mov	r3, r7
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f003 031f 	and.w	r3, r3, #31
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d104      	bne.n	8007eaa <USB_EPStartXfer+0xcf8>
 8007ea0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007eaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	029b      	lsls	r3, r3, #10
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	e025      	b.n	8007f12 <USB_EPStartXfer+0xd60>
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	785b      	ldrb	r3, [r3, #1]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d120      	bne.n	8007f12 <USB_EPStartXfer+0xd60>
 8007ed0:	1d3b      	adds	r3, r7, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ed8:	1d3b      	adds	r3, r7, #4
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ee8:	4413      	add	r3, r2
 8007eea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007eee:	463b      	mov	r3, r7
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	00da      	lsls	r2, r3, #3
 8007ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007efa:	4413      	add	r3, r2
 8007efc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f04:	463b      	mov	r3, r7
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f10:	801a      	strh	r2, [r3, #0]
 8007f12:	1d3b      	adds	r3, r7, #4
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d175      	bne.n	8008010 <USB_EPStartXfer+0xe5e>
 8007f24:	1d3b      	adds	r3, r7, #4
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f2c:	1d3b      	adds	r3, r7, #4
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f42:	463b      	mov	r3, r7
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	00da      	lsls	r2, r3, #3
 8007f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f4e:	4413      	add	r3, r2
 8007f50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f58:	463b      	mov	r3, r7
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d116      	bne.n	8007f90 <USB_EPStartXfer+0xdde>
 8007f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f8c:	801a      	strh	r2, [r3, #0]
 8007f8e:	e061      	b.n	8008054 <USB_EPStartXfer+0xea2>
 8007f90:	463b      	mov	r3, r7
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	2b3e      	cmp	r3, #62	; 0x3e
 8007f98:	d81a      	bhi.n	8007fd0 <USB_EPStartXfer+0xe1e>
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	085b      	lsrs	r3, r3, #1
 8007fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fa6:	463b      	mov	r3, r7
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <USB_EPStartXfer+0xe0c>
 8007fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb8:	3301      	adds	r3, #1
 8007fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	029b      	lsls	r3, r3, #10
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fcc:	801a      	strh	r2, [r3, #0]
 8007fce:	e041      	b.n	8008054 <USB_EPStartXfer+0xea2>
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fdc:	463b      	mov	r3, r7
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 031f 	and.w	r3, r3, #31
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d104      	bne.n	8007ff4 <USB_EPStartXfer+0xe42>
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	029b      	lsls	r3, r3, #10
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008006:	b29a      	uxth	r2, r3
 8008008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800800c:	801a      	strh	r2, [r3, #0]
 800800e:	e021      	b.n	8008054 <USB_EPStartXfer+0xea2>
 8008010:	463b      	mov	r3, r7
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d11c      	bne.n	8008054 <USB_EPStartXfer+0xea2>
 800801a:	1d3b      	adds	r3, r7, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008022:	b29b      	uxth	r3, r3
 8008024:	461a      	mov	r2, r3
 8008026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800802a:	4413      	add	r3, r2
 800802c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008030:	463b      	mov	r3, r7
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	00da      	lsls	r2, r3, #3
 8008038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800803c:	4413      	add	r3, r2
 800803e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008046:	463b      	mov	r3, r7
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	b29a      	uxth	r2, r3
 800804e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008052:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8008054:	463b      	mov	r3, r7
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 81a4 	beq.w	80083a8 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008060:	1d3b      	adds	r3, r7, #4
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	463b      	mov	r3, r7
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008074:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <USB_EPStartXfer+0xeda>
 8008080:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10d      	bne.n	80080a8 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800808c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008094:	2b00      	cmp	r3, #0
 8008096:	f040 8187 	bne.w	80083a8 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800809a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800809e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f040 8180 	bne.w	80083a8 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80080a8:	1d3b      	adds	r3, r7, #4
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	463b      	mov	r3, r7
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80080c6:	1d3b      	adds	r3, r7, #4
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	463b      	mov	r3, r7
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	441a      	add	r2, r3
 80080d4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80080d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	8013      	strh	r3, [r2, #0]
 80080ec:	e15c      	b.n	80083a8 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80080ee:	463b      	mov	r3, r7
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	78db      	ldrb	r3, [r3, #3]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	f040 8155 	bne.w	80083a4 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80080fa:	463b      	mov	r3, r7
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	463b      	mov	r3, r7
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	429a      	cmp	r2, r3
 8008108:	d90e      	bls.n	8008128 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800810a:	463b      	mov	r3, r7
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8008114:	463b      	mov	r3, r7
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699a      	ldr	r2, [r3, #24]
 800811a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800811e:	1ad2      	subs	r2, r2, r3
 8008120:	463b      	mov	r3, r7
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	619a      	str	r2, [r3, #24]
 8008126:	e008      	b.n	800813a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8008128:	463b      	mov	r3, r7
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8008132:	463b      	mov	r3, r7
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2200      	movs	r2, #0
 8008138:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800813a:	463b      	mov	r3, r7
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d16f      	bne.n	8008224 <USB_EPStartXfer+0x1072>
 8008144:	1d3b      	adds	r3, r7, #4
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800814c:	1d3b      	adds	r3, r7, #4
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008154:	b29b      	uxth	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800815c:	4413      	add	r3, r2
 800815e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008162:	463b      	mov	r3, r7
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	00da      	lsls	r2, r3, #3
 800816a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800816e:	4413      	add	r3, r2
 8008170:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008174:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008178:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800817c:	2b00      	cmp	r3, #0
 800817e:	d116      	bne.n	80081ae <USB_EPStartXfer+0xffc>
 8008180:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800818c:	b29a      	uxth	r2, r3
 800818e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081aa:	801a      	strh	r2, [r3, #0]
 80081ac:	e05f      	b.n	800826e <USB_EPStartXfer+0x10bc>
 80081ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081b2:	2b3e      	cmp	r3, #62	; 0x3e
 80081b4:	d818      	bhi.n	80081e8 <USB_EPStartXfer+0x1036>
 80081b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081ba:	085b      	lsrs	r3, r3, #1
 80081bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <USB_EPStartXfer+0x1024>
 80081cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d0:	3301      	adds	r3, #1
 80081d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081da:	b29b      	uxth	r3, r3
 80081dc:	029b      	lsls	r3, r3, #10
 80081de:	b29a      	uxth	r2, r3
 80081e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081e4:	801a      	strh	r2, [r3, #0]
 80081e6:	e042      	b.n	800826e <USB_EPStartXfer+0x10bc>
 80081e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081f6:	f003 031f 	and.w	r3, r3, #31
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <USB_EPStartXfer+0x1056>
 80081fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008202:	3b01      	subs	r3, #1
 8008204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800820c:	b29b      	uxth	r3, r3
 800820e:	029b      	lsls	r3, r3, #10
 8008210:	b29b      	uxth	r3, r3
 8008212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821a:	b29a      	uxth	r2, r3
 800821c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008220:	801a      	strh	r2, [r3, #0]
 8008222:	e024      	b.n	800826e <USB_EPStartXfer+0x10bc>
 8008224:	463b      	mov	r3, r7
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d11f      	bne.n	800826e <USB_EPStartXfer+0x10bc>
 800822e:	1d3b      	adds	r3, r7, #4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008236:	1d3b      	adds	r3, r7, #4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800823e:	b29b      	uxth	r3, r3
 8008240:	461a      	mov	r2, r3
 8008242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008246:	4413      	add	r3, r2
 8008248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800824c:	463b      	mov	r3, r7
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	00da      	lsls	r2, r3, #3
 8008254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008258:	4413      	add	r3, r2
 800825a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800825e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008262:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008266:	b29a      	uxth	r2, r3
 8008268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800826c:	801a      	strh	r2, [r3, #0]
 800826e:	1d3b      	adds	r3, r7, #4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008276:	463b      	mov	r3, r7
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d16f      	bne.n	8008360 <USB_EPStartXfer+0x11ae>
 8008280:	1d3b      	adds	r3, r7, #4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008290:	b29b      	uxth	r3, r3
 8008292:	461a      	mov	r2, r3
 8008294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008298:	4413      	add	r3, r2
 800829a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800829e:	463b      	mov	r3, r7
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	00da      	lsls	r2, r3, #3
 80082a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082aa:	4413      	add	r3, r2
 80082ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d116      	bne.n	80082ea <USB_EPStartXfer+0x1138>
 80082bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082e6:	801a      	strh	r2, [r3, #0]
 80082e8:	e05e      	b.n	80083a8 <USB_EPStartXfer+0x11f6>
 80082ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082ee:	2b3e      	cmp	r3, #62	; 0x3e
 80082f0:	d818      	bhi.n	8008324 <USB_EPStartXfer+0x1172>
 80082f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082f6:	085b      	lsrs	r3, r3, #1
 80082f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80082fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <USB_EPStartXfer+0x1160>
 8008308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800830c:	3301      	adds	r3, #1
 800830e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008316:	b29b      	uxth	r3, r3
 8008318:	029b      	lsls	r3, r3, #10
 800831a:	b29a      	uxth	r2, r3
 800831c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008320:	801a      	strh	r2, [r3, #0]
 8008322:	e041      	b.n	80083a8 <USB_EPStartXfer+0x11f6>
 8008324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008328:	095b      	lsrs	r3, r3, #5
 800832a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800832e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008332:	f003 031f 	and.w	r3, r3, #31
 8008336:	2b00      	cmp	r3, #0
 8008338:	d104      	bne.n	8008344 <USB_EPStartXfer+0x1192>
 800833a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800833e:	3b01      	subs	r3, #1
 8008340:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008348:	b29b      	uxth	r3, r3
 800834a:	029b      	lsls	r3, r3, #10
 800834c:	b29b      	uxth	r3, r3
 800834e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008356:	b29a      	uxth	r2, r3
 8008358:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800835c:	801a      	strh	r2, [r3, #0]
 800835e:	e023      	b.n	80083a8 <USB_EPStartXfer+0x11f6>
 8008360:	463b      	mov	r3, r7
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d11e      	bne.n	80083a8 <USB_EPStartXfer+0x11f6>
 800836a:	1d3b      	adds	r3, r7, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008372:	b29b      	uxth	r3, r3
 8008374:	461a      	mov	r2, r3
 8008376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800837a:	4413      	add	r3, r2
 800837c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008380:	463b      	mov	r3, r7
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	00da      	lsls	r2, r3, #3
 8008388:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800838c:	4413      	add	r3, r2
 800838e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008392:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008396:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800839a:	b29a      	uxth	r2, r3
 800839c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	e001      	b.n	80083a8 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e02e      	b.n	8008406 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083a8:	1d3b      	adds	r3, r7, #4
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	463b      	mov	r3, r7
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80083c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80083ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083ce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80083d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80083d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083da:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80083de:	1d3b      	adds	r3, r7, #4
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	463b      	mov	r3, r7
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	441a      	add	r2, r3
 80083ec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80083f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008400:	b29b      	uxth	r3, r3
 8008402:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d020      	beq.n	8008464 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008438:	81bb      	strh	r3, [r7, #12]
 800843a:	89bb      	ldrh	r3, [r7, #12]
 800843c:	f083 0310 	eor.w	r3, r3, #16
 8008440:	81bb      	strh	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	441a      	add	r2, r3
 800844c:	89bb      	ldrh	r3, [r7, #12]
 800844e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800845a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800845e:	b29b      	uxth	r3, r3
 8008460:	8013      	strh	r3, [r2, #0]
 8008462:	e01f      	b.n	80084a4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	b29b      	uxth	r3, r3
 8008472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800847a:	81fb      	strh	r3, [r7, #14]
 800847c:	89fb      	ldrh	r3, [r7, #14]
 800847e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008482:	81fb      	strh	r3, [r7, #14]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	441a      	add	r2, r3
 800848e:	89fb      	ldrh	r3, [r7, #14]
 8008490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800849c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b087      	sub	sp, #28
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	7b1b      	ldrb	r3, [r3, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f040 809d 	bne.w	8008600 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d04c      	beq.n	8008568 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	823b      	strh	r3, [r7, #16]
 80084dc:	8a3b      	ldrh	r3, [r7, #16]
 80084de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01b      	beq.n	800851e <USB_EPClearStall+0x6c>
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fc:	81fb      	strh	r3, [r7, #14]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	441a      	add	r2, r3
 8008508:	89fb      	ldrh	r3, [r7, #14]
 800850a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800850e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008516:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800851a:	b29b      	uxth	r3, r3
 800851c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	78db      	ldrb	r3, [r3, #3]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d06c      	beq.n	8008600 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	b29b      	uxth	r3, r3
 8008534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800853c:	81bb      	strh	r3, [r7, #12]
 800853e:	89bb      	ldrh	r3, [r7, #12]
 8008540:	f083 0320 	eor.w	r3, r3, #32
 8008544:	81bb      	strh	r3, [r7, #12]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	441a      	add	r2, r3
 8008550:	89bb      	ldrh	r3, [r7, #12]
 8008552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800855a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800855e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008562:	b29b      	uxth	r3, r3
 8008564:	8013      	strh	r3, [r2, #0]
 8008566:	e04b      	b.n	8008600 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	82fb      	strh	r3, [r7, #22]
 8008576:	8afb      	ldrh	r3, [r7, #22]
 8008578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01b      	beq.n	80085b8 <USB_EPClearStall+0x106>
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b29b      	uxth	r3, r3
 800858e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008596:	82bb      	strh	r3, [r7, #20]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	441a      	add	r2, r3
 80085a2:	8abb      	ldrh	r3, [r7, #20]
 80085a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ce:	827b      	strh	r3, [r7, #18]
 80085d0:	8a7b      	ldrh	r3, [r7, #18]
 80085d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085d6:	827b      	strh	r3, [r7, #18]
 80085d8:	8a7b      	ldrh	r3, [r7, #18]
 80085da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085de:	827b      	strh	r3, [r7, #18]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	441a      	add	r2, r3
 80085ea:	8a7b      	ldrh	r3, [r7, #18]
 80085ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	371c      	adds	r7, #28
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d103      	bne.n	8008628 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2280      	movs	r2, #128	; 0x80
 8008624:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008644:	b29b      	uxth	r3, r3
 8008646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800864a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800864e:	b29a      	uxth	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008672:	b29b      	uxth	r3, r3
 8008674:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008676:	68fb      	ldr	r3, [r7, #12]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800869c:	b480      	push	{r7}
 800869e:	b08d      	sub	sp, #52	; 0x34
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	4611      	mov	r1, r2
 80086a8:	461a      	mov	r2, r3
 80086aa:	460b      	mov	r3, r1
 80086ac:	80fb      	strh	r3, [r7, #6]
 80086ae:	4613      	mov	r3, r2
 80086b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80086b2:	88bb      	ldrh	r3, [r7, #4]
 80086b4:	3301      	adds	r3, #1
 80086b6:	085b      	lsrs	r3, r3, #1
 80086b8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086c2:	88fa      	ldrh	r2, [r7, #6]
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086cc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086d2:	e01b      	b.n	800870c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	3301      	adds	r3, #1
 80086de:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	021b      	lsls	r3, r3, #8
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	461a      	mov	r2, r3
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80086fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fc:	3302      	adds	r3, #2
 80086fe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	3301      	adds	r3, #1
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008708:	3b01      	subs	r3, #1
 800870a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800870c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e0      	bne.n	80086d4 <USB_WritePMA+0x38>
  }
}
 8008712:	bf00      	nop
 8008714:	3734      	adds	r7, #52	; 0x34
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800871e:	b480      	push	{r7}
 8008720:	b08b      	sub	sp, #44	; 0x2c
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	4611      	mov	r1, r2
 800872a:	461a      	mov	r2, r3
 800872c:	460b      	mov	r3, r1
 800872e:	80fb      	strh	r3, [r7, #6]
 8008730:	4613      	mov	r3, r2
 8008732:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008734:	88bb      	ldrh	r3, [r7, #4]
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	b29b      	uxth	r3, r3
 800873a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008744:	88fa      	ldrh	r2, [r7, #6]
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800874e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
 8008754:	e018      	b.n	8008788 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	b29b      	uxth	r3, r3
 800875c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	3302      	adds	r3, #2
 8008762:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	b2da      	uxtb	r2, r3
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	3301      	adds	r3, #1
 8008770:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	0a1b      	lsrs	r3, r3, #8
 8008776:	b2da      	uxtb	r2, r3
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	3301      	adds	r3, #1
 8008780:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	3b01      	subs	r3, #1
 8008786:	627b      	str	r3, [r7, #36]	; 0x24
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e3      	bne.n	8008756 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800878e:	88bb      	ldrh	r3, [r7, #4]
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	b29b      	uxth	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	701a      	strb	r2, [r3, #0]
  }
}
 80087aa:	bf00      	nop
 80087ac:	372c      	adds	r7, #44	; 0x2c
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80087c2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80087c6:	f002 f843 	bl	800a850 <USBD_static_malloc>
 80087ca:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d105      	bne.n	80087de <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80087da:	2302      	movs	r3, #2
 80087dc:	e066      	b.n	80088ac <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	7c1b      	ldrb	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d119      	bne.n	8008822 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087f2:	2202      	movs	r2, #2
 80087f4:	2181      	movs	r1, #129	; 0x81
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 fecf 	bl	800a59a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008806:	2202      	movs	r2, #2
 8008808:	2101      	movs	r1, #1
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 fec5 	bl	800a59a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2210      	movs	r2, #16
 800881c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008820:	e016      	b.n	8008850 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008822:	2340      	movs	r3, #64	; 0x40
 8008824:	2202      	movs	r2, #2
 8008826:	2181      	movs	r1, #129	; 0x81
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f001 feb6 	bl	800a59a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008834:	2340      	movs	r3, #64	; 0x40
 8008836:	2202      	movs	r2, #2
 8008838:	2101      	movs	r1, #1
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f001 fead 	bl	800a59a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2210      	movs	r2, #16
 800884c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008850:	2308      	movs	r3, #8
 8008852:	2203      	movs	r2, #3
 8008854:	2182      	movs	r1, #130	; 0x82
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 fe9f 	bl	800a59a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	7c1b      	ldrb	r3, [r3, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d109      	bne.n	800889a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800888c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008890:	2101      	movs	r1, #1
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 ff71 	bl	800a77a <USBD_LL_PrepareReceive>
 8008898:	e007      	b.n	80088aa <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088a0:	2340      	movs	r3, #64	; 0x40
 80088a2:	2101      	movs	r1, #1
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 ff68 	bl	800a77a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80088c0:	2181      	movs	r1, #129	; 0x81
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f001 fe8f 	bl	800a5e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80088ce:	2101      	movs	r1, #1
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 fe88 	bl	800a5e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80088de:	2182      	movs	r1, #130	; 0x82
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 fe80 	bl	800a5e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00e      	beq.n	800891e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008910:	4618      	mov	r0, r3
 8008912:	f001 ffab 	bl	800a86c <USBD_static_free>
    pdev->pClassData = NULL;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008938:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800894e:	2b00      	cmp	r3, #0
 8008950:	d03a      	beq.n	80089c8 <USBD_CDC_Setup+0xa0>
 8008952:	2b20      	cmp	r3, #32
 8008954:	f040 8097 	bne.w	8008a86 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	88db      	ldrh	r3, [r3, #6]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d029      	beq.n	80089b4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b25b      	sxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	da11      	bge.n	800898e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008976:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	88d2      	ldrh	r2, [r2, #6]
 800897c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800897e:	6939      	ldr	r1, [r7, #16]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	88db      	ldrh	r3, [r3, #6]
 8008984:	461a      	mov	r2, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 fa5d 	bl	8009e46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800898c:	e082      	b.n	8008a94 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	785a      	ldrb	r2, [r3, #1]
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	88db      	ldrh	r3, [r3, #6]
 800899c:	b2da      	uxtb	r2, r3
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80089a4:	6939      	ldr	r1, [r7, #16]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	88db      	ldrh	r3, [r3, #6]
 80089aa:	461a      	mov	r2, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 fa76 	bl	8009e9e <USBD_CtlPrepareRx>
      break;
 80089b2:	e06f      	b.n	8008a94 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	7850      	ldrb	r0, [r2, #1]
 80089c0:	2200      	movs	r2, #0
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	4798      	blx	r3
      break;
 80089c6:	e065      	b.n	8008a94 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	785b      	ldrb	r3, [r3, #1]
 80089cc:	2b0b      	cmp	r3, #11
 80089ce:	d84f      	bhi.n	8008a70 <USBD_CDC_Setup+0x148>
 80089d0:	a201      	add	r2, pc, #4	; (adr r2, 80089d8 <USBD_CDC_Setup+0xb0>)
 80089d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d6:	bf00      	nop
 80089d8:	08008a09 	.word	0x08008a09
 80089dc:	08008a7f 	.word	0x08008a7f
 80089e0:	08008a71 	.word	0x08008a71
 80089e4:	08008a71 	.word	0x08008a71
 80089e8:	08008a71 	.word	0x08008a71
 80089ec:	08008a71 	.word	0x08008a71
 80089f0:	08008a71 	.word	0x08008a71
 80089f4:	08008a71 	.word	0x08008a71
 80089f8:	08008a71 	.word	0x08008a71
 80089fc:	08008a71 	.word	0x08008a71
 8008a00:	08008a31 	.word	0x08008a31
 8008a04:	08008a59 	.word	0x08008a59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d107      	bne.n	8008a22 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a12:	f107 030c 	add.w	r3, r7, #12
 8008a16:	2202      	movs	r2, #2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 fa13 	bl	8009e46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a20:	e030      	b.n	8008a84 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f99d 	bl	8009d64 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a2e:	e029      	b.n	8008a84 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d107      	bne.n	8008a4a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a3a:	f107 030f 	add.w	r3, r7, #15
 8008a3e:	2201      	movs	r2, #1
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f001 f9ff 	bl	8009e46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a48:	e01c      	b.n	8008a84 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 f989 	bl	8009d64 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a52:	2303      	movs	r3, #3
 8008a54:	75fb      	strb	r3, [r7, #23]
          break;
 8008a56:	e015      	b.n	8008a84 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d00f      	beq.n	8008a82 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f001 f97d 	bl	8009d64 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a6e:	e008      	b.n	8008a82 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 f976 	bl	8009d64 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	75fb      	strb	r3, [r7, #23]
          break;
 8008a7c:	e002      	b.n	8008a84 <USBD_CDC_Setup+0x15c>
          break;
 8008a7e:	bf00      	nop
 8008a80:	e008      	b.n	8008a94 <USBD_CDC_Setup+0x16c>
          break;
 8008a82:	bf00      	nop
      }
      break;
 8008a84:	e006      	b.n	8008a94 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 f96b 	bl	8009d64 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	75fb      	strb	r3, [r7, #23]
      break;
 8008a92:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop

08008aa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ab2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e04f      	b.n	8008b62 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ac8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008aca:	78fa      	ldrb	r2, [r7, #3]
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3318      	adds	r3, #24
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d029      	beq.n	8008b34 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	3318      	adds	r3, #24
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	78f9      	ldrb	r1, [r7, #3]
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	460b      	mov	r3, r1
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	440b      	add	r3, r1
 8008afc:	00db      	lsls	r3, r3, #3
 8008afe:	4403      	add	r3, r0
 8008b00:	3338      	adds	r3, #56	; 0x38
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b08:	fb03 f301 	mul.w	r3, r3, r1
 8008b0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d110      	bne.n	8008b34 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008b12:	78fa      	ldrb	r2, [r7, #3]
 8008b14:	6879      	ldr	r1, [r7, #4]
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	440b      	add	r3, r1
 8008b20:	3318      	adds	r3, #24
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b26:	78f9      	ldrb	r1, [r7, #3]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f001 fe03 	bl	800a738 <USBD_LL_Transmit>
 8008b32:	e015      	b.n	8008b60 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008b5c:	78fa      	ldrb	r2, [r7, #3]
 8008b5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	460b      	mov	r3, r1
 8008b74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e015      	b.n	8008bb8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b8c:	78fb      	ldrb	r3, [r7, #3]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 fe13 	bl	800a7bc <USBD_LL_GetRxDataSize>
 8008b96:	4602      	mov	r2, r0
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d015      	beq.n	8008c06 <USBD_CDC_EP0_RxReady+0x46>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008be0:	2bff      	cmp	r3, #255	; 0xff
 8008be2:	d010      	beq.n	8008c06 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008bf2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008bfa:	b292      	uxth	r2, r2
 8008bfc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	22ff      	movs	r2, #255	; 0xff
 8008c02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2243      	movs	r2, #67	; 0x43
 8008c1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008c1e:	4b03      	ldr	r3, [pc, #12]	; (8008c2c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	20000094 	.word	0x20000094

08008c30 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2243      	movs	r2, #67	; 0x43
 8008c3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008c3e:	4b03      	ldr	r3, [pc, #12]	; (8008c4c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	20000050 	.word	0x20000050

08008c50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2243      	movs	r2, #67	; 0x43
 8008c5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008c5e:	4b03      	ldr	r3, [pc, #12]	; (8008c6c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	200000d8 	.word	0x200000d8

08008c70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	220a      	movs	r2, #10
 8008c7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c7e:	4b03      	ldr	r3, [pc, #12]	; (8008c8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	2000000c 	.word	0x2000000c

08008c90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e004      	b.n	8008cae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b087      	sub	sp, #28
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ccc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cfc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e016      	b.n	8008d60 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	7c1b      	ldrb	r3, [r3, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d109      	bne.n	8008d4e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d44:	2101      	movs	r1, #1
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 fd17 	bl	800a77a <USBD_LL_PrepareReceive>
 8008d4c:	e007      	b.n	8008d5e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d54:	2340      	movs	r3, #64	; 0x40
 8008d56:	2101      	movs	r1, #1
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f001 fd0e 	bl	800a77a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	4613      	mov	r3, r2
 8008d74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e01f      	b.n	8008dc0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	79fa      	ldrb	r2, [r7, #7]
 8008db2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f001 fb75 	bl	800a4a4 <USBD_LL_Init>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e016      	b.n	8008e0e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00b      	beq.n	8008e0c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfc:	f107 020e 	add.w	r2, r7, #14
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
 8008e04:	4602      	mov	r2, r0
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 fba0 	bl	800a564 <USBD_LL_Start>
 8008e24:	4603      	mov	r3, r0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e50:	2303      	movs	r3, #3
 8008e52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d009      	beq.n	8008e72 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	4611      	mov	r1, r2
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	4798      	blx	r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d007      	beq.n	8008ea2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	78fa      	ldrb	r2, [r7, #3]
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
  }

  return USBD_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 ff16 	bl	8009cf0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ee0:	f003 031f 	and.w	r3, r3, #31
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d00e      	beq.n	8008f06 <USBD_LL_SetupStage+0x5a>
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d302      	bcc.n	8008ef2 <USBD_LL_SetupStage+0x46>
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d014      	beq.n	8008f1a <USBD_LL_SetupStage+0x6e>
 8008ef0:	e01d      	b.n	8008f2e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f9d6 	bl	80092ac <USBD_StdDevReq>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]
      break;
 8008f04:	e020      	b.n	8008f48 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa3a 	bl	8009388 <USBD_StdItfReq>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]
      break;
 8008f18:	e016      	b.n	8008f48 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa76 	bl	8009414 <USBD_StdEPReq>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2c:	e00c      	b.n	8008f48 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 fb71 	bl	800a624 <USBD_LL_StallEP>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
      break;
 8008f46:	bf00      	nop
  }

  return ret;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b086      	sub	sp, #24
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	607a      	str	r2, [r7, #4]
 8008f5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008f60:	7afb      	ldrb	r3, [r7, #11]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d137      	bne.n	8008fd6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008f6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d14a      	bne.n	800900e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d913      	bls.n	8008fac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	1ad2      	subs	r2, r2, r3
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	bf28      	it	cs
 8008f9e:	4613      	movcs	r3, r2
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 ff97 	bl	8009ed8 <USBD_CtlContinueRx>
 8008faa:	e030      	b.n	800900e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00a      	beq.n	8008fce <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d105      	bne.n	8008fce <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 ff93 	bl	8009efa <USBD_CtlSendStatus>
 8008fd4:	e01b      	b.n	800900e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d013      	beq.n	800900a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d10e      	bne.n	800900a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	7afa      	ldrb	r2, [r7, #11]
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	4798      	blx	r3
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	e002      	b.n	8009010 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800900a:	2303      	movs	r3, #3
 800900c:	e000      	b.n	8009010 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	460b      	mov	r3, r1
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d16a      	bne.n	8009102 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	3314      	adds	r3, #20
 8009030:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009038:	2b02      	cmp	r3, #2
 800903a:	d155      	bne.n	80090e8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	429a      	cmp	r2, r3
 8009046:	d914      	bls.n	8009072 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	689a      	ldr	r2, [r3, #8]
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	1ad2      	subs	r2, r2, r3
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	461a      	mov	r2, r3
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 ff0c 	bl	8009e7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009064:	2300      	movs	r3, #0
 8009066:	2200      	movs	r2, #0
 8009068:	2100      	movs	r1, #0
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f001 fb85 	bl	800a77a <USBD_LL_PrepareReceive>
 8009070:	e03a      	b.n	80090e8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	429a      	cmp	r2, r3
 800907c:	d11c      	bne.n	80090b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009086:	429a      	cmp	r2, r3
 8009088:	d316      	bcc.n	80090b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009094:	429a      	cmp	r2, r3
 8009096:	d20f      	bcs.n	80090b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009098:	2200      	movs	r2, #0
 800909a:	2100      	movs	r1, #0
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 feed 	bl	8009e7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090aa:	2300      	movs	r3, #0
 80090ac:	2200      	movs	r2, #0
 80090ae:	2100      	movs	r1, #0
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f001 fb62 	bl	800a77a <USBD_LL_PrepareReceive>
 80090b6:	e017      	b.n	80090e8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00a      	beq.n	80090da <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d105      	bne.n	80090da <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090da:	2180      	movs	r1, #128	; 0x80
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f001 faa1 	bl	800a624 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 ff1c 	bl	8009f20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d123      	bne.n	800913a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff fe9b 	bl	8008e2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009100:	e01b      	b.n	800913a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d013      	beq.n	8009136 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009114:	2b03      	cmp	r3, #3
 8009116:	d10e      	bne.n	8009136 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	7afa      	ldrb	r2, [r7, #11]
 8009122:	4611      	mov	r1, r2
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	4798      	blx	r3
 8009128:	4603      	mov	r3, r0
 800912a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	e002      	b.n	800913c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009136:	2303      	movs	r3, #3
 8009138:	e000      	b.n	800913c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009170:	2b00      	cmp	r3, #0
 8009172:	d009      	beq.n	8009188 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6852      	ldr	r2, [r2, #4]
 8009180:	b2d2      	uxtb	r2, r2
 8009182:	4611      	mov	r1, r2
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009188:	2340      	movs	r3, #64	; 0x40
 800918a:	2200      	movs	r2, #0
 800918c:	2100      	movs	r1, #0
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 fa03 	bl	800a59a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2240      	movs	r2, #64	; 0x40
 80091a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091a4:	2340      	movs	r3, #64	; 0x40
 80091a6:	2200      	movs	r2, #0
 80091a8:	2180      	movs	r1, #128	; 0x80
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f001 f9f5 	bl	800a59a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2240      	movs	r2, #64	; 0x40
 80091ba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	78fa      	ldrb	r2, [r7, #3]
 80091d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2204      	movs	r2, #4
 80091fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800921e:	2b04      	cmp	r3, #4
 8009220:	d105      	bne.n	800922e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924a:	2b03      	cmp	r3, #3
 800924c:	d10b      	bne.n	8009266 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	3301      	adds	r3, #1
 8009286:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800928e:	8a3b      	ldrh	r3, [r7, #16]
 8009290:	021b      	lsls	r3, r3, #8
 8009292:	b21a      	sxth	r2, r3
 8009294:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009298:	4313      	orrs	r3, r2
 800929a:	b21b      	sxth	r3, r3
 800929c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800929e:	89fb      	ldrh	r3, [r7, #14]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	371c      	adds	r7, #28
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092c2:	2b20      	cmp	r3, #32
 80092c4:	d004      	beq.n	80092d0 <USBD_StdDevReq+0x24>
 80092c6:	2b40      	cmp	r3, #64	; 0x40
 80092c8:	d002      	beq.n	80092d0 <USBD_StdDevReq+0x24>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <USBD_StdDevReq+0x38>
 80092ce:	e050      	b.n	8009372 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
 80092de:	4603      	mov	r3, r0
 80092e0:	73fb      	strb	r3, [r7, #15]
    break;
 80092e2:	e04b      	b.n	800937c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b09      	cmp	r3, #9
 80092ea:	d83c      	bhi.n	8009366 <USBD_StdDevReq+0xba>
 80092ec:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <USBD_StdDevReq+0x48>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	08009349 	.word	0x08009349
 80092f8:	0800935d 	.word	0x0800935d
 80092fc:	08009367 	.word	0x08009367
 8009300:	08009353 	.word	0x08009353
 8009304:	08009367 	.word	0x08009367
 8009308:	08009327 	.word	0x08009327
 800930c:	0800931d 	.word	0x0800931d
 8009310:	08009367 	.word	0x08009367
 8009314:	0800933f 	.word	0x0800933f
 8009318:	08009331 	.word	0x08009331
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f9d0 	bl	80096c4 <USBD_GetDescriptor>
      break;
 8009324:	e024      	b.n	8009370 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fb5f 	bl	80099ec <USBD_SetAddress>
      break;
 800932e:	e01f      	b.n	8009370 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fb9c 	bl	8009a70 <USBD_SetConfig>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]
      break;
 800933c:	e018      	b.n	8009370 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800933e:	6839      	ldr	r1, [r7, #0]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fc39 	bl	8009bb8 <USBD_GetConfig>
      break;
 8009346:	e013      	b.n	8009370 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fc68 	bl	8009c20 <USBD_GetStatus>
      break;
 8009350:	e00e      	b.n	8009370 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fc96 	bl	8009c86 <USBD_SetFeature>
      break;
 800935a:	e009      	b.n	8009370 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fca5 	bl	8009cae <USBD_ClrFeature>
      break;
 8009364:	e004      	b.n	8009370 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fcfb 	bl	8009d64 <USBD_CtlError>
      break;
 800936e:	bf00      	nop
    }
    break;
 8009370:	e004      	b.n	800937c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fcf5 	bl	8009d64 <USBD_CtlError>
    break;
 800937a:	bf00      	nop
  }

  return ret;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop

08009388 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800939e:	2b20      	cmp	r3, #32
 80093a0:	d003      	beq.n	80093aa <USBD_StdItfReq+0x22>
 80093a2:	2b40      	cmp	r3, #64	; 0x40
 80093a4:	d001      	beq.n	80093aa <USBD_StdItfReq+0x22>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d12a      	bne.n	8009400 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b0:	3b01      	subs	r3, #1
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d81d      	bhi.n	80093f2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	889b      	ldrh	r3, [r3, #4]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d813      	bhi.n	80093e8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	88db      	ldrh	r3, [r3, #6]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d110      	bne.n	80093fc <USBD_StdItfReq+0x74>
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10d      	bne.n	80093fc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fd8a 	bl	8009efa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80093e6:	e009      	b.n	80093fc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fcba 	bl	8009d64 <USBD_CtlError>
      break;
 80093f0:	e004      	b.n	80093fc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fcb5 	bl	8009d64 <USBD_CtlError>
      break;
 80093fa:	e000      	b.n	80093fe <USBD_StdItfReq+0x76>
      break;
 80093fc:	bf00      	nop
    }
    break;
 80093fe:	e004      	b.n	800940a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fcae 	bl	8009d64 <USBD_CtlError>
    break;
 8009408:	bf00      	nop
  }

  return ret;
 800940a:	7bfb      	ldrb	r3, [r7, #15]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	889b      	ldrh	r3, [r3, #4]
 8009426:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009430:	2b20      	cmp	r3, #32
 8009432:	d004      	beq.n	800943e <USBD_StdEPReq+0x2a>
 8009434:	2b40      	cmp	r3, #64	; 0x40
 8009436:	d002      	beq.n	800943e <USBD_StdEPReq+0x2a>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <USBD_StdEPReq+0x3e>
 800943c:	e137      	b.n	80096ae <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
 800944c:	4603      	mov	r3, r0
 800944e:	73fb      	strb	r3, [r7, #15]
    break;
 8009450:	e132      	b.n	80096b8 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d03e      	beq.n	80094d8 <USBD_StdEPReq+0xc4>
 800945a:	2b03      	cmp	r3, #3
 800945c:	d002      	beq.n	8009464 <USBD_StdEPReq+0x50>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d079      	beq.n	8009556 <USBD_StdEPReq+0x142>
 8009462:	e11e      	b.n	80096a2 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946a:	2b02      	cmp	r3, #2
 800946c:	d002      	beq.n	8009474 <USBD_StdEPReq+0x60>
 800946e:	2b03      	cmp	r3, #3
 8009470:	d015      	beq.n	800949e <USBD_StdEPReq+0x8a>
 8009472:	e02b      	b.n	80094cc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00c      	beq.n	8009494 <USBD_StdEPReq+0x80>
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	2b80      	cmp	r3, #128	; 0x80
 800947e:	d009      	beq.n	8009494 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 f8cd 	bl	800a624 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800948a:	2180      	movs	r1, #128	; 0x80
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 f8c9 	bl	800a624 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009492:	e020      	b.n	80094d6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fc64 	bl	8009d64 <USBD_CtlError>
        break;
 800949c:	e01b      	b.n	80094d6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10e      	bne.n	80094c4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <USBD_StdEPReq+0xb0>
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b80      	cmp	r3, #128	; 0x80
 80094b0:	d008      	beq.n	80094c4 <USBD_StdEPReq+0xb0>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	88db      	ldrh	r3, [r3, #6]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d104      	bne.n	80094c4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f001 f8b0 	bl	800a624 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fd18 	bl	8009efa <USBD_CtlSendStatus>

        break;
 80094ca:	e004      	b.n	80094d6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fc48 	bl	8009d64 <USBD_CtlError>
        break;
 80094d4:	bf00      	nop
      }
      break;
 80094d6:	e0e9      	b.n	80096ac <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d002      	beq.n	80094e8 <USBD_StdEPReq+0xd4>
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d015      	beq.n	8009512 <USBD_StdEPReq+0xfe>
 80094e6:	e02f      	b.n	8009548 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00c      	beq.n	8009508 <USBD_StdEPReq+0xf4>
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	2b80      	cmp	r3, #128	; 0x80
 80094f2:	d009      	beq.n	8009508 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f893 	bl	800a624 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094fe:	2180      	movs	r1, #128	; 0x80
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 f88f 	bl	800a624 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009506:	e025      	b.n	8009554 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fc2a 	bl	8009d64 <USBD_CtlError>
        break;
 8009510:	e020      	b.n	8009554 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	885b      	ldrh	r3, [r3, #2]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d11b      	bne.n	8009552 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f001 f89a 	bl	800a662 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fce3 	bl	8009efa <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	4798      	blx	r3
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009546:	e004      	b.n	8009552 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fc0a 	bl	8009d64 <USBD_CtlError>
        break;
 8009550:	e000      	b.n	8009554 <USBD_StdEPReq+0x140>
        break;
 8009552:	bf00      	nop
      }
      break;
 8009554:	e0aa      	b.n	80096ac <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955c:	2b02      	cmp	r3, #2
 800955e:	d002      	beq.n	8009566 <USBD_StdEPReq+0x152>
 8009560:	2b03      	cmp	r3, #3
 8009562:	d032      	beq.n	80095ca <USBD_StdEPReq+0x1b6>
 8009564:	e097      	b.n	8009696 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <USBD_StdEPReq+0x168>
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2b80      	cmp	r3, #128	; 0x80
 8009570:	d004      	beq.n	800957c <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fbf5 	bl	8009d64 <USBD_CtlError>
          break;
 800957a:	e091      	b.n	80096a0 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800957c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009580:	2b00      	cmp	r3, #0
 8009582:	da0b      	bge.n	800959c <USBD_StdEPReq+0x188>
 8009584:	7bbb      	ldrb	r3, [r7, #14]
 8009586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800958a:	4613      	mov	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	3310      	adds	r3, #16
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	4413      	add	r3, r2
 8009598:	3304      	adds	r3, #4
 800959a:	e00b      	b.n	80095b4 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	4413      	add	r3, r2
 80095b2:	3304      	adds	r3, #4
 80095b4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2202      	movs	r2, #2
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fc3f 	bl	8009e46 <USBD_CtlSendData>
        break;
 80095c8:	e06a      	b.n	80096a0 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80095ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	da11      	bge.n	80095f6 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
 80095d4:	f003 020f 	and.w	r2, r3, #15
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	440b      	add	r3, r1
 80095e4:	3324      	adds	r3, #36	; 0x24
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d117      	bne.n	800961c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fbb8 	bl	8009d64 <USBD_CtlError>
            break;
 80095f4:	e054      	b.n	80096a0 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	f003 020f 	and.w	r2, r3, #15
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	440b      	add	r3, r1
 8009608:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d104      	bne.n	800961c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fba5 	bl	8009d64 <USBD_CtlError>
            break;
 800961a:	e041      	b.n	80096a0 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800961c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009620:	2b00      	cmp	r3, #0
 8009622:	da0b      	bge.n	800963c <USBD_StdEPReq+0x228>
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	3310      	adds	r3, #16
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	4413      	add	r3, r2
 8009638:	3304      	adds	r3, #4
 800963a:	e00b      	b.n	8009654 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800963c:	7bbb      	ldrb	r3, [r7, #14]
 800963e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	3304      	adds	r3, #4
 8009654:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <USBD_StdEPReq+0x24e>
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	2b80      	cmp	r3, #128	; 0x80
 8009660:	d103      	bne.n	800966a <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	e00e      	b.n	8009688 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 f816 	bl	800a6a0 <USBD_LL_IsStallEP>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2201      	movs	r2, #1
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	e002      	b.n	8009688 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2200      	movs	r2, #0
 8009686:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2202      	movs	r2, #2
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fbd9 	bl	8009e46 <USBD_CtlSendData>
          break;
 8009694:	e004      	b.n	80096a0 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fb63 	bl	8009d64 <USBD_CtlError>
        break;
 800969e:	bf00      	nop
      }
      break;
 80096a0:	e004      	b.n	80096ac <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fb5d 	bl	8009d64 <USBD_CtlError>
      break;
 80096aa:	bf00      	nop
    }
    break;
 80096ac:	e004      	b.n	80096b8 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fb57 	bl	8009d64 <USBD_CtlError>
    break;
 80096b6:	bf00      	nop
  }

  return ret;
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	885b      	ldrh	r3, [r3, #2]
 80096de:	0a1b      	lsrs	r3, r3, #8
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	2b0e      	cmp	r3, #14
 80096e6:	f200 8152 	bhi.w	800998e <USBD_GetDescriptor+0x2ca>
 80096ea:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <USBD_GetDescriptor+0x2c>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009761 	.word	0x08009761
 80096f4:	08009779 	.word	0x08009779
 80096f8:	080097b9 	.word	0x080097b9
 80096fc:	0800998f 	.word	0x0800998f
 8009700:	0800998f 	.word	0x0800998f
 8009704:	0800992f 	.word	0x0800992f
 8009708:	0800995b 	.word	0x0800995b
 800970c:	0800998f 	.word	0x0800998f
 8009710:	0800998f 	.word	0x0800998f
 8009714:	0800998f 	.word	0x0800998f
 8009718:	0800998f 	.word	0x0800998f
 800971c:	0800998f 	.word	0x0800998f
 8009720:	0800998f 	.word	0x0800998f
 8009724:	0800998f 	.word	0x0800998f
 8009728:	0800972d 	.word	0x0800972d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009732:	69db      	ldr	r3, [r3, #28]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	7c12      	ldrb	r2, [r2, #16]
 8009744:	f107 0108 	add.w	r1, r7, #8
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
 800974c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800974e:	e126      	b.n	800999e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fb06 	bl	8009d64 <USBD_CtlError>
      err++;
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	3301      	adds	r3, #1
 800975c:	72fb      	strb	r3, [r7, #11]
    break;
 800975e:	e11e      	b.n	800999e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	7c12      	ldrb	r2, [r2, #16]
 800976c:	f107 0108 	add.w	r1, r7, #8
 8009770:	4610      	mov	r0, r2
 8009772:	4798      	blx	r3
 8009774:	60f8      	str	r0, [r7, #12]
    break;
 8009776:	e112      	b.n	800999e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	7c1b      	ldrb	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10d      	bne.n	800979c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009788:	f107 0208 	add.w	r2, r7, #8
 800978c:	4610      	mov	r0, r2
 800978e:	4798      	blx	r3
 8009790:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3301      	adds	r3, #1
 8009796:	2202      	movs	r2, #2
 8009798:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800979a:	e100      	b.n	800999e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	f107 0208 	add.w	r2, r7, #8
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	2202      	movs	r2, #2
 80097b4:	701a      	strb	r2, [r3, #0]
    break;
 80097b6:	e0f2      	b.n	800999e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	885b      	ldrh	r3, [r3, #2]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b05      	cmp	r3, #5
 80097c0:	f200 80ac 	bhi.w	800991c <USBD_GetDescriptor+0x258>
 80097c4:	a201      	add	r2, pc, #4	; (adr r2, 80097cc <USBD_GetDescriptor+0x108>)
 80097c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ca:	bf00      	nop
 80097cc:	080097e5 	.word	0x080097e5
 80097d0:	08009819 	.word	0x08009819
 80097d4:	0800984d 	.word	0x0800984d
 80097d8:	08009881 	.word	0x08009881
 80097dc:	080098b5 	.word	0x080098b5
 80097e0:	080098e9 	.word	0x080098e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00b      	beq.n	8009808 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	7c12      	ldrb	r2, [r2, #16]
 80097fc:	f107 0108 	add.w	r1, r7, #8
 8009800:	4610      	mov	r0, r2
 8009802:	4798      	blx	r3
 8009804:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009806:	e091      	b.n	800992c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 faaa 	bl	8009d64 <USBD_CtlError>
        err++;
 8009810:	7afb      	ldrb	r3, [r7, #11]
 8009812:	3301      	adds	r3, #1
 8009814:	72fb      	strb	r3, [r7, #11]
      break;
 8009816:	e089      	b.n	800992c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	7c12      	ldrb	r2, [r2, #16]
 8009830:	f107 0108 	add.w	r1, r7, #8
 8009834:	4610      	mov	r0, r2
 8009836:	4798      	blx	r3
 8009838:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800983a:	e077      	b.n	800992c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa90 	bl	8009d64 <USBD_CtlError>
        err++;
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	3301      	adds	r3, #1
 8009848:	72fb      	strb	r3, [r7, #11]
      break;
 800984a:	e06f      	b.n	800992c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	7c12      	ldrb	r2, [r2, #16]
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	4610      	mov	r0, r2
 800986a:	4798      	blx	r3
 800986c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800986e:	e05d      	b.n	800992c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa76 	bl	8009d64 <USBD_CtlError>
        err++;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	3301      	adds	r3, #1
 800987c:	72fb      	strb	r3, [r7, #11]
      break;
 800987e:	e055      	b.n	800992c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	7c12      	ldrb	r2, [r2, #16]
 8009898:	f107 0108 	add.w	r1, r7, #8
 800989c:	4610      	mov	r0, r2
 800989e:	4798      	blx	r3
 80098a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098a2:	e043      	b.n	800992c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa5c 	bl	8009d64 <USBD_CtlError>
        err++;
 80098ac:	7afb      	ldrb	r3, [r7, #11]
 80098ae:	3301      	adds	r3, #1
 80098b0:	72fb      	strb	r3, [r7, #11]
      break;
 80098b2:	e03b      	b.n	800992c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7c12      	ldrb	r2, [r2, #16]
 80098cc:	f107 0108 	add.w	r1, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098d6:	e029      	b.n	800992c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa42 	bl	8009d64 <USBD_CtlError>
        err++;
 80098e0:	7afb      	ldrb	r3, [r7, #11]
 80098e2:	3301      	adds	r3, #1
 80098e4:	72fb      	strb	r3, [r7, #11]
      break;
 80098e6:	e021      	b.n	800992c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7c12      	ldrb	r2, [r2, #16]
 8009900:	f107 0108 	add.w	r1, r7, #8
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
 8009908:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800990a:	e00f      	b.n	800992c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa28 	bl	8009d64 <USBD_CtlError>
        err++;
 8009914:	7afb      	ldrb	r3, [r7, #11]
 8009916:	3301      	adds	r3, #1
 8009918:	72fb      	strb	r3, [r7, #11]
      break;
 800991a:	e007      	b.n	800992c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fa20 	bl	8009d64 <USBD_CtlError>
      err++;
 8009924:	7afb      	ldrb	r3, [r7, #11]
 8009926:	3301      	adds	r3, #1
 8009928:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800992a:	bf00      	nop
    }
    break;
 800992c:	e037      	b.n	800999e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7c1b      	ldrb	r3, [r3, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d109      	bne.n	800994a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800993c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993e:	f107 0208 	add.w	r2, r7, #8
 8009942:	4610      	mov	r0, r2
 8009944:	4798      	blx	r3
 8009946:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009948:	e029      	b.n	800999e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fa09 	bl	8009d64 <USBD_CtlError>
      err++;
 8009952:	7afb      	ldrb	r3, [r7, #11]
 8009954:	3301      	adds	r3, #1
 8009956:	72fb      	strb	r3, [r7, #11]
    break;
 8009958:	e021      	b.n	800999e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	7c1b      	ldrb	r3, [r3, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10d      	bne.n	800997e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996a:	f107 0208 	add.w	r2, r7, #8
 800996e:	4610      	mov	r0, r2
 8009970:	4798      	blx	r3
 8009972:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	2207      	movs	r2, #7
 800997a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800997c:	e00f      	b.n	800999e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f9ef 	bl	8009d64 <USBD_CtlError>
      err++;
 8009986:	7afb      	ldrb	r3, [r7, #11]
 8009988:	3301      	adds	r3, #1
 800998a:	72fb      	strb	r3, [r7, #11]
    break;
 800998c:	e007      	b.n	800999e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f9e7 	bl	8009d64 <USBD_CtlError>
    err++;
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	3301      	adds	r3, #1
 800999a:	72fb      	strb	r3, [r7, #11]
    break;
 800999c:	bf00      	nop
  }

  if (err != 0U)
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d11e      	bne.n	80099e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	88db      	ldrh	r3, [r3, #6]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d016      	beq.n	80099da <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80099ac:	893b      	ldrh	r3, [r7, #8]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00e      	beq.n	80099d0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	88da      	ldrh	r2, [r3, #6]
 80099b6:	893b      	ldrh	r3, [r7, #8]
 80099b8:	4293      	cmp	r3, r2
 80099ba:	bf28      	it	cs
 80099bc:	4613      	movcs	r3, r2
 80099be:	b29b      	uxth	r3, r3
 80099c0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80099c2:	893b      	ldrh	r3, [r7, #8]
 80099c4:	461a      	mov	r2, r3
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa3c 	bl	8009e46 <USBD_CtlSendData>
 80099ce:	e009      	b.n	80099e4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f9c6 	bl	8009d64 <USBD_CtlError>
 80099d8:	e004      	b.n	80099e4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fa8d 	bl	8009efa <USBD_CtlSendStatus>
 80099e0:	e000      	b.n	80099e4 <USBD_GetDescriptor+0x320>
    return;
 80099e2:	bf00      	nop
    }
  }
}
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop

080099ec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	889b      	ldrh	r3, [r3, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d130      	bne.n	8009a60 <USBD_SetAddress+0x74>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	88db      	ldrh	r3, [r3, #6]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d12c      	bne.n	8009a60 <USBD_SetAddress+0x74>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	885b      	ldrh	r3, [r3, #2]
 8009a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8009a0c:	d828      	bhi.n	8009a60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	885b      	ldrh	r3, [r3, #2]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d104      	bne.n	8009a2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f99c 	bl	8009d64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a2c:	e01c      	b.n	8009a68 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	7bfa      	ldrb	r2, [r7, #15]
 8009a32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fe5d 	bl	800a6fa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fa5a 	bl	8009efa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d004      	beq.n	8009a56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a54:	e008      	b.n	8009a68 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a5e:	e003      	b.n	8009a68 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f97e 	bl	8009d64 <USBD_CtlError>
  }
}
 8009a68:	bf00      	nop
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	885b      	ldrh	r3, [r3, #2]
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	4b4b      	ldr	r3, [pc, #300]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009a86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a88:	4b4a      	ldr	r3, [pc, #296]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d905      	bls.n	8009a9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f966 	bl	8009d64 <USBD_CtlError>
    return USBD_FAIL;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e087      	b.n	8009bac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d002      	beq.n	8009aac <USBD_SetConfig+0x3c>
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d025      	beq.n	8009af6 <USBD_SetConfig+0x86>
 8009aaa:	e071      	b.n	8009b90 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009aac:	4b41      	ldr	r3, [pc, #260]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01c      	beq.n	8009aee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009ab4:	4b3f      	ldr	r3, [pc, #252]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009abe:	4b3d      	ldr	r3, [pc, #244]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff f9bd 	bl	8008e44 <USBD_SetClassConfig>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d004      	beq.n	8009ade <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f944 	bl	8009d64 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009adc:	e065      	b.n	8009baa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa0b 	bl	8009efa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2203      	movs	r2, #3
 8009ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009aec:	e05d      	b.n	8009baa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fa03 	bl	8009efa <USBD_CtlSendStatus>
    break;
 8009af4:	e059      	b.n	8009baa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009af6:	4b2f      	ldr	r3, [pc, #188]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d112      	bne.n	8009b24 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2202      	movs	r2, #2
 8009b02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009b06:	4b2b      	ldr	r3, [pc, #172]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b10:	4b28      	ldr	r3, [pc, #160]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff f9b0 	bl	8008e7c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f9ec 	bl	8009efa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009b22:	e042      	b.n	8009baa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009b24:	4b23      	ldr	r3, [pc, #140]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d02a      	beq.n	8009b88 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7ff f99e 	bl	8008e7c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009b40:	4b1c      	ldr	r3, [pc, #112]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b4a:	4b1a      	ldr	r3, [pc, #104]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff f977 	bl	8008e44 <USBD_SetClassConfig>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00f      	beq.n	8009b80 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f8fe 	bl	8009d64 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff f983 	bl	8008e7c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009b7e:	e014      	b.n	8009baa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f9ba 	bl	8009efa <USBD_CtlSendStatus>
    break;
 8009b86:	e010      	b.n	8009baa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f9b6 	bl	8009efa <USBD_CtlSendStatus>
    break;
 8009b8e:	e00c      	b.n	8009baa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f8e6 	bl	8009d64 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b98:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <USBD_SetConfig+0x144>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff f96c 	bl	8008e7c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba8:	bf00      	nop
  }

  return ret;
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	200001a0 	.word	0x200001a0

08009bb8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	88db      	ldrh	r3, [r3, #6]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d004      	beq.n	8009bd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f8c9 	bl	8009d64 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009bd2:	e021      	b.n	8009c18 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	db17      	blt.n	8009c0e <USBD_GetConfig+0x56>
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	dd02      	ble.n	8009be8 <USBD_GetConfig+0x30>
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d00b      	beq.n	8009bfe <USBD_GetConfig+0x46>
 8009be6:	e012      	b.n	8009c0e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f925 	bl	8009e46 <USBD_CtlSendData>
      break;
 8009bfc:	e00c      	b.n	8009c18 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3304      	adds	r3, #4
 8009c02:	2201      	movs	r2, #1
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f91d 	bl	8009e46 <USBD_CtlSendData>
      break;
 8009c0c:	e004      	b.n	8009c18 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f8a7 	bl	8009d64 <USBD_CtlError>
      break;
 8009c16:	bf00      	nop
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c30:	3b01      	subs	r3, #1
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d81e      	bhi.n	8009c74 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	88db      	ldrh	r3, [r3, #6]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d004      	beq.n	8009c48 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f88f 	bl	8009d64 <USBD_CtlError>
      break;
 8009c46:	e01a      	b.n	8009c7e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f043 0202 	orr.w	r2, r3, #2
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	330c      	adds	r3, #12
 8009c68:	2202      	movs	r2, #2
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f8ea 	bl	8009e46 <USBD_CtlSendData>
    break;
 8009c72:	e004      	b.n	8009c7e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f874 	bl	8009d64 <USBD_CtlError>
    break;
 8009c7c:	bf00      	nop
  }
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b082      	sub	sp, #8
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	885b      	ldrh	r3, [r3, #2]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d106      	bne.n	8009ca6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f92a 	bl	8009efa <USBD_CtlSendStatus>
  }
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d80b      	bhi.n	8009cdc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	885b      	ldrh	r3, [r3, #2]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d10c      	bne.n	8009ce6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f910 	bl	8009efa <USBD_CtlSendStatus>
      }
      break;
 8009cda:	e004      	b.n	8009ce6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f840 	bl	8009d64 <USBD_CtlError>
      break;
 8009ce4:	e000      	b.n	8009ce8 <USBD_ClrFeature+0x3a>
      break;
 8009ce6:	bf00      	nop
  }
}
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	781a      	ldrb	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	781a      	ldrb	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3301      	adds	r3, #1
 8009d18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f7ff faa8 	bl	8009270 <SWAPBYTE>
 8009d20:	4603      	mov	r3, r0
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3301      	adds	r3, #1
 8009d32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f7ff fa9b 	bl	8009270 <SWAPBYTE>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3301      	adds	r3, #1
 8009d46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff fa8e 	bl	8009270 <SWAPBYTE>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	80da      	strh	r2, [r3, #6]
}
 8009d5c:	bf00      	nop
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d6e:	2180      	movs	r1, #128	; 0x80
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fc57 	bl	800a624 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d76:	2100      	movs	r1, #0
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fc53 	bl	800a624 <USBD_LL_StallEP>
}
 8009d7e:	bf00      	nop
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b086      	sub	sp, #24
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	60b9      	str	r1, [r7, #8]
 8009d90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d036      	beq.n	8009e0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009da0:	6938      	ldr	r0, [r7, #16]
 8009da2:	f000 f836 	bl	8009e12 <USBD_GetLen>
 8009da6:	4603      	mov	r3, r0
 8009da8:	3301      	adds	r3, #1
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	4413      	add	r3, r2
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	7812      	ldrb	r2, [r2, #0]
 8009dbe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	4413      	add	r3, r2
 8009dcc:	2203      	movs	r2, #3
 8009dce:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009dd6:	e013      	b.n	8009e00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	4413      	add	r3, r2
 8009dde:	693a      	ldr	r2, [r7, #16]
 8009de0:	7812      	ldrb	r2, [r2, #0]
 8009de2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	3301      	adds	r3, #1
 8009de8:	613b      	str	r3, [r7, #16]
    idx++;
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	3301      	adds	r3, #1
 8009dee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	4413      	add	r3, r2
 8009df6:	2200      	movs	r2, #0
 8009df8:	701a      	strb	r2, [r3, #0]
    idx++;
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1e7      	bne.n	8009dd8 <USBD_GetString+0x52>
 8009e08:	e000      	b.n	8009e0c <USBD_GetString+0x86>
    return;
 8009e0a:	bf00      	nop
  }
}
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e22:	e005      	b.n	8009e30 <USBD_GetLen+0x1e>
  {
    len++;
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	3301      	adds	r3, #1
 8009e28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1f5      	bne.n	8009e24 <USBD_GetLen+0x12>
  }

  return len;
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b084      	sub	sp, #16
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	60b9      	str	r1, [r7, #8]
 8009e50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2202      	movs	r2, #2
 8009e56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 fc63 	bl	800a738 <USBD_LL_Transmit>

  return USBD_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 fc52 	bl	800a738 <USBD_LL_Transmit>

  return USBD_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2203      	movs	r2, #3
 8009eae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 fc56 	bl	800a77a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	2100      	movs	r1, #0
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 fc45 	bl	800a77a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2204      	movs	r2, #4
 8009f06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2100      	movs	r1, #0
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fc11 	bl	800a738 <USBD_LL_Transmit>

  return USBD_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2205      	movs	r2, #5
 8009f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f30:	2300      	movs	r3, #0
 8009f32:	2200      	movs	r2, #0
 8009f34:	2100      	movs	r1, #0
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fc1f 	bl	800a77a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	4912      	ldr	r1, [pc, #72]	; (8009f98 <MX_USB_Device_Init+0x50>)
 8009f50:	4812      	ldr	r0, [pc, #72]	; (8009f9c <MX_USB_Device_Init+0x54>)
 8009f52:	f7fe ff09 	bl	8008d68 <USBD_Init>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009f5c:	f7f6 fc80 	bl	8000860 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009f60:	490f      	ldr	r1, [pc, #60]	; (8009fa0 <MX_USB_Device_Init+0x58>)
 8009f62:	480e      	ldr	r0, [pc, #56]	; (8009f9c <MX_USB_Device_Init+0x54>)
 8009f64:	f7fe ff30 	bl	8008dc8 <USBD_RegisterClass>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009f6e:	f7f6 fc77 	bl	8000860 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009f72:	490c      	ldr	r1, [pc, #48]	; (8009fa4 <MX_USB_Device_Init+0x5c>)
 8009f74:	4809      	ldr	r0, [pc, #36]	; (8009f9c <MX_USB_Device_Init+0x54>)
 8009f76:	f7fe fe8b 	bl	8008c90 <USBD_CDC_RegisterInterface>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009f80:	f7f6 fc6e 	bl	8000860 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009f84:	4805      	ldr	r0, [pc, #20]	; (8009f9c <MX_USB_Device_Init+0x54>)
 8009f86:	f7fe ff46 	bl	8008e16 <USBD_Start>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009f90:	f7f6 fc66 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009f94:	bf00      	nop
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20000130 	.word	0x20000130
 8009f9c:	20000628 	.word	0x20000628
 8009fa0:	20000018 	.word	0x20000018
 8009fa4:	2000011c 	.word	0x2000011c

08009fa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fac:	2200      	movs	r2, #0
 8009fae:	4905      	ldr	r1, [pc, #20]	; (8009fc4 <CDC_Init_FS+0x1c>)
 8009fb0:	4805      	ldr	r0, [pc, #20]	; (8009fc8 <CDC_Init_FS+0x20>)
 8009fb2:	f7fe fe82 	bl	8008cba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fb6:	4905      	ldr	r1, [pc, #20]	; (8009fcc <CDC_Init_FS+0x24>)
 8009fb8:	4803      	ldr	r0, [pc, #12]	; (8009fc8 <CDC_Init_FS+0x20>)
 8009fba:	f7fe fe97 	bl	8008cec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	20000ce0 	.word	0x20000ce0
 8009fc8:	20000628 	.word	0x20000628
 8009fcc:	200008f8 	.word	0x200008f8

08009fd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	6039      	str	r1, [r7, #0]
 8009fea:	71fb      	strb	r3, [r7, #7]
 8009fec:	4613      	mov	r3, r2
 8009fee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	2b23      	cmp	r3, #35	; 0x23
 8009ff4:	d84a      	bhi.n	800a08c <CDC_Control_FS+0xac>
 8009ff6:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <CDC_Control_FS+0x1c>)
 8009ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffc:	0800a08d 	.word	0x0800a08d
 800a000:	0800a08d 	.word	0x0800a08d
 800a004:	0800a08d 	.word	0x0800a08d
 800a008:	0800a08d 	.word	0x0800a08d
 800a00c:	0800a08d 	.word	0x0800a08d
 800a010:	0800a08d 	.word	0x0800a08d
 800a014:	0800a08d 	.word	0x0800a08d
 800a018:	0800a08d 	.word	0x0800a08d
 800a01c:	0800a08d 	.word	0x0800a08d
 800a020:	0800a08d 	.word	0x0800a08d
 800a024:	0800a08d 	.word	0x0800a08d
 800a028:	0800a08d 	.word	0x0800a08d
 800a02c:	0800a08d 	.word	0x0800a08d
 800a030:	0800a08d 	.word	0x0800a08d
 800a034:	0800a08d 	.word	0x0800a08d
 800a038:	0800a08d 	.word	0x0800a08d
 800a03c:	0800a08d 	.word	0x0800a08d
 800a040:	0800a08d 	.word	0x0800a08d
 800a044:	0800a08d 	.word	0x0800a08d
 800a048:	0800a08d 	.word	0x0800a08d
 800a04c:	0800a08d 	.word	0x0800a08d
 800a050:	0800a08d 	.word	0x0800a08d
 800a054:	0800a08d 	.word	0x0800a08d
 800a058:	0800a08d 	.word	0x0800a08d
 800a05c:	0800a08d 	.word	0x0800a08d
 800a060:	0800a08d 	.word	0x0800a08d
 800a064:	0800a08d 	.word	0x0800a08d
 800a068:	0800a08d 	.word	0x0800a08d
 800a06c:	0800a08d 	.word	0x0800a08d
 800a070:	0800a08d 	.word	0x0800a08d
 800a074:	0800a08d 	.word	0x0800a08d
 800a078:	0800a08d 	.word	0x0800a08d
 800a07c:	0800a08d 	.word	0x0800a08d
 800a080:	0800a08d 	.word	0x0800a08d
 800a084:	0800a08d 	.word	0x0800a08d
 800a088:	0800a08d 	.word	0x0800a08d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a08c:	bf00      	nop
  }

  return (USBD_OK);
 800a08e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a090:	4618      	mov	r0, r3
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	4805      	ldr	r0, [pc, #20]	; (800a0c0 <CDC_Receive_FS+0x24>)
 800a0aa:	f7fe fe1f 	bl	8008cec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0ae:	4804      	ldr	r0, [pc, #16]	; (800a0c0 <CDC_Receive_FS+0x24>)
 800a0b0:	f7fe fe30 	bl	8008d14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a0b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000628 	.word	0x20000628

0800a0c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a0d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
	...

0800a0e8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	6039      	str	r1, [r7, #0]
 800a0f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2212      	movs	r2, #18
 800a0f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a0fa:	4b03      	ldr	r3, [pc, #12]	; (800a108 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	20000150 	.word	0x20000150

0800a10c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	4603      	mov	r3, r0
 800a114:	6039      	str	r1, [r7, #0]
 800a116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2204      	movs	r2, #4
 800a11c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a11e:	4b03      	ldr	r3, [pc, #12]	; (800a12c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	20000164 	.word	0x20000164

0800a130 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	6039      	str	r1, [r7, #0]
 800a13a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d105      	bne.n	800a14e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	4907      	ldr	r1, [pc, #28]	; (800a164 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a146:	4808      	ldr	r0, [pc, #32]	; (800a168 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a148:	f7ff fe1d 	bl	8009d86 <USBD_GetString>
 800a14c:	e004      	b.n	800a158 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	4904      	ldr	r1, [pc, #16]	; (800a164 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a152:	4805      	ldr	r0, [pc, #20]	; (800a168 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a154:	f7ff fe17 	bl	8009d86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a158:	4b02      	ldr	r3, [pc, #8]	; (800a164 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	200010c8 	.word	0x200010c8
 800a168:	0800a964 	.word	0x0800a964

0800a16c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	6039      	str	r1, [r7, #0]
 800a176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	4904      	ldr	r1, [pc, #16]	; (800a18c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a17c:	4804      	ldr	r0, [pc, #16]	; (800a190 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a17e:	f7ff fe02 	bl	8009d86 <USBD_GetString>
  return USBD_StrDesc;
 800a182:	4b02      	ldr	r3, [pc, #8]	; (800a18c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	200010c8 	.word	0x200010c8
 800a190:	0800a97c 	.word	0x0800a97c

0800a194 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	4603      	mov	r3, r0
 800a19c:	6039      	str	r1, [r7, #0]
 800a19e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	221a      	movs	r2, #26
 800a1a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a1a6:	f000 f843 	bl	800a230 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a1aa:	4b02      	ldr	r3, [pc, #8]	; (800a1b4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	20000168 	.word	0x20000168

0800a1b8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	6039      	str	r1, [r7, #0]
 800a1c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d105      	bne.n	800a1d6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	4907      	ldr	r1, [pc, #28]	; (800a1ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a1ce:	4808      	ldr	r0, [pc, #32]	; (800a1f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a1d0:	f7ff fdd9 	bl	8009d86 <USBD_GetString>
 800a1d4:	e004      	b.n	800a1e0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	4904      	ldr	r1, [pc, #16]	; (800a1ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a1da:	4805      	ldr	r0, [pc, #20]	; (800a1f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a1dc:	f7ff fdd3 	bl	8009d86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1e0:	4b02      	ldr	r3, [pc, #8]	; (800a1ec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	200010c8 	.word	0x200010c8
 800a1f0:	0800a990 	.word	0x0800a990

0800a1f4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	6039      	str	r1, [r7, #0]
 800a1fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a200:	79fb      	ldrb	r3, [r7, #7]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d105      	bne.n	800a212 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	4907      	ldr	r1, [pc, #28]	; (800a228 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a20a:	4808      	ldr	r0, [pc, #32]	; (800a22c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a20c:	f7ff fdbb 	bl	8009d86 <USBD_GetString>
 800a210:	e004      	b.n	800a21c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	4904      	ldr	r1, [pc, #16]	; (800a228 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a216:	4805      	ldr	r0, [pc, #20]	; (800a22c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a218:	f7ff fdb5 	bl	8009d86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a21c:	4b02      	ldr	r3, [pc, #8]	; (800a228 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	200010c8 	.word	0x200010c8
 800a22c:	0800a99c 	.word	0x0800a99c

0800a230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a236:	4b0f      	ldr	r3, [pc, #60]	; (800a274 <Get_SerialNum+0x44>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a23c:	4b0e      	ldr	r3, [pc, #56]	; (800a278 <Get_SerialNum+0x48>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a242:	4b0e      	ldr	r3, [pc, #56]	; (800a27c <Get_SerialNum+0x4c>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4413      	add	r3, r2
 800a24e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d009      	beq.n	800a26a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a256:	2208      	movs	r2, #8
 800a258:	4909      	ldr	r1, [pc, #36]	; (800a280 <Get_SerialNum+0x50>)
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 f814 	bl	800a288 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a260:	2204      	movs	r2, #4
 800a262:	4908      	ldr	r1, [pc, #32]	; (800a284 <Get_SerialNum+0x54>)
 800a264:	68b8      	ldr	r0, [r7, #8]
 800a266:	f000 f80f 	bl	800a288 <IntToUnicode>
  }
}
 800a26a:	bf00      	nop
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	1fff7590 	.word	0x1fff7590
 800a278:	1fff7594 	.word	0x1fff7594
 800a27c:	1fff7598 	.word	0x1fff7598
 800a280:	2000016a 	.word	0x2000016a
 800a284:	2000017a 	.word	0x2000017a

0800a288 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a288:	b480      	push	{r7}
 800a28a:	b087      	sub	sp, #28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	4613      	mov	r3, r2
 800a294:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a29a:	2300      	movs	r3, #0
 800a29c:	75fb      	strb	r3, [r7, #23]
 800a29e:	e027      	b.n	800a2f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	0f1b      	lsrs	r3, r3, #28
 800a2a4:	2b09      	cmp	r3, #9
 800a2a6:	d80b      	bhi.n	800a2c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	0f1b      	lsrs	r3, r3, #28
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
 800a2b0:	005b      	lsls	r3, r3, #1
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	440b      	add	r3, r1
 800a2b8:	3230      	adds	r2, #48	; 0x30
 800a2ba:	b2d2      	uxtb	r2, r2
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	e00a      	b.n	800a2d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	0f1b      	lsrs	r3, r3, #28
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	440b      	add	r3, r1
 800a2d0:	3237      	adds	r2, #55	; 0x37
 800a2d2:	b2d2      	uxtb	r2, r2
 800a2d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	011b      	lsls	r3, r3, #4
 800a2da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2dc:	7dfb      	ldrb	r3, [r7, #23]
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2ea:	7dfb      	ldrb	r3, [r7, #23]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	75fb      	strb	r3, [r7, #23]
 800a2f0:	7dfa      	ldrb	r2, [r7, #23]
 800a2f2:	79fb      	ldrb	r3, [r7, #7]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d3d3      	bcc.n	800a2a0 <IntToUnicode+0x18>
  }
}
 800a2f8:	bf00      	nop
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a0d      	ldr	r2, [pc, #52]	; (800a348 <HAL_PCD_MspInit+0x44>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d113      	bne.n	800a33e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a316:	4b0d      	ldr	r3, [pc, #52]	; (800a34c <HAL_PCD_MspInit+0x48>)
 800a318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a31a:	4a0c      	ldr	r2, [pc, #48]	; (800a34c <HAL_PCD_MspInit+0x48>)
 800a31c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a320:	6593      	str	r3, [r2, #88]	; 0x58
 800a322:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <HAL_PCD_MspInit+0x48>)
 800a324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a32e:	2200      	movs	r2, #0
 800a330:	2100      	movs	r1, #0
 800a332:	2014      	movs	r0, #20
 800a334:	f7f7 f897 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a338:	2014      	movs	r0, #20
 800a33a:	f7f7 f8ae 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a33e:	bf00      	nop
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	40005c00 	.word	0x40005c00
 800a34c:	40021000 	.word	0x40021000

0800a350 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a364:	4619      	mov	r1, r3
 800a366:	4610      	mov	r0, r2
 800a368:	f7fe fda0 	bl	8008eac <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a36c:	bf00      	nop
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a386:	78fa      	ldrb	r2, [r7, #3]
 800a388:	6879      	ldr	r1, [r7, #4]
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	00db      	lsls	r3, r3, #3
 800a392:	440b      	add	r3, r1
 800a394:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	78fb      	ldrb	r3, [r7, #3]
 800a39c:	4619      	mov	r1, r3
 800a39e:	f7fe fdd8 	bl	8008f52 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a3a2:	bf00      	nop
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a3bc:	78fa      	ldrb	r2, [r7, #3]
 800a3be:	6879      	ldr	r1, [r7, #4]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	440b      	add	r3, r1
 800a3ca:	333c      	adds	r3, #60	; 0x3c
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	78fb      	ldrb	r3, [r7, #3]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	f7fe fe21 	bl	8009018 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fe ff25 	bl	800923c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b084      	sub	sp, #16
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a402:	2301      	movs	r3, #1
 800a404:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d001      	beq.n	800a412 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a40e:	f7f6 fa27 	bl	8000860 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a418:	7bfa      	ldrb	r2, [r7, #15]
 800a41a:	4611      	mov	r1, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe fed2 	bl	80091c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fe fe8b 	bl	8009144 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a42e:	bf00      	nop
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe fecd 	bl	80091e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d005      	beq.n	800a460 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a454:	4b04      	ldr	r3, [pc, #16]	; (800a468 <HAL_PCD_SuspendCallback+0x30>)
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	4a03      	ldr	r2, [pc, #12]	; (800a468 <HAL_PCD_SuspendCallback+0x30>)
 800a45a:	f043 0306 	orr.w	r3, r3, #6
 800a45e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a460:	bf00      	nop
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	e000ed00 	.word	0xe000ed00

0800a46c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d007      	beq.n	800a48c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a47c:	4b08      	ldr	r3, [pc, #32]	; (800a4a0 <HAL_PCD_ResumeCallback+0x34>)
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	4a07      	ldr	r2, [pc, #28]	; (800a4a0 <HAL_PCD_ResumeCallback+0x34>)
 800a482:	f023 0306 	bic.w	r3, r3, #6
 800a486:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a488:	f000 f9fa 	bl	800a880 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe febc 	bl	8009210 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a498:	bf00      	nop
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	e000ed00 	.word	0xe000ed00

0800a4a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a4ac:	4a2b      	ldr	r2, [pc, #172]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a29      	ldr	r2, [pc, #164]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a4bc:	4b27      	ldr	r3, [pc, #156]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4be:	4a28      	ldr	r2, [pc, #160]	; (800a560 <USBD_LL_Init+0xbc>)
 800a4c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a4c2:	4b26      	ldr	r3, [pc, #152]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4c4:	2208      	movs	r2, #8
 800a4c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a4c8:	4b24      	ldr	r3, [pc, #144]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4ce:	4b23      	ldr	r3, [pc, #140]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a4d4:	4b21      	ldr	r3, [pc, #132]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a4da:	4b20      	ldr	r3, [pc, #128]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a4e0:	4b1e      	ldr	r3, [pc, #120]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a4e6:	4b1d      	ldr	r3, [pc, #116]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a4ec:	481b      	ldr	r0, [pc, #108]	; (800a55c <USBD_LL_Init+0xb8>)
 800a4ee:	f7f7 fa83 	bl	80019f8 <HAL_PCD_Init>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a4f8:	f7f6 f9b2 	bl	8000860 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a502:	2318      	movs	r3, #24
 800a504:	2200      	movs	r2, #0
 800a506:	2100      	movs	r1, #0
 800a508:	f7f8 fd71 	bl	8002fee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a512:	2358      	movs	r3, #88	; 0x58
 800a514:	2200      	movs	r2, #0
 800a516:	2180      	movs	r1, #128	; 0x80
 800a518:	f7f8 fd69 	bl	8002fee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a522:	23c0      	movs	r3, #192	; 0xc0
 800a524:	2200      	movs	r2, #0
 800a526:	2181      	movs	r1, #129	; 0x81
 800a528:	f7f8 fd61 	bl	8002fee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a532:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a536:	2200      	movs	r2, #0
 800a538:	2101      	movs	r1, #1
 800a53a:	f7f8 fd58 	bl	8002fee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a544:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a548:	2200      	movs	r2, #0
 800a54a:	2182      	movs	r1, #130	; 0x82
 800a54c:	f7f8 fd4f 	bl	8002fee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	200012c8 	.word	0x200012c8
 800a560:	40005c00 	.word	0x40005c00

0800a564 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7f7 fb21 	bl	8001bc2 <HAL_PCD_Start>
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a584:	7bfb      	ldrb	r3, [r7, #15]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 f980 	bl	800a88c <USBD_Get_USB_Status>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a590:	7bbb      	ldrb	r3, [r7, #14]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	70fb      	strb	r3, [r7, #3]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	70bb      	strb	r3, [r7, #2]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a5c2:	78bb      	ldrb	r3, [r7, #2]
 800a5c4:	883a      	ldrh	r2, [r7, #0]
 800a5c6:	78f9      	ldrb	r1, [r7, #3]
 800a5c8:	f7f7 fc90 	bl	8001eec <HAL_PCD_EP_Open>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 f95a 	bl	800a88c <USBD_Get_USB_Status>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a600:	78fa      	ldrb	r2, [r7, #3]
 800a602:	4611      	mov	r1, r2
 800a604:	4618      	mov	r0, r3
 800a606:	f7f7 fcd7 	bl	8001fb8 <HAL_PCD_EP_Close>
 800a60a:	4603      	mov	r3, r0
 800a60c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	4618      	mov	r0, r3
 800a612:	f000 f93b 	bl	800a88c <USBD_Get_USB_Status>
 800a616:	4603      	mov	r3, r0
 800a618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a63e:	78fa      	ldrb	r2, [r7, #3]
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7f7 fd98 	bl	8002178 <HAL_PCD_EP_SetStall>
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 f91c 	bl	800a88c <USBD_Get_USB_Status>
 800a654:	4603      	mov	r3, r0
 800a656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a658:	7bbb      	ldrb	r3, [r7, #14]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	460b      	mov	r3, r1
 800a66c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a67c:	78fa      	ldrb	r2, [r7, #3]
 800a67e:	4611      	mov	r1, r2
 800a680:	4618      	mov	r0, r3
 800a682:	f7f7 fdd9 	bl	8002238 <HAL_PCD_EP_ClrStall>
 800a686:	4603      	mov	r3, r0
 800a688:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 f8fd 	bl	800a88c <USBD_Get_USB_Status>
 800a692:	4603      	mov	r3, r0
 800a694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a696:	7bbb      	ldrb	r3, [r7, #14]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a6b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	da0c      	bge.n	800a6d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a6bc:	78fb      	ldrb	r3, [r7, #3]
 800a6be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c2:	68f9      	ldr	r1, [r7, #12]
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	00db      	lsls	r3, r3, #3
 800a6ce:	440b      	add	r3, r1
 800a6d0:	3302      	adds	r3, #2
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	e00b      	b.n	800a6ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6d6:	78fb      	ldrb	r3, [r7, #3]
 800a6d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6dc:	68f9      	ldr	r1, [r7, #12]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	440b      	add	r3, r1
 800a6e8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a6ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	460b      	mov	r3, r1
 800a704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a714:	78fa      	ldrb	r2, [r7, #3]
 800a716:	4611      	mov	r1, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	f7f7 fbc2 	bl	8001ea2 <HAL_PCD_SetAddress>
 800a71e:	4603      	mov	r3, r0
 800a720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	4618      	mov	r0, r3
 800a726:	f000 f8b1 	bl	800a88c <USBD_Get_USB_Status>
 800a72a:	4603      	mov	r3, r0
 800a72c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a72e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	607a      	str	r2, [r7, #4]
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	460b      	mov	r3, r1
 800a746:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a756:	7af9      	ldrb	r1, [r7, #11]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	f7f7 fcc9 	bl	80020f2 <HAL_PCD_EP_Transmit>
 800a760:	4603      	mov	r3, r0
 800a762:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a764:	7dfb      	ldrb	r3, [r7, #23]
 800a766:	4618      	mov	r0, r3
 800a768:	f000 f890 	bl	800a88c <USBD_Get_USB_Status>
 800a76c:	4603      	mov	r3, r0
 800a76e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a770:	7dbb      	ldrb	r3, [r7, #22]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b086      	sub	sp, #24
 800a77e:	af00      	add	r7, sp, #0
 800a780:	60f8      	str	r0, [r7, #12]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
 800a786:	460b      	mov	r3, r1
 800a788:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a798:	7af9      	ldrb	r1, [r7, #11]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	f7f7 fc53 	bl	8002048 <HAL_PCD_EP_Receive>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 f86f 	bl	800a88c <USBD_Get_USB_Status>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3718      	adds	r7, #24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7ce:	78fa      	ldrb	r2, [r7, #3]
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7f7 fc75 	bl	80020c2 <HAL_PCD_EP_GetRxCount>
 800a7d8:	4603      	mov	r3, r0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
	...

0800a7e4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d002      	beq.n	800a7fc <HAL_PCDEx_LPM_Callback+0x18>
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d013      	beq.n	800a822 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a7fa:	e023      	b.n	800a844 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	699b      	ldr	r3, [r3, #24]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d007      	beq.n	800a814 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a804:	f000 f83c 	bl	800a880 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a808:	4b10      	ldr	r3, [pc, #64]	; (800a84c <HAL_PCDEx_LPM_Callback+0x68>)
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	4a0f      	ldr	r2, [pc, #60]	; (800a84c <HAL_PCDEx_LPM_Callback+0x68>)
 800a80e:	f023 0306 	bic.w	r3, r3, #6
 800a812:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fe fcf8 	bl	8009210 <USBD_LL_Resume>
    break;
 800a820:	e010      	b.n	800a844 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fe fcdc 	bl	80091e6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d005      	beq.n	800a842 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a836:	4b05      	ldr	r3, [pc, #20]	; (800a84c <HAL_PCDEx_LPM_Callback+0x68>)
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	4a04      	ldr	r2, [pc, #16]	; (800a84c <HAL_PCDEx_LPM_Callback+0x68>)
 800a83c:	f043 0306 	orr.w	r3, r3, #6
 800a840:	6113      	str	r3, [r2, #16]
    break;
 800a842:	bf00      	nop
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	e000ed00 	.word	0xe000ed00

0800a850 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a858:	4b03      	ldr	r3, [pc, #12]	; (800a868 <USBD_static_malloc+0x18>)
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	200001a4 	.word	0x200001a4

0800a86c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]

}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a884:	f7f5 ff1a 	bl	80006bc <SystemClock_Config>
}
 800a888:	bf00      	nop
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	4603      	mov	r3, r0
 800a894:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a89a:	79fb      	ldrb	r3, [r7, #7]
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d817      	bhi.n	800a8d0 <USBD_Get_USB_Status+0x44>
 800a8a0:	a201      	add	r2, pc, #4	; (adr r2, 800a8a8 <USBD_Get_USB_Status+0x1c>)
 800a8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a6:	bf00      	nop
 800a8a8:	0800a8b9 	.word	0x0800a8b9
 800a8ac:	0800a8bf 	.word	0x0800a8bf
 800a8b0:	0800a8c5 	.word	0x0800a8c5
 800a8b4:	0800a8cb 	.word	0x0800a8cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a8bc:	e00b      	b.n	800a8d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c2:	e008      	b.n	800a8d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c8:	e005      	b.n	800a8d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ce:	e002      	b.n	800a8d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d4:	bf00      	nop
  }
  return usb_status;
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <__libc_init_array>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	4e0d      	ldr	r6, [pc, #52]	; (800a91c <__libc_init_array+0x38>)
 800a8e8:	4c0d      	ldr	r4, [pc, #52]	; (800a920 <__libc_init_array+0x3c>)
 800a8ea:	1ba4      	subs	r4, r4, r6
 800a8ec:	10a4      	asrs	r4, r4, #2
 800a8ee:	2500      	movs	r5, #0
 800a8f0:	42a5      	cmp	r5, r4
 800a8f2:	d109      	bne.n	800a908 <__libc_init_array+0x24>
 800a8f4:	4e0b      	ldr	r6, [pc, #44]	; (800a924 <__libc_init_array+0x40>)
 800a8f6:	4c0c      	ldr	r4, [pc, #48]	; (800a928 <__libc_init_array+0x44>)
 800a8f8:	f000 f820 	bl	800a93c <_init>
 800a8fc:	1ba4      	subs	r4, r4, r6
 800a8fe:	10a4      	asrs	r4, r4, #2
 800a900:	2500      	movs	r5, #0
 800a902:	42a5      	cmp	r5, r4
 800a904:	d105      	bne.n	800a912 <__libc_init_array+0x2e>
 800a906:	bd70      	pop	{r4, r5, r6, pc}
 800a908:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a90c:	4798      	blx	r3
 800a90e:	3501      	adds	r5, #1
 800a910:	e7ee      	b.n	800a8f0 <__libc_init_array+0xc>
 800a912:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a916:	4798      	blx	r3
 800a918:	3501      	adds	r5, #1
 800a91a:	e7f2      	b.n	800a902 <__libc_init_array+0x1e>
 800a91c:	0800a9e4 	.word	0x0800a9e4
 800a920:	0800a9e4 	.word	0x0800a9e4
 800a924:	0800a9e4 	.word	0x0800a9e4
 800a928:	0800a9e8 	.word	0x0800a9e8

0800a92c <memset>:
 800a92c:	4402      	add	r2, r0
 800a92e:	4603      	mov	r3, r0
 800a930:	4293      	cmp	r3, r2
 800a932:	d100      	bne.n	800a936 <memset+0xa>
 800a934:	4770      	bx	lr
 800a936:	f803 1b01 	strb.w	r1, [r3], #1
 800a93a:	e7f9      	b.n	800a930 <memset+0x4>

0800a93c <_init>:
 800a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93e:	bf00      	nop
 800a940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a942:	bc08      	pop	{r3}
 800a944:	469e      	mov	lr, r3
 800a946:	4770      	bx	lr

0800a948 <_fini>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	bf00      	nop
 800a94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94e:	bc08      	pop	{r3}
 800a950:	469e      	mov	lr, r3
 800a952:	4770      	bx	lr
